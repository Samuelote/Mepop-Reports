{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Switch from 'react-ios-switch';\nimport theme from '../../../theme';\nimport styled from 'styled-components';\n\nconst SwitchView = (_ref) => {\n  let {\n    label\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  return __jsx(React.Fragment, null, __jsx(Switch, _extends({}, props, {\n    pendingOnColor: theme.colors.green\n  })), __jsx(Label, null, label));\n};\n\nexport default SwitchView;\nconst Label = styled.div.withConfig({\n  displayName: \"Switch__Label\",\n  componentId: \"sc-8ffxgz-0\"\n})([\"font-weight:\", \";font-size:13px;line-height:18px;text-transform:uppercase;margin-left:5px;\"], theme.fontWeights.regular);","map":null,"metadata":{},"sourceType":"module"}