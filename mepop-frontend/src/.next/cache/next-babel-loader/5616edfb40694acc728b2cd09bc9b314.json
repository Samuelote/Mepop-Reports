{"ast":null,"code":"var _jsxFileName = \"/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/VariableLineGraph/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { memo, useMemo, useState } from 'react';\nimport moment from 'moment';\nimport LineChart from '../../../styles/reporting/LineChart';\nimport { groupByDate } from '../util/grouping';\nimport Flex from '../../../styles/layout/Flex';\nimport Button from '../../../styles/elements/Button';\nconst VariableLineChart = memo(({\n  data\n}) => {\n  const {\n    0: variables,\n    1: updateVars\n  } = useState([{\n    dataKey: 'Items Sold',\n    size: 70,\n    color: 'teal',\n    disabled: false\n  }, {\n    dataKey: 'Gross',\n    size: 70,\n    color: 'pastelPurple',\n    disabled: true\n  }, {\n    dataKey: 'Net',\n    size: 70,\n    color: 'pastelGreen',\n    disabled: true\n  }]);\n  const chartData = useMemo(() => groupByDate(data, true), [data]);\n\n  const handleClick = i => {\n    const newVars = [...variables];\n    newVars[i].disabled = !newVars[i].disabled;\n    updateVars(newVars);\n  };\n\n  const Buttons = () => __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, variables.map(({\n    dataKey,\n    color,\n    disabled\n  }, i) => __jsx(Button, {\n    key: i,\n    mr: \"4px\",\n    bg: \"mainBg\",\n    color: disabled ? 'greyDark' : color,\n    onClick: () => handleClick(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, dataKey)));\n\n  return __jsx(LineChart, {\n    headerContent: __jsx(Buttons, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 22\n      }\n    }),\n    data: chartData,\n    xdataKey: \"Date Sold\",\n    lines: variables,\n    hideDot: true,\n    tickFormatter: formatXAxis,\n    labelFormatter: formatLabel,\n    formatTooltip: (t, l) => formatTooltip(t, l, data),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  });\n});\nexport default VariableLineChart;\n\nconst formatXAxis = tickItem => {\n  return moment(tickItem, 'MM/DD/YYYY').format('M/D');\n};\n\nconst formatLabel = tickItem => {\n  return moment(tickItem, 'MM/DD/YYYY').format('MMM Do YYYY');\n};\n\nconst formatTooltip = (value, name, props) => {\n  if (name !== 'Items Sold') {\n    const num = value.toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n    return `$${num}`;\n  }\n\n  return value;\n};","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/VariableLineGraph/index.js"],"names":["memo","useMemo","useState","moment","LineChart","groupByDate","Flex","Button","VariableLineChart","data","variables","updateVars","dataKey","size","color","disabled","chartData","handleClick","i","newVars","Buttons","map","formatXAxis","formatLabel","t","l","formatTooltip","tickItem","format","value","name","props","num","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits"],"mappings":"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","sourcesContent":["import { memo, useMemo, useState } from 'react'\nimport moment from 'moment'\n\nimport LineChart from '../../../styles/reporting/LineChart'\n\nimport { groupByDate } from '../util/grouping'\nimport Flex from '../../../styles/layout/Flex'\nimport Button from '../../../styles/elements/Button'\n\nconst VariableLineChart = memo(({ data }) => {\n  const [variables, updateVars] = useState([\n    { dataKey: 'Items Sold', size: 70, color: 'teal', disabled: false },\n    { dataKey: 'Gross', size: 70, color: 'pastelPurple', disabled: true },\n    { dataKey: 'Net', size: 70, color: 'pastelGreen', disabled: true }\n  ])\n  const chartData = useMemo(() => groupByDate(data, true), [data])\n  const handleClick = i => {\n    const newVars = [...variables]\n    newVars[i].disabled = !newVars[i].disabled\n    updateVars(newVars)\n  }\n  const Buttons = () => (\n    <Flex>\n      {\n        variables.map(({ dataKey, color, disabled }, i) => (\n          <Button\n            key={i}\n            mr='4px'\n            bg='mainBg'\n            color={disabled ? 'greyDark' : color}\n            onClick={() => handleClick(i)}\n          >\n            {dataKey}\n          </Button>\n        ))\n      }\n\n    </Flex>\n  )\n  return (\n    <LineChart\n      headerContent={<Buttons />}\n      data={chartData}\n      xdataKey='Date Sold'\n      lines={variables}\n      hideDot\n      tickFormatter={formatXAxis}\n      labelFormatter={formatLabel}\n      formatTooltip={(t, l) => formatTooltip(t, l, data)}\n    />\n  )\n})\n\nexport default (VariableLineChart)\n\nconst formatXAxis = (tickItem) => { return moment(tickItem, 'MM/DD/YYYY').format('M/D') }\nconst formatLabel = (tickItem) => { return moment(tickItem, 'MM/DD/YYYY').format('MMM Do YYYY') }\n\nconst formatTooltip = (value, name, props) => {\n  if (name !== 'Items Sold') {\n    const num = value.toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    })\n    return `$${num}`\n  }\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}