{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const UPDATE_FILES = 'UPDATE_FILES';\nexport const UPDATE_GEOCODES = 'UPDATE_GEOCODES';\nexport const UPDATE_DATA = 'UPDATE_DATA';\nexport const SET_LOCATION_KEYS = 'SET_LOCATION_KEYS';\nexport const SET_GEO_DATA = 'SET_GEO_DATA';\nexport const UPDATE_RANGED_DATA = 'UPDATE_RANGED_DATA';\nexport const UPDATE_COMPARE_DATA = 'UPDATE_COMPARE_DATA';\nexport const TOGGLE_LOADING = 'TOGGLE_LOADING';\nconst initialState = {\n  user: {},\n  files: [],\n  allData: {},\n  rangedData: {},\n  compareData: {},\n  geocodes: {},\n  googleMapsKey: null,\n  loading: true\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_LOADING:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: typeof action.payload === 'boolean' ? action.payload : !state.loading\n        });\n      }\n\n    case UPDATE_USER:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          user: action.payload\n        });\n      }\n\n    case UPDATE_RANGED_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          rangedData: action.payload\n        });\n      }\n\n    case UPDATE_COMPARE_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          compareData: action.payload\n        });\n      }\n\n    case UPDATE_GEOCODES:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          geocodes: action.payload\n        });\n      }\n\n    case UPDATE_FILES:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          files: action.payload\n        });\n      }\n\n    case UPDATE_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          allData: action.payload || {},\n          rangedData: action.payload || {}\n        });\n      }\n\n    case SET_GEO_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          geocodes: action.payload\n        });\n      }\n\n    case SET_LOCATION_KEYS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          googleMapsKey: action.payload.googleKey\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-firebase/packages/mepop-next/src/store/generalReducer.js"],"names":["UPDATE_USER","UPDATE_FILES","UPDATE_GEOCODES","UPDATE_DATA","SET_LOCATION_KEYS","SET_GEO_DATA","UPDATE_RANGED_DATA","UPDATE_COMPARE_DATA","TOGGLE_LOADING","initialState","user","files","allData","rangedData","compareData","geocodes","googleMapsKey","loading","state","action","type","payload","googleKey"],"mappings":";;;;;;AAAA,OAAO,MAAMA,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,OAAO,EAAE,EAHU;AAInBC,EAAAA,UAAU,EAAE,EAJO;AAKnBC,EAAAA,WAAW,EAAE,EALM;AAMnBC,EAAAA,QAAQ,EAAE,EANS;AAOnBC,EAAAA,aAAa,EAAE,IAPI;AAQnBC,EAAAA,OAAO,EAAE;AARU,CAArB;AAWA,gBAAe,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,cAAL;AAAqB;AACnB,+CAAYU,KAAZ;AAAmBD,UAAAA,OAAO,EAAE,OAAOE,MAAM,CAACE,OAAd,KAA0B,SAA1B,GAAsCF,MAAM,CAACE,OAA7C,GAAuD,CAACH,KAAK,CAACD;AAA1F;AACD;;AACD,SAAKjB,WAAL;AAAkB;AAChB,+CAAYkB,KAAZ;AAAmBR,UAAAA,IAAI,EAAES,MAAM,CAACE;AAAhC;AACD;;AACD,SAAKf,kBAAL;AAAyB;AACvB,+CAAYY,KAAZ;AAAmBL,UAAAA,UAAU,EAAEM,MAAM,CAACE;AAAtC;AACD;;AACD,SAAKd,mBAAL;AAA0B;AACxB,+CAAYW,KAAZ;AAAmBJ,UAAAA,WAAW,EAAEK,MAAM,CAACE;AAAvC;AACD;;AACD,SAAKnB,eAAL;AAAsB;AACpB,+CAAYgB,KAAZ;AAAmBH,UAAAA,QAAQ,EAAEI,MAAM,CAACE;AAApC;AACD;;AACD,SAAKpB,YAAL;AAAmB;AACjB,+CAAYiB,KAAZ;AAAmBP,UAAAA,KAAK,EAAEQ,MAAM,CAACE;AAAjC;AACD;;AACD,SAAKlB,WAAL;AAAkB;AAChB,+CAAYe,KAAZ;AAAmBN,UAAAA,OAAO,EAAEO,MAAM,CAACE,OAAP,IAAkB,EAA9C;AAAkDR,UAAAA,UAAU,EAAEM,MAAM,CAACE,OAAP,IAAkB;AAAhF;AACD;;AACD,SAAKhB,YAAL;AAAmB;AACjB,+CAAYa,KAAZ;AAAmBH,UAAAA,QAAQ,EAAEI,MAAM,CAACE;AAApC;AACD;;AACD,SAAKjB,iBAAL;AAAwB;AACtB,+CACKc,KADL;AAEEF,UAAAA,aAAa,EAAEG,MAAM,CAACE,OAAP,CAAeC;AAFhC;AAID;;AACD;AAAS;AACP,iCAAYJ,KAAZ;AACD;AAjCH;AAmCD,CApCD","sourcesContent":["export const UPDATE_USER = 'UPDATE_USER'\nexport const UPDATE_FILES = 'UPDATE_FILES'\nexport const UPDATE_GEOCODES = 'UPDATE_GEOCODES'\nexport const UPDATE_DATA = 'UPDATE_DATA'\nexport const SET_LOCATION_KEYS = 'SET_LOCATION_KEYS'\nexport const SET_GEO_DATA = 'SET_GEO_DATA'\nexport const UPDATE_RANGED_DATA = 'UPDATE_RANGED_DATA'\nexport const UPDATE_COMPARE_DATA = 'UPDATE_COMPARE_DATA'\nexport const TOGGLE_LOADING = 'TOGGLE_LOADING'\n\nconst initialState = {\n  user: {},\n  files: [],\n  allData: {},\n  rangedData: {},\n  compareData: {},\n  geocodes: {},\n  googleMapsKey: null,\n  loading: true\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_LOADING: {\n      return { ...state, loading: typeof action.payload === 'boolean' ? action.payload : !state.loading }\n    }\n    case UPDATE_USER: {\n      return { ...state, user: action.payload }\n    }\n    case UPDATE_RANGED_DATA: {\n      return { ...state, rangedData: action.payload }\n    }\n    case UPDATE_COMPARE_DATA: {\n      return { ...state, compareData: action.payload }\n    }\n    case UPDATE_GEOCODES: {\n      return { ...state, geocodes: action.payload }\n    }\n    case UPDATE_FILES: {\n      return { ...state, files: action.payload }\n    }\n    case UPDATE_DATA: {\n      return { ...state, allData: action.payload || {}, rangedData: action.payload || {} }\n    }\n    case SET_GEO_DATA: {\n      return { ...state, geocodes: action.payload }\n    }\n    case SET_LOCATION_KEYS: {\n      return {\n        ...state,\n        googleMapsKey: action.payload.googleKey\n      }\n    }\n    default: {\n      return { ...state }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}