{"ast":null,"code":"var _jsxFileName = \"/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/SalesMap/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, memo } from 'react';\nimport _ from 'lodash';\nimport { useSelector } from 'react-redux';\nimport GoogleMapReact from 'google-map-react';\nimport styled from 'styled-components';\nimport Card from '../../../styles/elements/Card';\nimport Tooltip from '../../../styles/elements/Tooltip';\nimport SalesTable from '../../general/SalesTable';\nimport SaleDetails from '../../general/SaleDetails';\nimport Flex from '../../../styles/layout/Flex';\nimport { getGeopoints } from '../util/geopoints';\nconst SalesMap = memo(({\n  data,\n  styles,\n  isBasic\n}) => {\n  const {\n    0: salesToMap,\n    1: setSalesToMap\n  } = useState([]);\n  const {\n    0: salesToShow,\n    1: setSalesToShow\n  } = useState({});\n  const {\n    0: activeSale,\n    1: activateSale\n  } = useState(null);\n  const {\n    googleMapsKey\n  } = useSelector(state => state.generalReducer);\n  const {\n    0: geocodes,\n    1: setGeocodes\n  } = useState([]);\n  useEffect(() => {\n    getGeopoints(data, res => {\n      setGeocodes(res);\n    });\n  }, [data]);\n  useEffect(() => {\n    return setSalesToMap(_.values(geocodes));\n  }, [geocodes]);\n  if (!googleMapsKey) return null;\n  return __jsx(Card, {\n    headerContent: \"Map of Sales (US only)\",\n    proOnly: isBasic ? {\n      component: 'Map of Sales (US only)',\n      img: 'sales-map.png'\n    } : null,\n    height: \"350px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: [1, 1, 1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(MapContainer, {\n    mini: salesToShow.sales,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, __jsx(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: googleMapsKey.key\n    },\n    defaultCenter: {\n      lat: 39,\n      lng: -98\n    },\n    defaultZoom: 0,\n    yesIWantToUseGoogleMapApiInternals: true,\n    gestureHandling: \"cooperative\",\n    options: {\n      gestureHandling: 'cooperative'\n    },\n    minWidth: \"500px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, salesToMap.length ? salesToMap.map((zip, i) => {\n    const {\n      geopoint: {\n        lat,\n        lng\n      }\n    } = zip;\n    if (getTitle(zip).includes('undefined')) return null; // this weeds out other countries\n\n    return __jsx(Marker, {\n      setSalesToShow: setSalesToShow,\n      activateSale: activateSale,\n      zip: zip,\n      key: i,\n      lat: lat,\n      lng: lng,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }\n    });\n  }) : null)), salesToShow.sales && !activeSale ? __jsx(SalesTable, {\n    boxShadow: \"none\",\n    m: \"0\",\n    minWidth: \"50%\",\n    data: salesToShow,\n    currencyType: data.currency_type,\n    headerContent: getTitle(salesToShow),\n    handleRowClick: (row, i) => {\n      activateSale(row.rowData);\n    },\n    onClose: () => setSalesToShow({}),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }) : activeSale ? __jsx(SaleDetails, {\n    chartHeight: 200,\n    currencyType: data.currency_type,\n    boxShadow: \"none\",\n    m: \"0\",\n    minWidth: \"50%\",\n    onClose: () => activateSale(null),\n    row: activeSale,\n    getUrl: data.getUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }) : null));\n});\nexport default SalesMap;\nconst Marker = memo(({\n  zip,\n  setSalesToShow,\n  activateSale\n}) => {\n  return __jsx(Tooltip, {\n    offset: 40,\n    title: getTitle(zip),\n    hideOnClick: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, __jsx(I, {\n    className: \"fa fa-map-marker\",\n    onClick: () => {\n      activateSale(null);\n      setSalesToShow(zip);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }));\n}); // utils\n\nfunction getTitle({\n  location,\n  sales\n}) {\n  const title = `${location.city}, ${location.state} ${location.zip} - ${sales.length}`;\n  return title;\n}\n\nconst MapContainer = styled.div.withConfig({\n  displayName: \"SalesMap__MapContainer\",\n  componentId: \"g1nti4-0\"\n})([\"visibility:visible;height:320px;width:100%;background:'black';transition:.2s;display:flex;\"]);\nconst I = styled.i.withConfig({\n  displayName: \"SalesMap__I\",\n  componentId: \"g1nti4-1\"\n})([\"font-size:25px;cursor:pointer;color:\", \";&:hover{color:\", \"}\"], ({\n  theme\n}) => theme.colors.pastelRose, ({\n  theme\n}) => theme.colors.red);","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/SalesMap/index.js"],"names":["useState","useEffect","memo","_","useSelector","GoogleMapReact","styled","Card","Tooltip","SalesTable","SaleDetails","Flex","getGeopoints","SalesMap","data","styles","isBasic","salesToMap","setSalesToMap","salesToShow","setSalesToShow","activeSale","activateSale","googleMapsKey","state","generalReducer","geocodes","setGeocodes","res","values","component","img","sales","key","lat","lng","gestureHandling","length","map","zip","i","geopoint","getTitle","includes","currency_type","row","rowData","getUrl","Marker","location","title","city","MapContainer","div","I","theme","colors","pastelRose","red"],"mappings":"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","sourcesContent":["import { useState, useEffect, memo } from 'react'\nimport _ from 'lodash'\nimport { useSelector } from 'react-redux'\nimport GoogleMapReact from 'google-map-react'\nimport styled from 'styled-components'\n\nimport Card from '../../../styles/elements/Card'\nimport Tooltip from '../../../styles/elements/Tooltip'\nimport SalesTable from '../../general/SalesTable'\nimport SaleDetails from '../../general/SaleDetails'\nimport Flex from '../../../styles/layout/Flex'\nimport { getGeopoints } from '../util/geopoints'\n\nconst SalesMap = memo(({ data, styles, isBasic }) => {\n  const [salesToMap, setSalesToMap] = useState([])\n  const [salesToShow, setSalesToShow] = useState({})\n  const [activeSale, activateSale] = useState(null)\n  const { googleMapsKey } = useSelector(state => state.generalReducer)\n  const [geocodes, setGeocodes] = useState([])\n\n  useEffect(() => {\n    getGeopoints(data, (res) => {\n      setGeocodes(res)\n    })\n  }, [data])\n\n  useEffect(() => {\n    return setSalesToMap(_.values(geocodes))\n  }, [geocodes])\n\n  if (!googleMapsKey) return null\n\n  return (\n    <Card\n      headerContent='Map of Sales (US only)'\n      proOnly={isBasic ? {\n        component: 'Map of Sales (US only)',\n        img: 'sales-map.png'\n      } : null}\n      height='350px'\n    >\n      <Flex width={[1, 1, 1, 1]}>\n        <MapContainer mini={salesToShow.sales}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: googleMapsKey.key }}\n            defaultCenter={{ lat: 39, lng: -98 }}\n            defaultZoom={0}\n            yesIWantToUseGoogleMapApiInternals\n            gestureHandling='cooperative'\n            options={{ gestureHandling: 'cooperative' }}\n            minWidth='500px'\n          >\n            {salesToMap.length\n              ? salesToMap.map((zip, i) => {\n                const { geopoint: { lat, lng } } = zip\n                if (getTitle(zip).includes('undefined')) return null // this weeds out other countries\n                return (\n                  <Marker\n                    setSalesToShow={setSalesToShow}\n                    activateSale={activateSale}\n                    zip={zip}\n                    key={i}\n                    lat={lat}\n                    lng={lng}\n                  />\n                )\n              })\n              : null}\n\n          </GoogleMapReact>\n        </MapContainer>\n        {salesToShow.sales && !activeSale\n          ? (\n            <SalesTable\n              boxShadow='none'\n              m='0'\n              minWidth='50%'\n              data={salesToShow}\n              currencyType={data.currency_type}\n              headerContent={getTitle(salesToShow)}\n              handleRowClick={(row, i) => {\n                activateSale(row.rowData)\n              }}\n              onClose={() => setSalesToShow({})}\n            />\n          ) : activeSale ? (\n            <SaleDetails\n              chartHeight={200}\n              currencyType={data.currency_type}\n              boxShadow='none'\n              m='0'\n              minWidth='50%'\n              onClose={() => activateSale(null)}\n              row={activeSale}\n              getUrl={data.getUrl}\n            />\n          )\n            : null}\n      </Flex>\n    </Card>\n  )\n})\n\nexport default SalesMap\n\nconst Marker = memo(({ zip, setSalesToShow, activateSale }) => {\n  return (\n    <Tooltip\n      offset={40}\n      title={getTitle(zip)}\n      hideOnClick={false}\n    >\n      <I\n        className='fa fa-map-marker' onClick={() => {\n          activateSale(null)\n          setSalesToShow(zip)\n        }}\n      />\n    </Tooltip>)\n})\n\n// utils\nfunction getTitle ({ location, sales }) {\n  const title = `${location.city}, ${location.state} ${location.zip} - ${sales.length}`\n  return title\n}\n\nconst MapContainer = styled.div`\n  visibility: visible;\n  height: 320px;\n  width: 100%;\n  background: 'black';\n  transition: .2s;\n  display: flex;\n`\nconst I = styled.i`\n  font-size: 25px;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.pastelRose};\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.red}\n\n  }\n`\n"]},"metadata":{},"sourceType":"module"}