{"ast":null,"code":"var _jsxFileName = \"/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/SalesByPaymentType/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, memo } from 'react';\nimport styled from 'styled-components';\nimport { groupByPaymentType } from '../util/grouping';\nimport Flex from '../../../styles/layout/Flex';\nimport Text from '../../../styles/elements/Text';\nimport PieChart from '../../../styles/reporting/PieChart';\nimport Card from '../../../styles/elements/Card';\nimport { formatNum } from '../util/general';\nconst SalesByPaymentType = memo(({\n  data,\n  isBasic\n}) => {\n  const {\n    0: chartType,\n    1: toggleChartType\n  } = useState(false);\n  const chartData = groupByPaymentType(data);\n  return __jsx(Card, {\n    minHeight: \"420px\",\n    flexDirection: \"row-reverse\",\n    flexWrap: \"wrap\",\n    sx: {\n      '@media only screen and (max-width: 1200px)': {\n        flexDirection: 'column'\n      }\n    },\n    proOnly: isBasic ? {\n      component: 'Profits By Payment Type',\n      img: 'payment-type.png'\n    } : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    height: \"40%\",\n    flexDirection: \"column\",\n    mr: 5,\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    sx: {\n      '@media only screen and (max-width: 1200px)': {\n        paddingTop: '40px',\n        margin: 0\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, __jsx(Title, {\n    color: \"primary\",\n    fontSize: 25,\n    mb: \"10px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"Total: \", formatNum(data.currency_type, data.total_earnings)), chartData.map(({\n    name,\n    gross,\n    color\n  }, i) => {\n    return __jsx(Text, {\n      key: i,\n      color: color,\n      fontSize: 17,\n      fontWeight: 600,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }, name, \" - \", formatNum(data.currency_type, gross));\n  })), __jsx(PieChart, {\n    m: 0,\n    justifyContent: \"center\",\n    sx: {\n      '@media only screen and (max-width: 1200px)': {\n        marginBottom: '20px'\n      }\n    },\n    boxShadow: \"none\",\n    data: chartData,\n    dataKey: chartType ? 'sold' : 'gross',\n    currencyType: data.currency_type,\n    switchLabel: \"Show # of Items\",\n    switchCheck: chartType,\n    switchEvent: () => {\n      toggleChartType(!chartType);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n});\nexport default SalesByPaymentType;\nconst Title = styled(Text).withConfig({\n  displayName: \"SalesByPaymentType__Title\",\n  componentId: \"lpl81z-0\"\n})([\"border-bottom:1px solid \", \";width:200px;padding-bottom:3px;text-align:center;\"], ({\n  theme\n}) => theme.colors.mainBg);","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/SalesByPaymentType/index.js"],"names":["useState","memo","styled","groupByPaymentType","Flex","Text","PieChart","Card","formatNum","SalesByPaymentType","data","isBasic","chartType","toggleChartType","chartData","flexDirection","component","img","paddingTop","margin","currency_type","total_earnings","map","name","gross","color","i","marginBottom","Title","theme","colors","mainBg"],"mappings":"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","sourcesContent":["import { useState, memo } from 'react'\nimport styled from 'styled-components'\n\nimport { groupByPaymentType } from '../util/grouping'\nimport Flex from '../../../styles/layout/Flex'\nimport Text from '../../../styles/elements/Text'\nimport PieChart from '../../../styles/reporting/PieChart'\nimport Card from '../../../styles/elements/Card'\nimport { formatNum } from '../util/general'\n\nconst SalesByPaymentType = memo(({ data, isBasic }) => {\n  const [chartType, toggleChartType] = useState(false)\n  const chartData = groupByPaymentType(data)\n  return (\n    <Card\n      minHeight='420px'\n      flexDirection='row-reverse'\n      flexWrap='wrap'\n      sx={{\n        '@media only screen and (max-width: 1200px)': {\n          flexDirection: 'column'\n        }\n      }}\n      proOnly={isBasic ? {\n        component: 'Profits By Payment Type',\n        img: 'payment-type.png'\n      } : null}\n    >\n      <Flex\n        height='40%'\n        flexDirection='column'\n        mr={5}\n        justifyContent='flex-start'\n        alignItems='center'\n        sx={{\n          '@media only screen and (max-width: 1200px)': {\n            paddingTop: '40px',\n            margin: 0\n          }\n        }}\n      >\n        <Title color='primary' fontSize={25} mb='10px'>\n          Total: {formatNum(data.currency_type, data.total_earnings)}\n        </Title>\n        {\n          chartData.map(({ name, gross, color }, i) => {\n            return (\n              <Text key={i} color={color} fontSize={17} fontWeight={600}>\n                {name} - {formatNum(data.currency_type, gross)}\n              </Text>\n            )\n          })\n        }\n      </Flex>\n      <PieChart\n        m={0}\n        justifyContent='center'\n        sx={{\n          '@media only screen and (max-width: 1200px)': {\n            marginBottom: '20px'\n          }\n        }}\n        boxShadow='none'\n        data={chartData}\n        dataKey={chartType ? 'sold' : 'gross'}\n        currencyType={data.currency_type}\n        switchLabel='Show # of Items'\n        switchCheck={chartType}\n        switchEvent={() => {\n          toggleChartType(!chartType)\n        }}\n      />\n\n    </Card>\n\n  )\n})\n\nexport default (SalesByPaymentType)\n\nconst Title = styled(Text)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.mainBg};\n  width: 200px;\n  padding-bottom:3px;\n  text-align: center;\n`\n"]},"metadata":{},"sourceType":"module"}