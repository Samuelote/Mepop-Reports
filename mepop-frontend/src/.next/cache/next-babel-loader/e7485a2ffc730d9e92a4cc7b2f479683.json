{"ast":null,"code":"import { readString } from 'react-papaparse';\nimport axios from 'axios';\nimport { headers } from '../../assets/exampleBuyers';\nimport firebase from 'firebase';\nexport var getFileMethod = function getFileMethod(auth, storage, resolve) {\n  var UID = auth.currentUser.uid;\n  var storageRef = storage.ref(\"\".concat(UID));\n  storageRef.listAll().then(function (_ref) {\n    var items = _ref.items;\n    var getDownloadPromises = [];\n    items.forEach(function (fileRef, i) {\n      // pushes promises to resolve synchronously\n      getDownloadPromises.push(fileRef.getDownloadURL());\n    });\n    var calls = []; // resolves getting the download URL's then pushes axios call to calls array\n\n    Promise.all(getDownloadPromises).then(function (responses) {\n      responses.forEach(function (url) {\n        calls.push(axios.get(url));\n      }); // resolves all calls in calls array and then sets up new state array for component\n\n      axios.all(calls).then(axios.spread(function () {\n        var newData = [];\n\n        for (var _len = arguments.length, responses = new Array(_len), _key = 0; _key < _len; _key++) {\n          responses[_key] = arguments[_key];\n        }\n\n        responses.forEach(function (res, j) {\n          newData.push({\n            content: res.data,\n            filename: items[j].name\n          });\n        });\n        resolve(newData);\n      }))[\"catch\"](function (err) {\n        resolve([]);\n        console.log(err);\n        window.alert('Error occurred while retreiving files. Try again');\n      });\n    })[\"catch\"](function () {\n      resolve();\n      console.error('Error Occurred');\n      window.alert('Error Occurred');\n    });\n  })[\"catch\"](function () {\n    resolve();\n    console.error('Error Occurred');\n    window.alert('Error Occurred');\n  });\n};\nexport var deleteFileMethod = function deleteFileMethod(auth, storage, filename, fetchFiles) {\n  var UID = auth.currentUser.uid;\n  var storageRef = storage.ref(\"\".concat(UID, \"/\").concat(filename));\n  storageRef[\"delete\"]().then(function () {\n    fetchFiles();\n  })[\"catch\"](function (err) {\n    console.log(err);\n    window.alert(err.message);\n  });\n};\nexport var uploadFilesMethod = function uploadFilesMethod(auth, storage, files, fetchFiles, err) {\n  var rejectedFiles = []; // upload accepted files to firebase\n\n  var UID = auth.currentUser.uid;\n  var counter = 0;\n  files.forEach(function (file, i) {\n    var fileReader = new FileReader();\n    fileReader.readAsText(file);\n\n    fileReader.onloadend = function () {\n      // converts CSV's data to string\n      if (readString(fileReader.result).errors.length) {\n        rejectedFiles.push(file.name);\n        counter++;\n      } else {\n        var rows = readString(fileReader.result).data;\n        counter++;\n\n        if (rows[0].length !== 22) {\n          // checks row length for length of 22\n          rejectedFiles.push(file.name);\n        } else if (JSON.stringify(rows[0]) !== JSON.stringify(headers)) {\n          // Compares Depop headers to first row of file\n          rejectedFiles.push(file.name);\n        } else {\n          // File passed all tests so it's upload time now...\n          var storageRef = storage.ref(\"\".concat(UID, \"/\").concat(file.name));\n          var uploadTask = storageRef.put(file);\n          uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, function (snapshot) {\n            switch (snapshot.state) {\n              case firebase.storage.TaskState.PAUSED:\n                console.log('Upload is paused');\n                break;\n\n              case firebase.storage.TaskState.RUNNING:\n                // console.log('Upload is running')\n                break;\n            }\n          }, function (error) {\n            switch (error.code) {\n              case 'storage/unauthorized':\n                window.alert(\"You don't have permission to execute this action.\");\n                break;\n\n              case 'storage/canceled':\n                window.alert('Unknown Error. Operation canceled');\n                break;\n\n              case 'storage/unknown':\n                window.alert('Unknown Error');\n                break;\n            }\n          }, function () {\n            if (counter === files.length) {\n              fetchFiles();\n            }\n          });\n        }\n\n        if (i === files.length - 1) {\n          if (rejectedFiles.length) {\n            err(\"The following files were not processed because they are not Depop files: \".concat(rejectedFiles.join(', '), \". If this seems to be an error, please contact samote.wood@gmail.com for support.\"));\n          }\n        }\n      }\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"module"}