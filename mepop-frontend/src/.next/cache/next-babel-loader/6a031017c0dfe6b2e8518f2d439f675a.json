{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/SalesByCategory/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useMemo, useState, memo } from 'react';\nimport { formatNum } from '../util/general';\nimport { groupByCategory } from '../util/grouping';\nimport VertComposedChart from '../../../styles/reporting/VertBarChart';\nimport Flex from '../../../styles/layout/Flex';\nimport ValueBox from '../../../styles/reporting/ValueBox';\nvar SalesByCategory = memo(_c = _s(function (_ref) {\n  _s();\n\n  var data = _ref.data,\n      hideBoxes = _ref.hideBoxes,\n      halfSize = _ref.halfSize,\n      isBasic = _ref.isBasic;\n\n  var _useState = useState(false),\n      revenue = _useState[0],\n      showRevenue = _useState[1];\n\n  var chartData = useMemo(function () {\n    return groupByCategory(data, revenue);\n  }, [revenue, data]);\n  var max = {\n    gross: chartData[0],\n    sold: chartData[0]\n  };\n  var min = {\n    gross: chartData[0],\n    sold: chartData[0]\n  };\n  chartData.forEach(function (current, i) {\n    if (current['Gross Earnings'] > max.gross['Gross Earnings']) max.gross = current;\n    if (current['Items Sold'] > max.sold['Items Sold']) max.sold = current;\n    if (current['Gross Earnings'] < min.gross['Gross Earnings']) min.gross = current;\n    if (current['Items Sold'] < min.sold['Items Sold']) min.sold = current;\n  });\n  if (!chartData.length) return null;\n\n  if (halfSize) {\n    return __jsx(VertComposedChart, {\n      headerContent: \"Sales By Category\".concat(chartData.length < 15 ? '' : ' - ( Top 15 )'),\n      data: chartData,\n      xdataKey: revenue ? 'Gross Earnings' : 'Items Sold',\n      ydataKey: \"Category\",\n      height: 500,\n      formatTooltip: function formatTooltip(t, l) {\n        return _formatTooltip(t, l, data);\n      },\n      switchLabel: \"Show Earnings\",\n      switchCheck: revenue,\n      switchEvent: function switchEvent() {\n        showRevenue(!revenue);\n      },\n      proOnly: isBasic ? {\n        component: 'Sales by Category',\n        img: 'sales-by-category.png'\n      } : null,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return __jsx(Flex, {\n    flexWrap: \"wrap\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, __jsx(VertComposedChart, {\n    headerContent: \"Sales By Category\".concat(chartData.length < 15 ? '' : ' - ( Top 15 )'),\n    data: chartData,\n    xdataKey: revenue ? 'Gross Earnings' : 'Items Sold',\n    ydataKey: \"Category\",\n    height: 500,\n    formatTooltip: function formatTooltip(t, l) {\n      return _formatTooltip(t, l, data);\n    },\n    switchLabel: \"Show Earnings\",\n    switchCheck: revenue,\n    switchEvent: function switchEvent() {\n      showRevenue(!revenue);\n    },\n    proOnly: isBasic ? {\n      component: 'Sales by Category',\n      img: 'sales-by-category.png'\n    } : null,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), !hideBoxes ? __jsx(Flex, {\n    justifyContent: \"space-between\",\n    flexWrap: \"wrap\",\n    alignItems: \"stretch\",\n    maxWidth: \"50%\",\n    flexDirection: \"column\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, max ? __jsx(React.Fragment, null, __jsx(ValueBox, {\n    minWidth: \"50px\",\n    title: \"Highest Earning Category\",\n    string: true,\n    smallText: true,\n    value: \"\".concat(max.gross.Category, \" - \").concat(formatNum(data.currency_type, max.gross['Gross Earnings']), \" Gross Profit\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }), __jsx(ValueBox, {\n    minWidth: \"50px\",\n    title: \"Most Sold Category\",\n    string: true,\n    smallText: true,\n    value: \"\".concat(max.sold.Category, \" - \").concat(max.sold['Items Sold'], \" Items Sold\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }), __jsx(ValueBox, {\n    minWidth: \"50px\",\n    title: \"Lowest Earning Category\",\n    string: true,\n    smallText: true,\n    value: \"\".concat(min.gross.Category, \" -\").concat(formatNum(data.currency_type, min.gross['Gross Earnings']), \" Gross Profit\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }), __jsx(ValueBox, {\n    minWidth: \"50px\",\n    title: \"Least Sold Category\",\n    string: true,\n    smallText: true,\n    value: \"\".concat(min.sold.Category, \" - \").concat(min.sold['Items Sold'], \" Items Sold\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  })) : null) : null);\n}, \"ma7AYcLZhyzRt7Km23QejmFTUNE=\"));\n_c2 = SalesByCategory;\nexport default SalesByCategory;\n\nvar _formatTooltip = function _formatTooltip(tickItem, label, data) {\n  if (label === 'Gross Earnings') {\n    return \"\".concat(data.currency_type).concat(tickItem.toFixed(2));\n  }\n\n  return tickItem;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SalesByCategory$memo\");\n$RefreshReg$(_c2, \"SalesByCategory\");","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/SalesByCategory/index.js"],"names":["useMemo","useState","memo","formatNum","groupByCategory","VertComposedChart","Flex","ValueBox","SalesByCategory","data","hideBoxes","halfSize","isBasic","revenue","showRevenue","chartData","max","gross","sold","min","forEach","current","i","length","t","l","formatTooltip","component","img","Category","currency_type","tickItem","label","toFixed"],"mappings":"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","sourcesContent":["import { useMemo, useState, memo } from 'react'\n\nimport { formatNum } from '../util/general'\nimport { groupByCategory } from '../util/grouping'\nimport VertComposedChart from '../../../styles/reporting/VertBarChart'\nimport Flex from '../../../styles/layout/Flex'\nimport ValueBox from '../../../styles/reporting/ValueBox'\n\nconst SalesByCategory = memo(({ data, hideBoxes, halfSize, isBasic }) => {\n  const [revenue, showRevenue] = useState(false)\n  const chartData = useMemo(() => groupByCategory(data, revenue), [revenue, data])\n  const max = { gross: chartData[0], sold: chartData[0] }\n  const min = { gross: chartData[0], sold: chartData[0] }\n  chartData.forEach((current, i) => {\n    if (current['Gross Earnings'] > max.gross['Gross Earnings']) max.gross = current\n    if (current['Items Sold'] > max.sold['Items Sold']) max.sold = current\n    if (current['Gross Earnings'] < min.gross['Gross Earnings']) min.gross = current\n    if (current['Items Sold'] < min.sold['Items Sold']) min.sold = current\n  })\n  if (!chartData.length) return null\n  if (halfSize) {\n    return (\n      <VertComposedChart\n        headerContent={`Sales By Category${chartData.length < 15 ? '' : ' - ( Top 15 )'}`}\n        data={chartData}\n        xdataKey={revenue ? 'Gross Earnings' : 'Items Sold'}\n        ydataKey='Category'\n        height={500}\n        formatTooltip={(t, l) => formatTooltip(t, l, data)}\n        switchLabel='Show Earnings'\n        switchCheck={revenue}\n        switchEvent={() => {\n          showRevenue(!revenue)\n        }}\n        proOnly={isBasic ? {\n          component: 'Sales by Category',\n          img: 'sales-by-category.png'\n        } : null}\n      />\n    )\n  }\n  return (\n    <Flex flexWrap='wrap'>\n\n      <VertComposedChart\n        headerContent={`Sales By Category${chartData.length < 15 ? '' : ' - ( Top 15 )'}`}\n        data={chartData}\n        xdataKey={revenue ? 'Gross Earnings' : 'Items Sold'}\n        ydataKey='Category'\n        height={500}\n        formatTooltip={(t, l) => formatTooltip(t, l, data)}\n        switchLabel='Show Earnings'\n        switchCheck={revenue}\n        switchEvent={() => {\n          showRevenue(!revenue)\n        }}\n        proOnly={isBasic ? {\n          component: 'Sales by Category',\n          img: 'sales-by-category.png'\n        } : null}\n      />\n      {\n        !hideBoxes ? (\n          <Flex justifyContent='space-between' flexWrap='wrap' alignItems='stretch' maxWidth='50%' flexDirection='column'>\n            {\n              max\n                ? (\n                  <>\n                    <ValueBox\n                      minWidth='50px'\n                      title='Highest Earning Category'\n                      string\n                      smallText\n                      value={`${max.gross.Category} - ${formatNum(data.currency_type, max.gross['Gross Earnings'])} Gross Profit`}\n                    />\n                    <ValueBox\n                      minWidth='50px'\n                      title='Most Sold Category'\n                      string\n                      smallText\n                      value={`${max.sold.Category} - ${max.sold['Items Sold']} Items Sold`}\n                    />\n                    <ValueBox\n                      minWidth='50px'\n                      title='Lowest Earning Category'\n                      string\n                      smallText\n                      value={`${min.gross.Category} -${formatNum(data.currency_type, min.gross['Gross Earnings'])} Gross Profit`}\n                    />\n                    <ValueBox\n                      minWidth='50px'\n                      title='Least Sold Category'\n                      string\n                      smallText\n                      value={`${min.sold.Category} - ${min.sold['Items Sold']} Items Sold`}\n                    />\n                  </>\n                ) : null\n            }\n          </Flex>\n        ) : null\n      }\n\n    </Flex>\n  )\n})\n\nexport default (SalesByCategory)\n\nconst formatTooltip = (tickItem, label, data) => {\n  if (label === 'Gross Earnings') {\n    return `${data.currency_type}${tickItem.toFixed(2)}`\n  }\n  return tickItem\n}\n"]},"metadata":{},"sourceType":"module"}