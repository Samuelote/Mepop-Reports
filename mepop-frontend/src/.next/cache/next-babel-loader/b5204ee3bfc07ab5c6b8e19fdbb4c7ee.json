{"ast":null,"code":"var _jsxFileName = \"/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/RevenueOverview/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, memo } from 'react';\nimport { groupByWeek } from '../util/grouping';\nimport Card from '../../../styles/elements/Card';\nimport Text from '../../../styles/elements/Text';\nimport Flex from '../../../styles/layout/Flex';\nimport Areachart from '../../../styles/reporting/AreaChart';\nimport styled from 'styled-components';\nimport theme from '../../../theme';\nimport { formatNum } from '../util/general';\nconst RevenueOverview = memo(({\n  data,\n  isBasic\n}) => {\n  const chartData = groupByWeek(data);\n  const {\n    0: week,\n    1: setWeek\n  } = useState(chartData[chartData.length - 1].week);\n  const {\n    0: revenue,\n    1: setRevenue\n  } = useState({\n    gross: chartData[chartData.length - 1].Gross,\n    net: chartData[chartData.length - 1].Net\n  });\n\n  const onHover = (val1, val2) => {\n    if (val2 === 'Gross') {\n      if (revenue.gross !== val1) {\n        setRevenue(_objectSpread(_objectSpread({}, revenue), {}, {\n          gross: val1\n        }));\n      }\n    } else if (val2 === 'Net') {\n      if (revenue.net !== val1) {\n        setRevenue(_objectSpread(_objectSpread({}, revenue), {}, {\n          net: val1\n        }));\n      }\n    } else {\n      setWeek(val1);\n    }\n  };\n\n  return __jsx(Card, {\n    sx: {\n      overflow: 'hidden',\n      boxShadow: theme.shadows.normal\n    },\n    minHeight: \"420px\",\n    proOnly: isBasic ? {\n      component: 'Revenue Overview',\n      img: 'revenue-overview.png'\n    } : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    flexDirection: \"column\",\n    width: [1],\n    p: 50,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, __jsx(Title, {\n    color: \"primary\",\n    fontSize: 25,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, week), __jsx(Text, {\n    pt: \"10px\",\n    color: \"pastelGreen\",\n    fontSize: 20,\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Gross: \", formatNum(data.currency_type, revenue.gross)), __jsx(Text, {\n    color: \"pastelPurple\",\n    fontSize: 20,\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Net: \", formatNum(data.currency_type, revenue.net))), __jsx(Areachart, {\n    boxShadow: \"none\",\n    data: chartData,\n    xdataKey: \"Date Sold\",\n    onHover: onHover,\n    areas: [{\n      key: 'Gross',\n      color: 'pastelGreen'\n    }, {\n      key: 'Net',\n      color: 'pastelPurple'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }));\n});\nexport default RevenueOverview;\nconst Title = styled(Text).withConfig({\n  displayName: \"RevenueOverview__Title\",\n  componentId: \"iz2hnt-0\"\n})([\"border-bottom:1px solid \", \";width:200px;padding-bottom:3px;\"], ({\n  theme\n}) => theme.colors.mainBg);","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/RevenueOverview/index.js"],"names":["useState","memo","groupByWeek","Card","Text","Flex","Areachart","styled","theme","formatNum","RevenueOverview","data","isBasic","chartData","week","setWeek","length","revenue","setRevenue","gross","Gross","net","Net","onHover","val1","val2","overflow","boxShadow","shadows","normal","component","img","currency_type","key","color","Title","colors","mainBg"],"mappings":"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","sourcesContent":["import { useState, memo } from 'react'\n\nimport { groupByWeek } from '../util/grouping'\n\nimport Card from '../../../styles/elements/Card'\nimport Text from '../../../styles/elements/Text'\nimport Flex from '../../../styles/layout/Flex'\nimport Areachart from '../../../styles/reporting/AreaChart'\nimport styled from 'styled-components'\nimport theme from '../../../theme'\nimport { formatNum } from '../util/general'\n\nconst RevenueOverview = memo(({ data, isBasic }) => {\n  const chartData = groupByWeek(data)\n  const [week, setWeek] = useState(chartData[chartData.length - 1].week)\n  const [revenue, setRevenue] = useState({ gross: chartData[chartData.length - 1].Gross, net: chartData[chartData.length - 1].Net })\n\n  const onHover = (val1, val2) => {\n    if (val2 === 'Gross') {\n      if (revenue.gross !== val1) {\n        setRevenue({ ...revenue, gross: val1 })\n      }\n    } else if (val2 === 'Net') {\n      if (revenue.net !== val1) {\n        setRevenue({ ...revenue, net: val1 })\n      }\n    } else {\n      setWeek(val1)\n    }\n  }\n  return (\n    <Card\n      sx={{ overflow: 'hidden', boxShadow: theme.shadows.normal }}\n      minHeight='420px'\n\n      proOnly={isBasic ? {\n        component: 'Revenue Overview',\n        img: 'revenue-overview.png'\n      } : null}\n    >\n      <Flex flexDirection='column' width={[1]} p={50}>\n\n        <Title color='primary' fontSize={25}>{week}</Title>\n        <Text pt='10px' color='pastelGreen' fontSize={20} fontWeight={600}>\n          Gross: {formatNum(data.currency_type, revenue.gross)}\n        </Text>\n        <Text color='pastelPurple' fontSize={20} fontWeight={600}>\n          Net: {formatNum(data.currency_type, revenue.net)}\n        </Text>\n      </Flex>\n      <Areachart\n        boxShadow='none'\n        data={chartData}\n        xdataKey='Date Sold'\n        onHover={onHover}\n        areas={[\n          { key: 'Gross', color: 'pastelGreen' },\n          { key: 'Net', color: 'pastelPurple' }\n        ]}\n      />\n    </Card>\n\n  )\n})\n\nexport default RevenueOverview\n\nconst Title = styled(Text)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.mainBg};\n  width: 200px;\n  padding-bottom:3px;\n`\n"]},"metadata":{},"sourceType":"module"}