{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Input as RebassInput } from '@rebass/forms';\nimport Label from '../Form/Label';\nimport Flex from '../../layout/Flex';\n\nconst Input = (_ref) => {\n  let {\n    htmlfor,\n    label,\n    alwaysShowLabel,\n    boxProps,\n    hideEye\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"htmlfor\", \"label\", \"alwaysShowLabel\", \"boxProps\", \"hideEye\"]);\n\n  const {\n    0: showPassword,\n    1: togglePassword\n  } = useState(false);\n  const {\n    0: labelIsShown,\n    1: showLabel\n  } = useState(!!rest.value || !!rest.defaultValue || alwaysShowLabel);\n\n  const handleFocus = e => {\n    if (!alwaysShowLabel) {\n      if (e.target.value && !labelIsShown) showLabel(true);else if (!e.target.value && labelIsShown) showLabel(false);\n    }\n\n    if (rest.onChange) rest.onChange(e);\n  };\n\n  const hoverIcon = type => {\n    togglePassword(type === 'enter');\n  };\n\n  return __jsx(Flex, {\n    flexDirection: \"column\",\n    width: [1],\n    m: \"2px\"\n  }, label ? __jsx(Label, {\n    htmlfor: htmlfor,\n    label: label,\n    fontWeight: 500,\n    color: !labelIsShown ? 'transparent' : null\n  }) : null, __jsx(Flex, {\n    alignItems: \"center\"\n  }, __jsx(StyleInput, _extends({\n    pl: rest.bg ? '5px' : !rest.disabled ? '0px' : null\n  }, rest, {\n    type: showPassword ? 'text' : rest.type,\n    onChange: handleFocus\n  })), rest.type === 'password' && !hideEye ? __jsx(Flex, {\n    ml: \"3px\" // color='greyDisabled'\n    ,\n    height: \"100%\",\n    py: \"8px\",\n    px: \"5px\",\n    onMouseOver: () => hoverIcon('enter'),\n    onMouseLeave: () => hoverIcon('leave')\n  }, __jsx(\"i\", {\n    className: \"fa fa-eye\"\n  })) : null));\n};\n\nexport default Input;\nconst StyleInput = styled(RebassInput).withConfig({\n  displayName: \"Input__StyleInput\",\n  componentId: \"ura2uu-0\"\n})([\"background:\", \" !important;transition:\", \";height:35px;padding-left:15px;color:\", \" !important;font-size:15px;font-weight:500;border-radius:\", \";border:1px solid \", \" !important;border-bottom:1px solid \", \" !important;outline:none;&::placeholder{font-weight:\", \";}\"], ({\n  theme,\n  disabled,\n  bg\n}) => disabled ? theme.colors.greyDisabled : theme.colors[bg || 'white'], ({\n  theme\n}) => theme.transitionDurations[1], ({\n  theme,\n  disabled\n}) => disabled ? null : theme.colors.primary, ({\n  theme,\n  disabled,\n  borderRadius\n}) => disabled || borderRadius ? theme.borderRadius.normal : 0, ({\n  borderColor,\n  theme\n}) => borderColor ? theme.colors[borderColor] : 'transparent', ({\n  theme,\n  disabled,\n  bg,\n  borderColor\n}) => disabled ? theme.colors[bg || 'white'] : theme.colors[borderColor || 'greyDisabled'], ({\n  theme\n}) => theme.fontWeights.regular);","map":null,"metadata":{},"sourceType":"module"}