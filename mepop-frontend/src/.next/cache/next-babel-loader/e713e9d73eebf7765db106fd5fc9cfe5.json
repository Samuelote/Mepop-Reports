{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport currency from 'currency.js';\nexport const getProfitsByMonth = data => {\n  const months = {};\n  const monthArray = [];\n  data.sales.forEach(({\n    date_of_sale,\n    item_price,\n    depop_fee,\n    depop_payments_fee,\n    usps_cost\n  }) => {\n    const month = moment(date_of_sale).format('MMM');\n    const date = moment(date_of_sale).format('MM/DD/yyyy');\n    const fees = cleanNumber(depop_fee) + cleanNumber(depop_payments_fee);\n    const sellerPaidShipping = cleanNumber(usps_cost);\n    const netProfit = currency(cleanNumber(item_price) - fees - sellerPaidShipping).value;\n\n    if (months[month]) {\n      months[month] = _objectSpread(_objectSpread({}, months[month]), {}, {\n        net: currency(netProfit + months[month].net).value,\n        depop_fees: currency(fees + months[month].depop_fees).value,\n        sellerPaidShipping: currency(sellerPaidShipping + months[month].sellerPaidShipping).value\n      });\n    } else {\n      months[month] = {\n        net: netProfit || 0,\n        depop_fees: fees || 0,\n        sellerPaidShipping: sellerPaidShipping || 0\n      };\n    } // sets start dates\n\n\n    if (months[month].start) {\n      const start = new Date(months[month].start);\n      const current = date;\n      if (current < start) months[month].start = date;\n    } else months[month].start = date;\n\n    if (months[month].end) {\n      const end = new Date(months[month].end);\n      const current = date;\n      if (current > end) months[month].end = date;\n    } else months[month].end = date;\n\n    months[month].end = date;\n  });\n  Object.keys(months).forEach(key => {\n    monthArray.push({\n      month: key,\n      'Net Profit': months[key].net,\n      'Depop Fees': months[key].depop_fees,\n      'Seller-Paid-Shipping': months[key].sellerPaidShipping\n    });\n  });\n  return monthArray;\n}; // Value Box 1\n\nexport const getAvgProfits = data => {\n  const monthlyProfit = getProfitsByMonth(data);\n  let avg = 0;\n  monthlyProfit.forEach(data => {\n    avg += data['Net Profit'];\n  });\n  avg = avg / monthlyProfit.length;\n  return {\n    monthly: currency(avg).value,\n    weekly: currency(avg / 4).value\n  };\n}; // Value Box 2\n\nexport const bestTimeToList = data => {\n  const obj = {\n    sell: {},\n    list: {}\n  };\n  data.sales.forEach(({\n    date_of_listing,\n    date_of_sale\n  }) => {\n    const listDay = moment(date_of_listing).format('dddd');\n    if (obj.list[listDay]) obj.list[listDay] += 1;else obj.list[listDay] = 1;\n    const saleDay = moment(date_of_sale).format('dddd');\n    if (obj.sell[saleDay]) obj.sell[saleDay] += 1;else obj.sell[saleDay] = 1;\n  });\n  const final = {\n    sell: [],\n    list: []\n  };\n  let topSellCount = 0;\n  let topListCount = 0;\n  Object.keys(obj.sell).forEach(key => {\n    if (obj.sell[key] === topSellCount) {\n      final.sell.push(key);\n    } else if (obj.sell[key] > topSellCount) {\n      final.sell = [key];\n      topSellCount = obj.sell[key];\n    }\n  });\n  Object.keys(obj.list).forEach(key => {\n    if (obj.list[key] === topListCount) {\n      final.list.push(key);\n    } else if (obj.list[key] > topListCount) {\n      final.list = [key];\n      topListCount = obj.list[key];\n    }\n  });\n  return final;\n}; // Value Box 3\n\nexport const avgItemsPerDay = data => {\n  const obj = {};\n  data.sales.forEach(({\n    date_of_sale\n  }) => {\n    if (obj[date_of_sale]) {\n      obj[date_of_sale] += 1;\n    } else obj[date_of_sale] = 1;\n  });\n  const sales = data.sales.length;\n  const days = Object.keys(obj).length;\n  return sales / days;\n}; // Tables\n// export const formatSalesTable = (sales) => {\n//   const newSales = []\n//   sales.forEach((sale) => {\n//     const ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime()\n//     const days = ms / (1000 * 3600 * 24)\n//     newSales.push({\n//       ...sale,\n//       'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n//       buyer: `${sale.name}`,\n//       username: `${sale.buyer}`,\n//       'item price': sale.item_price,\n//       'buyer-paid-shipping': sale.buyer_shipping_cost,\n//       fees: sale.depop_fee,\n//       'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n//       'days listed': days, // converts from ms to days\n//       'item description': formatDescription(sale.description),\n//       address: `${sale.address_line_1} ${sale.city}, ${sale.state ? sale.state : ''} ${sale.post_code}`\n//     })\n//   })\n//   return sort(newSales)\n// }\n// utils\n// const sort = (sales) => {\n//   return sales.sort((a, b) => {\n//     const date1 = new Date(a['date sold'])\n//     const date2 = new Date(b['date listing'])\n//     return date1 - date2\n//   })\n// }\n// const formatDescription = (text) => {\n//   const tagStart = text.lastIndexOf('{')\n//   const withoutTags = tagStart !== -1 ? text.substring(0, tagStart) : text\n//   return withoutTags\n// }\n\nconst cleanNumber = num => {\n  if (!num || num === '-') return 0;\n  const withoutCurrency = num.substring(1, num.length);\n  return parseFloat(withoutCurrency);\n};","map":null,"metadata":{},"sourceType":"module"}