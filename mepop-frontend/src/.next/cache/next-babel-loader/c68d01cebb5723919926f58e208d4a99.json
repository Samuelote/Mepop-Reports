{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport currency from 'currency.js';\nexport const formatSalesTable = ({\n  sales,\n  currency_type\n}, currencyType) => {\n  const newSales = [];\n  sales.forEach(sale => {\n    const ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime();\n    const days = ms / (1000 * 3600 * 24);\n    newSales.push(_objectSpread(_objectSpread({}, sale), {}, {\n      'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n      buyer: `${sale.name}`,\n      username: `${sale.buyer}`,\n      'item price': sale.item_price,\n      'buyer-paid shipping': sale.buyer_shipping_cost,\n      'seller-paid shipping': sale.usps_cost,\n      'depop fees': `${currency_type || currencyType}${currency(sale.depop_fee).value + currency(sale.depop_payments_fee).value}`,\n      'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n      'days listed': days,\n      // converts from ms to days\n      'item description': formatDescription(sale.description),\n      address: `${sale.address_line_1} ${sale.city}, ${sale.state ? sale.state : ''} ${sale.post_code}`\n    }));\n  });\n  return sort(newSales);\n};\nexport const getRecentSales = ({\n  sales,\n  currency_type\n}, currencyType) => {\n  const sortedSales = sort(sales, 'date_of_sale');\n  const newSales = [];\n  const mostRecentDate = sortedSales[0].date_of_sale;\n  const scndMostRecentDate = moment(mostRecentDate).subtract(1, 'days').format('MM-DD-YYYY');\n  sortedSales.forEach(sale => {\n    if (sale.date_of_sale === mostRecentDate || sale.date_of_sale === scndMostRecentDate || newSales.length < 15) {\n      const ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime();\n      const days = ms / (1000 * 3600 * 24);\n      newSales.push(_objectSpread(_objectSpread({}, sale), {}, {\n        'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n        buyer: `${sale.name}`,\n        username: `${sale.buyer}`,\n        'item price': sale.item_price,\n        'buyer-paid shipping': sale.buyer_shipping_cost,\n        'seller-paid shipping': sale.usps_cost,\n        'depop fees': `${currency_type || currencyType}${currency(sale.depop_fee).value + currency(sale.depop_payments_fee).value}`,\n        'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n        'days listed': days,\n        // converts from ms to days\n        'item description': formatDescription(sale.description),\n        address: `${sale.address_line_1} ${sale.city}, ${sale.state ? sale.state : ''} ${sale.post_code}`\n      }));\n    }\n  });\n  return newSales;\n}; // utils\n\nconst sort = (sales, term) => {\n  return [...sales].sort((a, b) => {\n    const date1 = new Date(a[term || 'date sold']);\n    const date2 = new Date(b[term || 'date sold']);\n    return date2 - date1;\n  });\n};\n\nconst formatDescription = text => {\n  const tagStart = text.lastIndexOf('{');\n  const withoutTags = tagStart !== -1 ? text.substring(0, tagStart) : text;\n  return withoutTags;\n};","map":null,"metadata":{},"sourceType":"module"}