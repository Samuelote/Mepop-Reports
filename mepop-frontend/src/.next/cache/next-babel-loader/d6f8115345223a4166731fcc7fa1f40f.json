{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport theme from '../theme';\nimport { ThemeProvider } from 'styled-components';\nimport 'font-awesome/css/font-awesome.css';\nimport 'react-virtualized/styles.css';\nimport '../globalStyle.css';\nimport 'react-tippy/dist/tippy.css';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Provider as ReduxProvider, useDispatch } from 'react-redux';\nimport { ToastProvider } from 'react-toast-notifications';\nimport { PageTransition } from 'next-page-transitions'; // Initialize Date Picker\n\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport '../styles/datePicker.css';\nimport Firebase, { FirebaseContext, withFirebase } from '../firebase';\nimport Layout from '../components/Layout';\nimport store from '../store';\nimport { UPDATE_USER, TOGGLE_LOADING } from '../store/generalReducer';\nimport { fetchFiles } from '../store/actions/files';\nimport { useRouter } from 'next/router';\nconst stripePromise = loadStripe('pk_live_c9rOKGsnQdeKY5fmn2gYNbiL');\nexport const MyApp = props => {\n  return __jsx(Elements, {\n    stripe: stripePromise\n  }, __jsx(ThemeProvider, {\n    theme: theme\n  }, __jsx(ReduxProvider, {\n    store: store\n  }, __jsx(FirebaseContext.Provider, {\n    value: new Firebase()\n  }, __jsx(ToastProvider, null, __jsx(Setup, props))))));\n};\nexport default MyApp; // This persists user sessions and sets up app from there.\n\nconst Setup = withFirebase(({\n  Component,\n  pageProps,\n  firebase\n}) => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const unprotectedRoute = router.pathname === '/sign-in' || router.pathname === '/sign-up';\n  useEffect(() => {\n    firebase.auth.onAuthStateChanged(persistedUser => {\n      const isNewUser = persistedUser ? persistedUser.metadata.creationTime === persistedUser.metadata.lastSignInTime : true;\n\n      if (persistedUser && !isNewUser) {\n        firebase.handleMembership(persistedUser).then(userObj => {\n          dispatch({\n            type: UPDATE_USER,\n            payload: userObj\n          });\n          dispatch({\n            type: TOGGLE_LOADING,\n            payload: true\n          });\n          fetchFiles({\n            firebase,\n            dispatch\n          }, () => {\n            // after fetching files do this\n            dispatch({\n              type: TOGGLE_LOADING,\n              payload: false\n            });\n          });\n        });\n      } else {\n        if (!unprotectedRoute) router.push({\n          pathname: '/sign-in'\n        });\n        dispatch({\n          type: UPDATE_USER,\n          payload: {}\n        });\n        dispatch({\n          type: TOGGLE_LOADING,\n          payload: false\n        });\n      }\n    });\n  }, []);\n  return __jsx(Layout, null, __jsx(PageTransition, {\n    timeout: 300,\n    classNames: \"page-transition\"\n  }, __jsx(Component, pageProps)));\n});","map":null,"metadata":{},"sourceType":"module"}