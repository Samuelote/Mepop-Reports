{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useMemo, useState, memo } from 'react';\nimport { formatNum } from '../util/general';\nimport { groupByCategory } from '../util/grouping';\nimport VertComposedChart from '../../../styles/reporting/VertBarChart';\nimport Flex from '../../../styles/layout/Flex';\nimport ValueBox from '../../../styles/reporting/ValueBox';\nconst SalesByCategory = memo(({\n  data,\n  hideBoxes,\n  halfSize,\n  isBasic\n}) => {\n  const {\n    0: revenue,\n    1: showRevenue\n  } = useState(false);\n  const chartData = useMemo(() => groupByCategory(data, revenue), [revenue, data]);\n  const max = {\n    gross: chartData[0],\n    sold: chartData[0]\n  };\n  const min = {\n    gross: chartData[0],\n    sold: chartData[0]\n  };\n  chartData.forEach((current, i) => {\n    if (current['Gross Earnings'] > max.gross['Gross Earnings']) max.gross = current;\n    if (current['Items Sold'] > max.sold['Items Sold']) max.sold = current;\n    if (current['Gross Earnings'] < min.gross['Gross Earnings']) min.gross = current;\n    if (current['Items Sold'] < min.sold['Items Sold']) min.sold = current;\n  });\n  if (!chartData.length) return null;\n\n  if (halfSize) {\n    return __jsx(VertComposedChart, {\n      headerContent: `Sales By Category${chartData.length < 15 ? '' : ' - ( Top 15 )'}`,\n      data: chartData,\n      xdataKey: revenue ? 'Gross Earnings' : 'Items Sold',\n      ydataKey: \"Category\",\n      height: 500,\n      formatTooltip: (t, l) => formatTooltip(t, l, data),\n      switchLabel: \"Show Earnings\",\n      switchCheck: revenue,\n      switchEvent: () => {\n        showRevenue(!revenue);\n      },\n      proOnly: isBasic ? {\n        component: 'Sales by Category',\n        img: 'sales-by-category.png'\n      } : null\n    });\n  }\n\n  return __jsx(Flex, {\n    flexWrap: \"wrap\"\n  }, __jsx(VertComposedChart, {\n    headerContent: `Sales By Category${chartData.length < 15 ? '' : ' - ( Top 15 )'}`,\n    data: chartData,\n    xdataKey: revenue ? 'Gross Earnings' : 'Items Sold',\n    ydataKey: \"Category\",\n    height: 500,\n    formatTooltip: (t, l) => formatTooltip(t, l, data),\n    switchLabel: \"Show Earnings\",\n    switchCheck: revenue,\n    switchEvent: () => {\n      showRevenue(!revenue);\n    },\n    proOnly: isBasic ? {\n      component: 'Sales by Category',\n      img: 'sales-by-category.png'\n    } : null\n  }), !hideBoxes ? __jsx(Flex, {\n    justifyContent: \"space-between\",\n    flexWrap: \"wrap\",\n    alignItems: \"stretch\",\n    maxWidth: \"50%\",\n    flexDirection: \"column\"\n  }, max ? __jsx(React.Fragment, null, __jsx(ValueBox, {\n    minWidth: \"50px\",\n    title: \"Highest Earning Category\",\n    string: true,\n    smallText: true,\n    value: `${max.gross.Category} - ${formatNum(data.currency_type, max.gross['Gross Earnings'])} Gross Profit`\n  }), __jsx(ValueBox, {\n    minWidth: \"50px\",\n    title: \"Most Sold Category\",\n    string: true,\n    smallText: true,\n    value: `${max.sold.Category} - ${max.sold['Items Sold']} Items Sold`\n  }), __jsx(ValueBox, {\n    minWidth: \"50px\",\n    title: \"Lowest Earning Category\",\n    string: true,\n    smallText: true,\n    value: `${min.gross.Category} -${formatNum(data.currency_type, min.gross['Gross Earnings'])} Gross Profit`\n  }), __jsx(ValueBox, {\n    minWidth: \"50px\",\n    title: \"Least Sold Category\",\n    string: true,\n    smallText: true,\n    value: `${min.sold.Category} - ${min.sold['Items Sold']} Items Sold`\n  })) : null) : null);\n});\nexport default SalesByCategory;\n\nconst formatTooltip = (tickItem, label, data) => {\n  if (label === 'Gross Earnings') {\n    return `${data.currency_type}${tickItem.toFixed(2)}`;\n  }\n\n  return tickItem;\n};","map":null,"metadata":{},"sourceType":"module"}