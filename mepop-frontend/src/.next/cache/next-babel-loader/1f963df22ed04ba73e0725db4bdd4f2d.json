{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const UPDATE_FILES = 'UPDATE_FILES';\nexport const UPDATE_GEOCODES = 'UPDATE_GEOCODES';\nexport const UPDATE_DATA = 'UPDATE_DATA';\nexport const SET_LOCATION_KEYS = 'SET_LOCATION_KEYS';\nexport const SET_GEO_DATA = 'SET_GEO_DATA';\nexport const UPDATE_RANGED_DATA = 'UPDATE_RANGED_DATA';\nexport const UPDATE_COMPARE_DATA = 'UPDATE_COMPARE_DATA';\nexport const TOGGLE_LOADING = 'TOGGLE_LOADING';\nconst initialState = {\n  user: {},\n  files: [],\n  allData: {},\n  rangedData: {},\n  compareData: {},\n  geocodes: {},\n  googleMapsKey: null,\n  loading: true\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_LOADING:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: typeof action.payload === 'boolean' ? action.payload : !state.loading\n        });\n      }\n\n    case UPDATE_USER:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          user: action.payload\n        });\n      }\n\n    case UPDATE_RANGED_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          rangedData: action.payload\n        });\n      }\n\n    case UPDATE_COMPARE_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          compareData: action.payload\n        });\n      }\n\n    case UPDATE_GEOCODES:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          geocodes: action.payload\n        });\n      }\n\n    case UPDATE_FILES:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          files: action.payload\n        });\n      }\n\n    case UPDATE_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          allData: action.payload || {},\n          rangedData: action.payload || {}\n        });\n      }\n\n    case SET_GEO_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          geocodes: action.payload\n        });\n      }\n\n    case SET_LOCATION_KEYS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          googleMapsKey: action.payload.googleKey\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}