{"ast":null,"code":"var _jsxFileName = \"/Users/samuelwood/development/mepop-reports/mepop-frontend/src/styles/reporting/VertBarChart/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, BarChart, Cell } from 'recharts';\nimport Card from '../../elements/Card';\nimport { ChartWrap } from '../styleUtil';\nimport theme from '../../../theme';\n\nconst VertBarChart = (_ref) => {\n  let {\n    data,\n    ydataKey,\n    xdataKey,\n    height,\n    formatTooltip,\n    disableAnimation\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"data\", \"ydataKey\", \"xdataKey\", \"height\", \"formatTooltip\", \"disableAnimation\"]);\n\n  return __jsx(Card, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }), __jsx(ChartWrap, {\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(BarChart, {\n    layout: \"vertical\",\n    data: data,\n    margin: {\n      top: 10,\n      right: 20,\n      bottom: 0,\n      left: 50\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, __jsx(XAxis, {\n    type: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), __jsx(YAxis, {\n    dataKey: ydataKey,\n    type: \"category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }), __jsx(Tooltip, {\n    formatter: formatTooltip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), __jsx(Bar, {\n    dataKey: xdataKey,\n    isAnimationActive: typeof disableAnimation !== 'boolean',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, data.map((entry, index) => {\n    const currentColor = getColor(entry, index);\n    return __jsx(Cell, {\n      key: index,\n      fill: currentColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }\n    });\n  }))))));\n};\n\nexport default VertBarChart;\n\nconst getColor = (entry, index) => {\n  const i = theme.colors.pastelArray[index] ? index : index - theme.colors.pastelArray.length;\n  return theme.colors.pastelArray[i];\n};","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/styles/reporting/VertBarChart/index.js"],"names":["React","Bar","XAxis","YAxis","Tooltip","ResponsiveContainer","BarChart","Cell","Card","ChartWrap","theme","VertBarChart","data","ydataKey","xdataKey","height","formatTooltip","disableAnimation","props","top","right","bottom","left","map","entry","index","currentColor","getColor","i","colors","pastelArray","length"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,GADF,EACOC,KADP,EACcC,KADd,EACqBC,OADrB,EAEEC,mBAFF,EAGEC,QAHF,EAIEC,IAJF,QAKO,UALP;AAOA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,MAAMC,YAAY,GAAG,UAQf;AAAA,MARgB;AACpBC,IAAAA,IADoB;AAEpBC,IAAAA,QAFoB;AAGpBC,IAAAA,QAHoB;AAIpBC,IAAAA,MAJoB;AAKpBC,IAAAA,aALoB;AAMpBC,IAAAA;AANoB,GAQhB;AAAA,MADDC,KACC;;AACJ,SACE,MAAC,IAAD,eAAUA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,SAAD;AAAW,IAAA,MAAM,EAAEH,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAqB,IAAA,KAAK,EAAC,MAA3B;AAAkC,IAAA,MAAM,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,QAAD;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,IAAI,EAAEH,IAFR;AAGE,IAAA,MAAM,EAAE;AAAEO,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,MAAM,EAAE,CAA9B;AAAiCC,MAAAA,IAAI,EAAE;AAAvC,KAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME,MAAC,KAAD;AAAO,IAAA,OAAO,EAAET,QAAhB;AAA0B,IAAA,IAAI,EAAC,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,MAAC,OAAD;AAAS,IAAA,SAAS,EAAEG,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQE,MAAC,GAAD;AACE,IAAA,OAAO,EAAEF,QADX;AAEE,IAAA,iBAAiB,EAAE,OAAOG,gBAAP,KAA4B,SAFjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGL,IAAI,CAACW,GAAL,CAAS,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACxB,UAAMC,YAAY,GAAGC,QAAQ,CAACH,KAAD,EAAQC,KAAR,CAA7B;AACD,WAAO,MAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,KAAX;AAAkB,MAAA,IAAI,EAAEC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACA,GAHF,CALH,CARF,CAFF,CADF,CADF,CADF;AA8BD,CAvCD;;AAyCA,eAAef,YAAf;;AAEA,MAAMgB,QAAQ,GAAG,CAACH,KAAD,EAAQC,KAAR,KAAkB;AACjC,QAAMG,CAAC,GAAGlB,KAAK,CAACmB,MAAN,CAAaC,WAAb,CAAyBL,KAAzB,IAAkCA,KAAlC,GAA0CA,KAAK,GAAGf,KAAK,CAACmB,MAAN,CAAaC,WAAb,CAAyBC,MAArF;AAEA,SAAOrB,KAAK,CAACmB,MAAN,CAAaC,WAAb,CAAyBF,CAAzB,CAAP;AACD,CAJD","sourcesContent":["import React from 'react'\nimport {\n  Bar, XAxis, YAxis, Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Cell\n} from 'recharts'\n\nimport Card from '../../elements/Card'\nimport { ChartWrap } from '../styleUtil'\nimport theme from '../../../theme'\n\nconst VertBarChart = ({\n  data,\n  ydataKey,\n  xdataKey,\n  height,\n  formatTooltip,\n  disableAnimation,\n  ...props\n}) => {\n  return (\n    <Card {...props}>\n      <ChartWrap height={height}>\n        <ResponsiveContainer width='100%' height='100%'>\n\n          <BarChart\n            layout='vertical'\n            data={data}\n            margin={{ top: 10, right: 20, bottom: 0, left: 50 }}\n          >\n            <XAxis type='number' />\n            <YAxis dataKey={ydataKey} type='category' />\n            <Tooltip formatter={formatTooltip} />\n            <Bar\n              dataKey={xdataKey}\n              isAnimationActive={typeof disableAnimation !== 'boolean'}\n            >\n              {\n          \t    data.map((entry, index) => {\n                  const currentColor = getColor(entry, index)\n            \t    return <Cell key={index} fill={currentColor} />\n                })\n              }\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </ChartWrap>\n\n    </Card>\n  )\n}\n\nexport default VertBarChart\n\nconst getColor = (entry, index) => {\n  const i = theme.colors.pastelArray[index] ? index : index - theme.colors.pastelArray.length\n\n  return theme.colors.pastelArray[i]\n}\n"]},"metadata":{},"sourceType":"module"}