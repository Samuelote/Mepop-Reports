{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, memo } from 'react';\nimport { groupByWeek } from '../util/grouping';\nimport Card from '../../../styles/elements/Card';\nimport Text from '../../../styles/elements/Text';\nimport Flex from '../../../styles/layout/Flex';\nimport Areachart from '../../../styles/reporting/AreaChart';\nimport styled from 'styled-components';\nimport theme from '../../../theme';\nimport { formatNum } from '../util/general';\nconst RevenueOverview = memo(({\n  data,\n  isBasic\n}) => {\n  const chartData = groupByWeek(data);\n  const {\n    0: week,\n    1: setWeek\n  } = useState(chartData[chartData.length - 1].week);\n  const {\n    0: revenue,\n    1: setRevenue\n  } = useState({\n    gross: chartData[chartData.length - 1].Gross,\n    net: chartData[chartData.length - 1].Net\n  });\n\n  const onHover = (val1, val2) => {\n    if (val2 === 'Gross') {\n      if (revenue.gross !== val1) {\n        setRevenue(_objectSpread(_objectSpread({}, revenue), {}, {\n          gross: val1\n        }));\n      }\n    } else if (val2 === 'Net') {\n      if (revenue.net !== val1) {\n        setRevenue(_objectSpread(_objectSpread({}, revenue), {}, {\n          net: val1\n        }));\n      }\n    } else {\n      setWeek(val1);\n    }\n  };\n\n  return __jsx(Card, {\n    sx: {\n      overflow: 'hidden',\n      boxShadow: theme.shadows.normal\n    },\n    minHeight: \"420px\",\n    proOnly: isBasic ? {\n      component: 'Revenue Overview',\n      img: 'revenue-overview.png'\n    } : null\n  }, __jsx(Flex, {\n    flexDirection: \"column\",\n    width: [1],\n    p: 50\n  }, __jsx(Title, {\n    color: \"primary\",\n    fontSize: 25\n  }, week), __jsx(Text, {\n    pt: \"10px\",\n    color: \"pastelGreen\",\n    fontSize: 20,\n    fontWeight: 600\n  }, \"Gross: \", formatNum(data.currency_type, revenue.gross)), __jsx(Text, {\n    color: \"pastelPurple\",\n    fontSize: 20,\n    fontWeight: 600\n  }, \"Net: \", formatNum(data.currency_type, revenue.net))), __jsx(Areachart, {\n    boxShadow: \"none\",\n    data: chartData,\n    xdataKey: \"Date Sold\",\n    onHover: onHover,\n    areas: [{\n      key: 'Gross',\n      color: 'pastelGreen'\n    }, {\n      key: 'Net',\n      color: 'pastelPurple'\n    }]\n  }));\n});\nexport default RevenueOverview;\nconst Title = styled(Text).withConfig({\n  displayName: \"RevenueOverview__Title\",\n  componentId: \"iz2hnt-0\"\n})([\"border-bottom:1px solid \", \";width:200px;padding-bottom:3px;\"], ({\n  theme\n}) => theme.colors.mainBg);","map":null,"metadata":{},"sourceType":"module"}