{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from 'firebase';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport FirebaseContext, { withFirebase } from './context';\nimport { getFileMethod, deleteFileMethod, uploadFilesMethod } from './methods/files';\nconst firebaseConfig = {\n  apiKey: 'AIzaSyB04NiM6bapVV6Jd2ZRw5vUVLy3Cu7o0x0',\n  authDomain: 'mepop-app.firebaseapp.com',\n  databaseURL: 'https://mepop-app.firebaseio.com',\n  projectId: 'mepop-app',\n  storageBucket: 'mepop-app.appspot.com',\n  messagingSenderId: '619885550344',\n  appId: '1:619885550344:web:28a8d730b1ca91a5f6aabd',\n  measurementId: 'G-WM4LPLQMKX'\n};\n\nclass Firebase {\n  constructor() {\n    try {\n      firebase.initializeApp(firebaseConfig);\n      firebase.analytics(); // uncomment this if running functions in emulator\n      // if (window.location.href.includes('localhost')) {\n      //   console.log('Dev env')\n      //   firebase.functions().useFunctionsEmulator('http://localhost:4001')\n      // }\n    } catch (err) {\n      if (!/already exists/.test(err.message)) {\n        console.error('Firebase initialization error', err.message);\n      }\n    }\n\n    this.auth = firebase.auth();\n    this.storage = firebase.storage();\n    this.db = firebase.firestore();\n    this.functions = firebase.functions();\n  } // Get api Keys from firestore\n\n\n  retreiveGoogleMapsKey() {\n    // getGoogleMapsKey(this.db)\n    const docRef = this.db.collection('keys').doc('googleMaps');\n    return docRef.get().then(function (doc) {\n      if (doc.exists) {\n        return {\n          error: null,\n          data: doc.data()\n        };\n      } else {\n        window.alert('Unknown Error Occurred');\n      }\n    }).catch(function (error) {\n      return {\n        error,\n        data: null\n      };\n    });\n  } // Stripe\n\n\n  handleStripeClients() {\n    // creates stripe client if doesn't exist (This handles people moving over from legacy app but who already have accounts)\n    return this.db.collection('stripeClients').doc(this.auth.currentUser.uid).get().then(doc => {\n      if (!doc.exists) {\n        return this.createStripeClient();\n      }\n    });\n  }\n\n  createStripeClient() {\n    const createStripeClientFunction = firebase.functions().httpsCallable('createStripeClient');\n    const {\n      email,\n      uid\n    } = this.auth.currentUser;\n    createStripeClientFunction({\n      email,\n      uid\n    }).then(() => {\n      console.log('Create Stripe Client');\n    });\n  } // profiles\n\n\n  handleProfile(userAndMembership) {\n    return this.db.collection('profiles').doc(this.auth.currentUser.uid).get().then(doc => {\n      this.handleStripeClients();\n\n      if (!doc.exists) {\n        this.setProfile().then(newDoc => {\n          // creates new profile if it doesn't exist (only on first login/signup ever)\n          return _objectSpread(_objectSpread({}, userAndMembership), {}, {\n            profile: newDoc\n          });\n        });\n      } else {\n        return _objectSpread(_objectSpread({}, userAndMembership), {}, {\n          profile: doc.data()\n        });\n      }\n    });\n  }\n\n  setProfile(incomingDoc, uid) {\n    const initialDoc = {\n      firstName: '',\n      lastName: '',\n      depopShopName: '',\n      hasSignedIn: false,\n      email: this.auth.currentUser ? this.auth.currentUser.email : ''\n    };\n    return this.db.collection('profiles').doc(uid || this.auth.currentUser.uid).set(incomingDoc || initialDoc).then(() => {\n      return incomingDoc || initialDoc;\n    }).catch(() => alert('Error Occurred Creating Profile'));\n  } // memberships\n\n\n  handleMembership(user) {\n    return this.db.collection('memberships').doc(this.auth.currentUser.uid).get().then(doc => {\n      if (!doc.exists) {\n        this.setMembership().then(newDoc => {\n          // creates new membership if it doesn't exist (only on first login/signup ever)\n          return this.handleProfile({\n            user,\n            membership: newDoc\n          }).then(newUserObject => {\n            return newUserObject;\n          });\n        });\n      } else {\n        return this.handleProfile({\n          user,\n          membership: doc.data()\n        }).then(newUserObject => {\n          return newUserObject;\n        });\n      }\n    });\n  }\n\n  setMembership(incomingDoc) {\n    const newDoc = {\n      type: 'basic',\n      paymentInfo: {}\n    };\n    return this.db.collection('memberships').doc(this.auth.currentUser.uid).set(incomingDoc || newDoc).then(() => {\n      return incomingDoc || newDoc;\n    }).catch(() => window.alert('Error Occurred Creating Membership'));\n  } // auth\n\n\n  doCreateUser(_ref) {\n    let {\n      password\n    } = _ref,\n        form = _objectWithoutProperties(_ref, [\"password\"]);\n\n    return this.auth.createUserWithEmailAndPassword(form.email, password).then(({\n      user\n    }) => {\n      return this.setProfile(form, user.uid);\n    });\n  }\n\n  doGetCurrentUser() {\n    return this.auth;\n  }\n\n  doSignIn(email, password) {\n    return this.auth.signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      return this.handleMembership(user);\n    });\n  }\n\n  doSignOut() {\n    this.auth.signOut();\n  }\n\n  doPasswordReset(email) {\n    return this.auth.sendPasswordResetEmail(email);\n  }\n\n  doPasswordUpdate(passwords) {\n    return this.auth.signInWithEmailAndPassword(this.auth.currentUser.email, passwords.oldPassword).then(({\n      user\n    }) => {\n      return this.auth.currentUser.updatePassword(passwords.newPassword);\n    });\n  } // files\n\n\n  getUserFiles(resolve) {\n    getFileMethod(this.auth, this.storage, resolve);\n  }\n\n  deleteFile(filename, fetchFiles) {\n    deleteFileMethod(this.auth, this.storage, filename, fetchFiles);\n  }\n\n  uploadFiles(files, fetchFiles, err) {\n    uploadFilesMethod(this.auth, this.storage, files, fetchFiles, err);\n  }\n\n}\n\nexport default Firebase;\nexport { FirebaseContext, withFirebase };","map":null,"metadata":{},"sourceType":"module"}