{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { withFirebase } from '../../firebase';\nimport { useState, useCallback, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\nimport Card from '../../styles/elements/Card';\nimport Flex from '../../styles/layout/Flex';\nimport Button from '../../styles/elements/Button';\nimport Tooltip from '../../styles/elements/Tooltip';\nimport Text from '../../styles/elements/Text';\nimport { fetchFiles } from '../../store/actions/files';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Spinner from '../../styles/elements/Loading/Spinner';\nimport InfoModal from './InfoModal';\nimport { useToasts } from 'react-toast-notifications';\nconst Dropzone = withFirebase(({\n  firebase\n}) => {\n  const dispatch = useDispatch();\n  const {\n    addToast\n  } = useToasts();\n  const {\n    files\n  } = useSelector(state => state.generalReducer);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(files.length);\n  const {\n    0: buttonDisable,\n    1: disableBtns\n  } = useState(false);\n  const {\n    0: activeBtn,\n    1: activateBtn\n  } = useState(null);\n  const {\n    0: modalIsOpen,\n    1: toggleModal\n  } = useState(false);\n  const startFetch = useCallback((load = true) => {\n    if (load) setLoading(true);\n    disableBtns(true);\n    fetchFiles({\n      firebase,\n      dispatch\n    }, () => {\n      setLoading(false);\n      disableBtns(false);\n      activateBtn(null);\n    });\n  }, []);\n  useEffect(() => {\n    setLoading(true);\n    startFetch();\n  }, [startFetch]);\n\n  const onError = (msg, dismiss) => {\n    addToast(__jsx(\"div\", null, msg || 'Error Occurred'), {\n      appearance: 'error',\n      autoDismiss: dismiss\n    });\n    setLoading(false);\n    disableBtns(false);\n  };\n\n  const onDrop = useCallback(acceptedFiles => {\n    if (acceptedFiles.length) {\n      firebase.uploadFiles(acceptedFiles, startFetch, onError);\n    } else {\n      onError('File appears to be of wrong format.', true);\n    }\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: '.csv'\n  });\n\n  const deleteFile = filename => {\n    firebase.deleteFile(filename, file => {\n      // success! Now remove that file from local state or refresh files in some way.\n      startFetch(false);\n    });\n  };\n\n  return __jsx(Container, null, __jsx(InfoModal, {\n    modalIsOpen: modalIsOpen,\n    toggleModal: toggleModal\n  }), __jsx(Flex, {\n    justifyContent: \"flex-end\",\n    px: \"10px\"\n  }, __jsx(Tooltip, {\n    title: \"What's this?\"\n  }, __jsx(Button, {\n    bg: \"transparent\",\n    color: \"greyDarkest\",\n    fontSize: \"20px\",\n    onClick: () => toggleModal(!modalIsOpen)\n  }, __jsx(\"i\", {\n    className: \"fa fa-question-circle\"\n  })))), __jsx(DropZone, _extends({\n    isDragActive: isDragActive\n  }, getRootProps()), __jsx(\"input\", getInputProps()), __jsx(H2, null, \"Drop files here\"), __jsx(\"p\", null, \"or\"), __jsx(Button, {\n    color: \"blue\",\n    bg: \"white\",\n    size: \"lg\"\n  }, \"Select Files\"), __jsx(\"p\", null, \"Files must be from Depop to be valid\")), __jsx(Card, {\n    headerContent: \"Uploaded Files\",\n    isLoading: loading,\n    minHeight: \"200px\",\n    mb: \"100px\"\n  }, files.length ? __jsx(Table, null, files.map(({\n    filename\n  }, i) => __jsx(Row, {\n    key: i,\n    index: i\n  }, __jsx(Tooltip, {\n    title: \"Delete file\",\n    arrow: false,\n    position: \"right\"\n  }, __jsx(DeleteBtn, {\n    disabled: buttonDisable,\n    \"aria-label\": `Click to delete ${filename}`,\n    onClick: () => {\n      deleteFile(filename);\n      activateBtn(i);\n    }\n  }, buttonDisable && activeBtn === i ? __jsx(Spinner, {\n    width: \"9px\",\n    color: \"red\",\n    size: \"2\"\n  }) : __jsx(\"i\", {\n    className: \"fa fa-close\"\n  }))), filename))) : __jsx(Text, {\n    fontSize: \"20px\",\n    pt: \"1em\",\n    color: \"greyDark\"\n  }, \"Upload Files Above\")));\n});\nexport default Dropzone;\nconst Container = styled.div.withConfig({\n  displayName: \"FileDrop__Container\",\n  componentId: \"sc-3bbzl8-0\"\n})([\"width:100%;\"]);\nconst DropZone = styled(Flex).withConfig({\n  displayName: \"FileDrop__DropZone\",\n  componentId: \"sc-3bbzl8-1\"\n})([\"justify-content:center;align-items:center;flex-direction:column;display:flex;justify-content:center;align-items:center;margin:15px;min-height:250px;margin-top:10px;transition:.2s;position:relative;border:5px dashed \", \";border-radius:\", \";\"], ({\n  theme,\n  isDragActive\n}) => isDragActive ? theme.colors.greyDark : theme.colors.greyLight, ({\n  theme,\n  isDragActive\n}) => isDragActive ? theme.borderRadius.more : theme.borderRadius.normal);\nconst H2 = styled.h2.withConfig({\n  displayName: \"FileDrop__H2\",\n  componentId: \"sc-3bbzl8-2\"\n})([\"margin:0;margin-top:10px;font-weight:\", \";\"], ({\n  theme\n}) => theme.fontWeights.regular);\nconst Row = styled.div.withConfig({\n  displayName: \"FileDrop__Row\",\n  componentId: \"sc-3bbzl8-3\"\n})([\"display:flex;align-items:center;width:100%;padding:3px 0px 3px 5px;border-bottom:\", \" 1px solid;\"], ({\n  theme,\n  key\n}) => theme.colors.mainBg);\nconst DeleteBtn = styled.button.withConfig({\n  displayName: \"FileDrop__DeleteBtn\",\n  componentId: \"sc-3bbzl8-4\"\n})([\"margin-right:5px;cursor:pointer;color:\", \";height:25px;width:25px;display:flex;justify-content:center;align-items:center;flex-direction &:hover{color:\", \";}\"], ({\n  theme\n}) => theme.colors.red, ({\n  theme\n}) => theme.colors.redDark);\nconst Table = styled.div.withConfig({\n  displayName: \"FileDrop__Table\",\n  componentId: \"sc-3bbzl8-5\"\n})([\"max-height:250px;overflow:auto;width:100%;\"]);","map":null,"metadata":{},"sourceType":"module"}