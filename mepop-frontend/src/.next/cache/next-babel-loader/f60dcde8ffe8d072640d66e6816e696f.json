{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from 'firebase';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport FirebaseContext, { withFirebase } from './context';\nimport { getFileMethod, deleteFileMethod, uploadFilesMethod } from './methods/files';\nconst firebaseConfig = {\n  apiKey: 'AIzaSyB04NiM6bapVV6Jd2ZRw5vUVLy3Cu7o0x0',\n  authDomain: 'mepop-app.firebaseapp.com',\n  databaseURL: 'https://mepop-app.firebaseio.com',\n  projectId: 'mepop-app',\n  storageBucket: 'mepop-app.appspot.com',\n  messagingSenderId: '619885550344',\n  appId: '1:619885550344:web:28a8d730b1ca91a5f6aabd',\n  measurementId: 'G-WM4LPLQMKX'\n};\n\nclass Firebase {\n  constructor() {\n    try {\n      firebase.initializeApp(firebaseConfig);\n      firebase.analytics(); // uncomment this if running functions in emulator\n      // if (window.location.href.includes('localhost')) {\n      //   console.log('Dev env')\n      //   firebase.functions().useFunctionsEmulator('http://localhost:4001')\n      // }\n    } catch (err) {\n      if (!/already exists/.test(err.message)) {\n        console.error('Firebase initialization error', err.message);\n      }\n    }\n\n    this.auth = firebase.auth();\n    this.storage = firebase.storage();\n    this.db = firebase.firestore();\n    this.functions = firebase.functions();\n  } // Get api Keys from firestore\n\n\n  retreiveGoogleMapsKey() {\n    // getGoogleMapsKey(this.db)\n    const docRef = this.db.collection('keys').doc('googleMaps');\n    return docRef.get().then(function (doc) {\n      if (doc.exists) {\n        return {\n          error: null,\n          data: doc.data()\n        };\n      } else {\n        window.alert('Unknown Error Occurred');\n      }\n    }).catch(function (error) {\n      return {\n        error,\n        data: null\n      };\n    });\n  } // Stripe\n\n\n  handleStripeClients() {\n    // creates stripe client if doesn't exist (This handles people moving over from legacy app but who already have accounts)\n    return this.db.collection('stripeClients').doc(this.auth.currentUser.uid).get().then(doc => {\n      if (!doc.exists) {\n        return this.createStripeClient();\n      }\n    });\n  }\n\n  createStripeClient() {\n    const createStripeClientFunction = firebase.functions().httpsCallable('createStripeClient');\n    const {\n      email,\n      uid\n    } = this.auth.currentUser;\n    createStripeClientFunction({\n      email,\n      uid\n    }).then(() => {\n      console.log('Create Stripe Client');\n    });\n  } // profiles\n\n\n  handleProfile(userAndMembership) {\n    return this.db.collection('profiles').doc(this.auth.currentUser.uid).get().then(doc => {\n      this.handleStripeClients();\n\n      if (!doc.exists) {\n        this.setProfile().then(newDoc => {\n          // creates new profile if it doesn't exist (only on first login/signup ever)\n          return _objectSpread(_objectSpread({}, userAndMembership), {}, {\n            profile: newDoc\n          });\n        });\n      } else {\n        return _objectSpread(_objectSpread({}, userAndMembership), {}, {\n          profile: doc.data()\n        });\n      }\n    });\n  }\n\n  setProfile(incomingDoc, uid) {\n    const initialDoc = {\n      firstName: '',\n      lastName: '',\n      depopShopName: '',\n      hasSignedIn: false,\n      email: this.auth.currentUser ? this.auth.currentUser.email : ''\n    };\n    return this.db.collection('profiles').doc(uid || this.auth.currentUser.uid).set(incomingDoc || initialDoc).then(() => {\n      return incomingDoc || initialDoc;\n    }).catch(() => alert('Error Occurred Creating Profile'));\n  } // memberships\n\n\n  handleMembership(user) {\n    return this.db.collection('memberships').doc(this.auth.currentUser.uid).get().then(doc => {\n      if (!doc.exists) {\n        this.setMembership().then(newDoc => {\n          // creates new membership if it doesn't exist (only on first login/signup ever)\n          return this.handleProfile({\n            user,\n            membership: newDoc\n          }).then(newUserObject => {\n            return newUserObject;\n          });\n        });\n      } else {\n        return this.handleProfile({\n          user,\n          membership: doc.data()\n        }).then(newUserObject => {\n          return newUserObject;\n        });\n      }\n    });\n  }\n\n  setMembership(incomingDoc) {\n    const newDoc = {\n      type: 'basic',\n      paymentInfo: {}\n    };\n    return this.db.collection('memberships').doc(this.auth.currentUser.uid).set(incomingDoc || newDoc).then(() => {\n      return incomingDoc || newDoc;\n    }).catch(() => window.alert('Error Occurred Creating Membership'));\n  } // auth\n\n\n  doCreateUser(_ref) {\n    let {\n      password\n    } = _ref,\n        form = _objectWithoutProperties(_ref, [\"password\"]);\n\n    return this.auth.createUserWithEmailAndPassword(form.email, password).then(({\n      user\n    }) => {\n      return this.setProfile(form, user.uid);\n    });\n  }\n\n  doGetCurrentUser() {\n    return this.auth;\n  }\n\n  doSignIn(email, password) {\n    return this.auth.signInWithEmailAndPassword(email, password).then(({\n      user\n    }) => {\n      return this.handleMembership(user);\n    });\n  }\n\n  doSignOut() {\n    this.auth.signOut();\n  }\n\n  doPasswordReset(email) {\n    return this.auth.sendPasswordResetEmail(email);\n  }\n\n  doPasswordUpdate(passwords) {\n    return this.auth.signInWithEmailAndPassword(this.auth.currentUser.email, passwords.oldPassword).then(({\n      user\n    }) => {\n      return this.auth.currentUser.updatePassword(passwords.newPassword);\n    });\n  } // files\n\n\n  getUserFiles(resolve) {\n    getFileMethod(this.auth, this.storage, resolve);\n  }\n\n  deleteFile(filename, fetchFiles) {\n    deleteFileMethod(this.auth, this.storage, filename, fetchFiles);\n  }\n\n  uploadFiles(files, fetchFiles, err) {\n    uploadFilesMethod(this.auth, this.storage, files, fetchFiles, err);\n  }\n\n}\n\nexport default Firebase;\nexport { FirebaseContext, withFirebase };","map":{"version":3,"sources":["/Users/samuelwood/development/test/mepop-next/src/firebase/index.js"],"names":["firebase","FirebaseContext","withFirebase","getFileMethod","deleteFileMethod","uploadFilesMethod","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","constructor","initializeApp","analytics","err","test","message","console","error","auth","storage","db","firestore","functions","retreiveGoogleMapsKey","docRef","collection","doc","get","then","exists","data","window","alert","catch","handleStripeClients","currentUser","uid","createStripeClient","createStripeClientFunction","httpsCallable","email","log","handleProfile","userAndMembership","setProfile","newDoc","profile","incomingDoc","initialDoc","firstName","lastName","depopShopName","hasSignedIn","set","handleMembership","user","setMembership","membership","newUserObject","type","paymentInfo","doCreateUser","password","form","createUserWithEmailAndPassword","doGetCurrentUser","doSignIn","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","passwords","oldPassword","updatePassword","newPassword","getUserFiles","resolve","deleteFile","filename","fetchFiles","uploadFiles","files"],"mappings":"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","sourcesContent":["\nimport firebase from 'firebase'\nimport 'firebase/auth'\nimport 'firebase/storage'\nimport FirebaseContext, { withFirebase } from './context'\nimport { getFileMethod, deleteFileMethod, uploadFilesMethod } from './methods/files'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyB04NiM6bapVV6Jd2ZRw5vUVLy3Cu7o0x0',\n  authDomain: 'mepop-app.firebaseapp.com',\n  databaseURL: 'https://mepop-app.firebaseio.com',\n  projectId: 'mepop-app',\n  storageBucket: 'mepop-app.appspot.com',\n  messagingSenderId: '619885550344',\n  appId: '1:619885550344:web:28a8d730b1ca91a5f6aabd',\n  measurementId: 'G-WM4LPLQMKX'\n}\n\nclass Firebase {\n  constructor () {\n    try {\n      firebase.initializeApp(firebaseConfig)\n      firebase.analytics()\n      // uncomment this if running functions in emulator\n      // if (window.location.href.includes('localhost')) {\n      //   console.log('Dev env')\n      //   firebase.functions().useFunctionsEmulator('http://localhost:4001')\n      // }\n    } catch (err) {\n      if (!/already exists/.test(err.message)) {\n        console.error('Firebase initialization error', err.message)\n      }\n    }\n\n    this.auth = firebase.auth()\n    this.storage = firebase.storage()\n    this.db = firebase.firestore()\n    this.functions = firebase.functions()\n  }\n\n  // Get api Keys from firestore\n  retreiveGoogleMapsKey () {\n    // getGoogleMapsKey(this.db)\n    const docRef = this.db.collection('keys').doc('googleMaps')\n    return docRef.get().then(function (doc) {\n      if (doc.exists) {\n        return { error: null, data: doc.data() }\n      } else {\n        window.alert('Unknown Error Occurred')\n      }\n    }).catch(function (error) {\n      return { error, data: null }\n    })\n  }\n  // Stripe\n\n  handleStripeClients () {\n    // creates stripe client if doesn't exist (This handles people moving over from legacy app but who already have accounts)\n    return this.db.collection('stripeClients').doc(this.auth.currentUser.uid).get()\n      .then((doc) => {\n        if (!doc.exists) {\n          return this.createStripeClient()\n        }\n      })\n  }\n\n  createStripeClient () {\n    const createStripeClientFunction = firebase.functions().httpsCallable('createStripeClient')\n    const { email, uid } = this.auth.currentUser\n    createStripeClientFunction({ email, uid }).then(() => {\n      console.log('Create Stripe Client')\n    })\n  }\n\n  // profiles\n  handleProfile (userAndMembership) {\n    return this.db.collection('profiles').doc(this.auth.currentUser.uid).get().then((doc) => {\n      this.handleStripeClients()\n      if (!doc.exists) {\n        this.setProfile().then((newDoc) => {\n          // creates new profile if it doesn't exist (only on first login/signup ever)\n\n          return { ...userAndMembership, profile: newDoc }\n        })\n      } else {\n        return { ...userAndMembership, profile: doc.data() }\n      }\n    })\n  }\n\n  setProfile (incomingDoc, uid) {\n    const initialDoc = {\n      firstName: '',\n      lastName: '',\n      depopShopName: '',\n      hasSignedIn: false,\n      email: this.auth.currentUser ? this.auth.currentUser.email : ''\n    }\n    return this.db.collection('profiles').doc(uid || this.auth.currentUser.uid).set(incomingDoc || initialDoc).then(() => {\n      return incomingDoc || initialDoc\n    }).catch(() => alert('Error Occurred Creating Profile'))\n  }\n\n  // memberships\n  handleMembership (user) {\n    return this.db.collection('memberships').doc(this.auth.currentUser.uid).get().then((doc) => {\n      if (!doc.exists) {\n        this.setMembership().then((newDoc) => {\n          // creates new membership if it doesn't exist (only on first login/signup ever)\n          return this.handleProfile({ user, membership: newDoc }).then((newUserObject) => {\n            return newUserObject\n          })\n        })\n      } else {\n        return this.handleProfile({ user, membership: doc.data() }).then((newUserObject) => {\n          return newUserObject\n        })\n      }\n    })\n  }\n\n  setMembership (incomingDoc) {\n    const newDoc = { type: 'basic', paymentInfo: {} }\n    return this.db.collection('memberships').doc(this.auth.currentUser.uid).set(incomingDoc || newDoc).then(() => {\n      return incomingDoc || newDoc\n    }).catch(() => window.alert('Error Occurred Creating Membership'))\n  }\n\n  // auth\n  doCreateUser ({ password, ...form }) {\n    return this.auth.createUserWithEmailAndPassword(form.email, password)\n      .then(({ user }) => {\n        return this.setProfile(form, user.uid)\n      })\n  }\n\n  doGetCurrentUser () {\n    return this.auth\n  }\n\n  doSignIn (email, password) {\n    return this.auth.signInWithEmailAndPassword(email, password)\n      .then(({ user }) => {\n        return this.handleMembership(user)\n      })\n  }\n\n  doSignOut () { this.auth.signOut() }\n\n  doPasswordReset (email) {\n    return this.auth.sendPasswordResetEmail(email)\n  }\n\n  doPasswordUpdate (passwords) {\n    return this.auth.signInWithEmailAndPassword(this.auth.currentUser.email, passwords.oldPassword)\n      .then(({ user }) => {\n        return this.auth.currentUser.updatePassword(passwords.newPassword)\n      })\n  }\n\n  // files\n  getUserFiles (resolve) {\n    getFileMethod(this.auth, this.storage, resolve)\n  }\n\n  deleteFile (filename, fetchFiles) {\n    deleteFileMethod(this.auth, this.storage, filename, fetchFiles)\n  }\n\n  uploadFiles (files, fetchFiles, err) {\n    uploadFilesMethod(this.auth, this.storage, files, fetchFiles, err)\n  }\n}\n\nexport default Firebase\nexport { FirebaseContext, withFirebase }\n"]},"metadata":{},"sourceType":"module"}