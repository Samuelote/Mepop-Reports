{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/VariableLineGraph/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { memo, useMemo, useState } from 'react';\nimport moment from 'moment';\nimport LineChart from '../../../styles/reporting/LineChart';\nimport { groupByDate } from '../util/grouping';\nimport Flex from '../../../styles/layout/Flex';\nimport Button from '../../../styles/elements/Button';\nvar VariableLineChart = memo(_c = _s(function (_ref) {\n  _s();\n\n  var data = _ref.data;\n\n  var _useState = useState([{\n    dataKey: 'Items Sold',\n    size: 70,\n    color: 'teal',\n    disabled: false\n  }, {\n    dataKey: 'Gross',\n    size: 70,\n    color: 'pastelPurple',\n    disabled: true\n  }, {\n    dataKey: 'Net',\n    size: 70,\n    color: 'pastelGreen',\n    disabled: true\n  }]),\n      variables = _useState[0],\n      updateVars = _useState[1];\n\n  var chartData = useMemo(function () {\n    return groupByDate(data, true);\n  }, [data]);\n\n  var handleClick = function handleClick(i) {\n    var newVars = _toConsumableArray(variables);\n\n    newVars[i].disabled = !newVars[i].disabled;\n    updateVars(newVars);\n  };\n\n  var Buttons = function Buttons() {\n    return __jsx(Flex, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }, variables.map(function (_ref2, i) {\n      var dataKey = _ref2.dataKey,\n          color = _ref2.color,\n          disabled = _ref2.disabled;\n      return __jsx(Button, {\n        key: i,\n        mr: \"4px\",\n        bg: \"mainBg\",\n        color: disabled ? 'greyDark' : color,\n        onClick: function onClick() {\n          return handleClick(i);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }\n      }, dataKey);\n    }));\n  };\n\n  return __jsx(LineChart, {\n    headerContent: __jsx(Buttons, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 22\n      }\n    }),\n    data: chartData,\n    xdataKey: \"Date Sold\",\n    lines: variables,\n    hideDot: true,\n    tickFormatter: formatXAxis,\n    labelFormatter: formatLabel,\n    formatTooltip: function formatTooltip(t, l) {\n      return _formatTooltip(t, l, data);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  });\n}, \"mOFWdFV2ZrpYV/yhxjFdGAn7PG8=\"));\n_c2 = VariableLineChart;\nexport default VariableLineChart;\n\nvar formatXAxis = function formatXAxis(tickItem) {\n  return moment(tickItem, 'MM/DD/YYYY').format('M/D');\n};\n\nvar formatLabel = function formatLabel(tickItem) {\n  return moment(tickItem, 'MM/DD/YYYY').format('MMM Do YYYY');\n};\n\nvar _formatTooltip = function _formatTooltip(value, name, props) {\n  if (name !== 'Items Sold') {\n    var num = value.toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n    return \"$\".concat(num);\n  }\n\n  return value;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"VariableLineChart$memo\");\n$RefreshReg$(_c2, \"VariableLineChart\");","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/VariableLineGraph/index.js"],"names":["memo","useMemo","useState","moment","LineChart","groupByDate","Flex","Button","VariableLineChart","data","dataKey","size","color","disabled","variables","updateVars","chartData","handleClick","i","newVars","Buttons","map","formatXAxis","formatLabel","t","l","formatTooltip","tickItem","format","value","name","props","num","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits"],"mappings":";;;;;;;;AAAA,SAASA,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,SAAP,MAAsB,qCAAtB;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,IAAP,MAAiB,6BAAjB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AAEA,IAAMC,iBAAiB,GAAGR,IAAI,SAAC,gBAAc;AAAA;;AAAA,MAAXS,IAAW,QAAXA,IAAW;;AAAA,kBACXP,QAAQ,CAAC,CACvC;AAAEQ,IAAAA,OAAO,EAAE,YAAX;AAAyBC,IAAAA,IAAI,EAAE,EAA/B;AAAmCC,IAAAA,KAAK,EAAE,MAA1C;AAAkDC,IAAAA,QAAQ,EAAE;AAA5D,GADuC,EAEvC;AAAEH,IAAAA,OAAO,EAAE,OAAX;AAAoBC,IAAAA,IAAI,EAAE,EAA1B;AAA8BC,IAAAA,KAAK,EAAE,cAArC;AAAqDC,IAAAA,QAAQ,EAAE;AAA/D,GAFuC,EAGvC;AAAEH,IAAAA,OAAO,EAAE,KAAX;AAAkBC,IAAAA,IAAI,EAAE,EAAxB;AAA4BC,IAAAA,KAAK,EAAE,aAAnC;AAAkDC,IAAAA,QAAQ,EAAE;AAA5D,GAHuC,CAAD,CADG;AAAA,MACpCC,SADoC;AAAA,MACzBC,UADyB;;AAM3C,MAAMC,SAAS,GAAGf,OAAO,CAAC;AAAA,WAAMI,WAAW,CAACI,IAAD,EAAO,IAAP,CAAjB;AAAA,GAAD,EAAgC,CAACA,IAAD,CAAhC,CAAzB;;AACA,MAAMQ,WAAW,GAAG,SAAdA,WAAc,CAAAC,CAAC,EAAI;AACvB,QAAMC,OAAO,sBAAOL,SAAP,CAAb;;AACAK,IAAAA,OAAO,CAACD,CAAD,CAAP,CAAWL,QAAX,GAAsB,CAACM,OAAO,CAACD,CAAD,CAAP,CAAWL,QAAlC;AACAE,IAAAA,UAAU,CAACI,OAAD,CAAV;AACD,GAJD;;AAKA,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,WACd,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEIN,SAAS,CAACO,GAAV,CAAc,iBAA+BH,CAA/B;AAAA,UAAGR,OAAH,SAAGA,OAAH;AAAA,UAAYE,KAAZ,SAAYA,KAAZ;AAAA,UAAmBC,QAAnB,SAAmBA,QAAnB;AAAA,aACZ,MAAC,MAAD;AACE,QAAA,GAAG,EAAEK,CADP;AAEE,QAAA,EAAE,EAAC,KAFL;AAGE,QAAA,EAAE,EAAC,QAHL;AAIE,QAAA,KAAK,EAAEL,QAAQ,GAAG,UAAH,GAAgBD,KAJjC;AAKE,QAAA,OAAO,EAAE;AAAA,iBAAMK,WAAW,CAACC,CAAD,CAAjB;AAAA,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGR,OAPH,CADY;AAAA,KAAd,CAFJ,CADc;AAAA,GAAhB;;AAkBA,SACE,MAAC,SAAD;AACE,IAAA,aAAa,EAAE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADjB;AAEE,IAAA,IAAI,EAAEM,SAFR;AAGE,IAAA,QAAQ,EAAC,WAHX;AAIE,IAAA,KAAK,EAAEF,SAJT;AAKE,IAAA,OAAO,MALT;AAME,IAAA,aAAa,EAAEQ,WANjB;AAOE,IAAA,cAAc,EAAEC,WAPlB;AAQE,IAAA,aAAa,EAAE,uBAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUC,cAAa,CAACF,CAAD,EAAIC,CAAJ,EAAOhB,IAAP,CAAvB;AAAA,KARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAYD,CA1C6B,kCAA9B;MAAMD,iB;AA4CN,eAAgBA,iBAAhB;;AAEA,IAAMc,WAAW,GAAG,SAAdA,WAAc,CAACK,QAAD,EAAc;AAAE,SAAOxB,MAAM,CAACwB,QAAD,EAAW,YAAX,CAAN,CAA+BC,MAA/B,CAAsC,KAAtC,CAAP;AAAqD,CAAzF;;AACA,IAAML,WAAW,GAAG,SAAdA,WAAc,CAACI,QAAD,EAAc;AAAE,SAAOxB,MAAM,CAACwB,QAAD,EAAW,YAAX,CAAN,CAA+BC,MAA/B,CAAsC,aAAtC,CAAP;AAA6D,CAAjG;;AAEA,IAAMF,cAAa,GAAG,SAAhBA,cAAgB,CAACG,KAAD,EAAQC,IAAR,EAAcC,KAAd,EAAwB;AAC5C,MAAID,IAAI,KAAK,YAAb,EAA2B;AACzB,QAAME,GAAG,GAAGH,KAAK,CAACI,cAAN,CAAqBC,SAArB,EAAgC;AAC1CC,MAAAA,qBAAqB,EAAE,CADmB;AAE1CC,MAAAA,qBAAqB,EAAE;AAFmB,KAAhC,CAAZ;AAIA,sBAAWJ,GAAX;AACD;;AACD,SAAOH,KAAP;AACD,CATD","sourcesContent":["import { memo, useMemo, useState } from 'react'\nimport moment from 'moment'\n\nimport LineChart from '../../../styles/reporting/LineChart'\n\nimport { groupByDate } from '../util/grouping'\nimport Flex from '../../../styles/layout/Flex'\nimport Button from '../../../styles/elements/Button'\n\nconst VariableLineChart = memo(({ data }) => {\n  const [variables, updateVars] = useState([\n    { dataKey: 'Items Sold', size: 70, color: 'teal', disabled: false },\n    { dataKey: 'Gross', size: 70, color: 'pastelPurple', disabled: true },\n    { dataKey: 'Net', size: 70, color: 'pastelGreen', disabled: true }\n  ])\n  const chartData = useMemo(() => groupByDate(data, true), [data])\n  const handleClick = i => {\n    const newVars = [...variables]\n    newVars[i].disabled = !newVars[i].disabled\n    updateVars(newVars)\n  }\n  const Buttons = () => (\n    <Flex>\n      {\n        variables.map(({ dataKey, color, disabled }, i) => (\n          <Button\n            key={i}\n            mr='4px'\n            bg='mainBg'\n            color={disabled ? 'greyDark' : color}\n            onClick={() => handleClick(i)}\n          >\n            {dataKey}\n          </Button>\n        ))\n      }\n\n    </Flex>\n  )\n  return (\n    <LineChart\n      headerContent={<Buttons />}\n      data={chartData}\n      xdataKey='Date Sold'\n      lines={variables}\n      hideDot\n      tickFormatter={formatXAxis}\n      labelFormatter={formatLabel}\n      formatTooltip={(t, l) => formatTooltip(t, l, data)}\n    />\n  )\n})\n\nexport default (VariableLineChart)\n\nconst formatXAxis = (tickItem) => { return moment(tickItem, 'MM/DD/YYYY').format('M/D') }\nconst formatLabel = (tickItem) => { return moment(tickItem, 'MM/DD/YYYY').format('MMM Do YYYY') }\n\nconst formatTooltip = (value, name, props) => {\n  if (name !== 'Items Sold') {\n    const num = value.toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    })\n    return `$${num}`\n  }\n  return value\n}\n"]},"metadata":{},"sourceType":"module"}