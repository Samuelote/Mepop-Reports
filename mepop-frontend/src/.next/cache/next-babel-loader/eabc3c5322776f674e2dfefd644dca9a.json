{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, memo } from 'react';\nimport _ from 'lodash';\nimport { useSelector } from 'react-redux';\nimport GoogleMapReact from 'google-map-react';\nimport styled from 'styled-components';\nimport Card from '../../../styles/elements/Card';\nimport Tooltip from '../../../styles/elements/Tooltip';\nimport SalesTable from '../../general/SalesTable';\nimport SaleDetails from '../../general/SaleDetails';\nimport Flex from '../../../styles/layout/Flex';\nimport { getGeopoints } from '../util/geopoints';\nconst SalesMap = memo(({\n  data,\n  styles,\n  isBasic\n}) => {\n  const {\n    0: salesToMap,\n    1: setSalesToMap\n  } = useState([]);\n  const {\n    0: salesToShow,\n    1: setSalesToShow\n  } = useState({});\n  const {\n    0: activeSale,\n    1: activateSale\n  } = useState(null);\n  const {\n    googleMapsKey\n  } = useSelector(state => state.generalReducer);\n  const {\n    0: geocodes,\n    1: setGeocodes\n  } = useState([]);\n  useEffect(() => {\n    getGeopoints(data, res => {\n      setGeocodes(res);\n    });\n  }, [data]);\n  useEffect(() => {\n    return setSalesToMap(_.values(geocodes));\n  }, [geocodes]);\n  if (!googleMapsKey) return null;\n  return __jsx(Card, {\n    headerContent: \"Map of Sales (US only)\",\n    proOnly: isBasic ? {\n      component: 'Map of Sales (US only)',\n      img: 'sales-map.png'\n    } : null,\n    height: \"350px\"\n  }, __jsx(Flex, {\n    width: [1, 1, 1, 1]\n  }, __jsx(MapContainer, {\n    mini: salesToShow.sales\n  }, __jsx(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: googleMapsKey.key\n    },\n    defaultCenter: {\n      lat: 39,\n      lng: -98\n    },\n    defaultZoom: 0,\n    yesIWantToUseGoogleMapApiInternals: true,\n    gestureHandling: \"cooperative\",\n    options: {\n      gestureHandling: 'cooperative'\n    },\n    minWidth: \"500px\"\n  }, salesToMap.length ? salesToMap.map((zip, i) => {\n    const {\n      geopoint: {\n        lat,\n        lng\n      }\n    } = zip;\n    if (getTitle(zip).includes('undefined')) return null; // this weeds out other countries\n\n    return __jsx(Marker, {\n      setSalesToShow: setSalesToShow,\n      activateSale: activateSale,\n      zip: zip,\n      key: i,\n      lat: lat,\n      lng: lng\n    });\n  }) : null)), salesToShow.sales && !activeSale ? __jsx(SalesTable, {\n    boxShadow: \"none\",\n    m: \"0\",\n    minWidth: \"50%\",\n    data: salesToShow,\n    currencyType: data.currency_type,\n    headerContent: getTitle(salesToShow),\n    handleRowClick: (row, i) => {\n      activateSale(row.rowData);\n    },\n    onClose: () => setSalesToShow({})\n  }) : activeSale ? __jsx(SaleDetails, {\n    chartHeight: 200,\n    currencyType: data.currency_type,\n    boxShadow: \"none\",\n    m: \"0\",\n    minWidth: \"50%\",\n    onClose: () => activateSale(null),\n    row: activeSale,\n    getUrl: data.getUrl\n  }) : null));\n});\nexport default SalesMap;\nconst Marker = memo(({\n  zip,\n  setSalesToShow,\n  activateSale\n}) => {\n  return __jsx(Tooltip, {\n    offset: 40,\n    title: getTitle(zip),\n    hideOnClick: false\n  }, __jsx(I, {\n    className: \"fa fa-map-marker\",\n    onClick: () => {\n      activateSale(null);\n      setSalesToShow(zip);\n    }\n  }));\n}); // utils\n\nfunction getTitle({\n  location,\n  sales\n}) {\n  const title = `${location.city}, ${location.state} ${location.zip} - ${sales.length}`;\n  return title;\n}\n\nconst MapContainer = styled.div.withConfig({\n  displayName: \"SalesMap__MapContainer\",\n  componentId: \"g1nti4-0\"\n})([\"visibility:visible;height:320px;width:100%;background:'black';transition:.2s;display:flex;\"]);\nconst I = styled.i.withConfig({\n  displayName: \"SalesMap__I\",\n  componentId: \"g1nti4-1\"\n})([\"font-size:25px;cursor:pointer;color:\", \";&:hover{color:\", \"}\"], ({\n  theme\n}) => theme.colors.pastelRose, ({\n  theme\n}) => theme.colors.red);","map":null,"metadata":{},"sourceType":"module"}