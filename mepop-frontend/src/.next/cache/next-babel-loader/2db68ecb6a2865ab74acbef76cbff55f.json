{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { BarChart, Bar, XAxis, Tooltip, ResponsiveContainer, Cell, Legend } from 'recharts';\nimport Card from '../../elements/Card';\nimport theme from '../../../theme';\nimport { ChartWrap } from '../styleUtil';\n\nconst Barchart = (_ref) => {\n  let {\n    data,\n    xdataKey,\n    tickFormatter,\n    labelFormatter,\n    formatTooltip,\n    disableAnimation,\n    bars = [],\n    hideLegend\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"data\", \"xdataKey\", \"tickFormatter\", \"labelFormatter\", \"formatTooltip\", \"disableAnimation\", \"bars\", \"hideLegend\"]);\n\n  return __jsx(Card, props, __jsx(ChartWrap, {\n    height: 400\n  }, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\"\n  }, __jsx(BarChart, {\n    data: data\n  }, __jsx(XAxis, {\n    dataKey: xdataKey,\n    tickFormatter: tickFormatter\n  }), __jsx(Tooltip, {\n    labelFormatter: labelFormatter,\n    formatter: formatTooltip\n  }), !hideLegend ? __jsx(Legend, {\n    verticalAlign: \"top\",\n    iconType: \"circle\"\n  }) : null, bars.map(({\n    size,\n    dataKey,\n    color\n  }, i) => {\n    return __jsx(Bar, {\n      isAnimationActive: typeof disableAnimation !== 'boolean',\n      key: i,\n      barSize: size,\n      dataKey: dataKey,\n      type: \"monotone\",\n      fill: theme.colors[color] || theme.colors.primary\n    });\n  })))));\n};\n\nexport default Barchart;","map":null,"metadata":{},"sourceType":"module"}