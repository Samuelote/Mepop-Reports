{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport currency from 'currency.js';\nimport theme from '../../../theme';\nexport const groupByDay = data => {\n  const groupedData = {\n    Sun: {\n      sales: 0,\n      listings: 0\n    },\n    Mon: {\n      sales: 0,\n      listings: 0\n    },\n    Tue: {\n      sales: 0,\n      listings: 0\n    },\n    Wed: {\n      sales: 0,\n      listings: 0\n    },\n    Thu: {\n      sales: 0,\n      listings: 0\n    },\n    Fri: {\n      sales: 0,\n      listings: 0\n    },\n    Sat: {\n      sales: 0,\n      listings: 0\n    }\n  };\n  const newData = [];\n\n  if (data.sales) {\n    // groups data\n    data.sales.forEach(file => {\n      const saleDay = moment(file.date_of_sale, 'MM/DD/YYYY').format('ddd');\n      const listingDay = moment(file.date_of_listing, 'MM/DD/YYYY').format('ddd');\n      groupedData[listingDay].listings++;\n      groupedData[saleDay].sales++;\n    }); // sets up data in recharts format\n\n    Object.keys(groupedData).forEach(key => {\n      newData.push({\n        Day: key,\n        'Items Sold': groupedData[key].sales,\n        'Items Listed': groupedData[key].listings\n      });\n    });\n  }\n\n  return newData;\n};\nexport const groupByDate = (data, showEmptyDates) => {\n  const newData = [];\n\n  if (data.sales) {\n    data.sales.forEach(({\n      date_of_sale,\n      total,\n      buyer_shipping_cost,\n      usps_cost\n    }) => {\n      const gross = currency(total).value;\n      const net = gross - currency(buyer_shipping_cost).value - currency(usps_cost).value;\n      const latest = newData[newData.length - 1];\n\n      if (!newData.length || latest['Date Sold'] !== date_of_sale) {\n        if (latest && showEmptyDates) {\n          const milisecs = new Date(moment(date_of_sale, 'MM-DD-YYYY').format()).getTime() - new Date(moment(latest['Date Sold'], 'MM-DD-YYYY').format()).getTime();\n          const diff = milisecs / (1000 * 3600 * 24);\n\n          if (diff !== 1) {\n            for (let i = 1; i < diff; i++) {\n              const day = new Date(moment(latest['Date Sold'], 'MM-DD-YYYY').format()).getDate() + i;\n              const date = new Date(moment(latest['Date Sold'], 'MM-DD-YYYY').format());\n              const formatted = moment(date.setDate(day)).format('MM-DD-YYYY');\n              newData.push({\n                'Date Sold': formatted,\n                'Items Sold': 0,\n                Gross: 0,\n                Net: 0\n              });\n            }\n          }\n        }\n\n        newData.push({\n          'Date Sold': date_of_sale,\n          'Items Sold': 1,\n          Gross: gross,\n          Net: net\n        });\n      } else {\n        latest['Items Sold'] += 1;\n        latest.Net += net;\n        latest.Gross += gross;\n      }\n    });\n  }\n\n  return newData;\n};\nexport const groupByTime = data => {\n  // const groupedData = {}\n  const newData = [[], [], [], [], [], [], []].fill(0).map(() => new Array(24).fill(0));\n  const obj = {\n    sun: [],\n    mon: [],\n    tue: [],\n    wed: [],\n    thu: [],\n    fri: [],\n    sat: []\n  };\n\n  if (data.sales) {\n    // groups data\n    data.sales.forEach(sale => {\n      const hourIndex = moment(sale.time_of_sale, 'hh:mm A').format('H');\n      const day = moment(sale.date_of_sale).format('ddd').toLowerCase();\n\n      if (obj[day][hourIndex]) {\n        obj[day][hourIndex].push(sale);\n      } else obj[day][hourIndex] = [sale]; // obj[day].push(sale)\n\n\n      switch (day) {\n        case 'sun':\n          {\n            newData[0][hourIndex] += 1;\n            break;\n          }\n\n        case 'mon':\n          {\n            newData[1][hourIndex] += 1;\n            break;\n          }\n\n        case 'tue':\n          {\n            newData[2][hourIndex] += 1;\n            break;\n          }\n\n        case 'wed':\n          {\n            newData[3][hourIndex] += 1;\n            break;\n          }\n\n        case 'thu':\n          {\n            newData[4][hourIndex] += 1;\n            break;\n          }\n\n        case 'fri':\n          {\n            newData[5][hourIndex] += 1;\n            break;\n          }\n\n        case 'sat':\n          {\n            newData[6][hourIndex] += 1;\n            break;\n          }\n      }\n    });\n  }\n\n  return {\n    arr: newData,\n    obj\n  };\n};\nexport const groupByCategory = (data, gross) => {\n  const newData = [];\n  const allCategories = {};\n\n  if (data.sales) {\n    data.sales.forEach(({\n      category,\n      total\n    }) => {\n      const totalNum = currency(total).value;\n\n      if (allCategories[category]) {\n        allCategories[category].sold += 1;\n        allCategories[category].gross += totalNum;\n      } else allCategories[category] = {\n        sold: 1,\n        gross: totalNum\n      };\n    });\n  }\n\n  Object.keys(allCategories).forEach(key => {\n    newData.push({\n      Category: capitalize(key),\n      'Items Sold': allCategories[key].sold,\n      'Gross Earnings': allCategories[key].gross\n    });\n  });\n  newData.sort((a, b) => {\n    return b['Items Sold'] - a['Items Sold'];\n  });\n  return newData.slice(0, 15);\n};\nexport const groupByPaymentType = data => {\n  const newData = [];\n  const paymentTypes = {};\n\n  if (data.sales) {\n    data.sales.forEach(({\n      payment_type,\n      total\n    }) => {\n      const totalNum = currency(total).value;\n\n      if (paymentTypes[payment_type]) {\n        paymentTypes[payment_type].sold += 1;\n        paymentTypes[payment_type].gross += totalNum;\n      } else paymentTypes[payment_type] = {\n        sold: 1,\n        gross: totalNum\n      };\n    });\n  }\n\n  const colors = [theme.colors.pastelOrange, theme.colors.pastelRose, theme.colors.primary, theme.colors.pastelBlueLight];\n  Object.keys(paymentTypes).forEach((key, i) => {\n    newData.push({\n      name: key === 'STRIPE' ? 'BANK ACCOUNT' : key,\n      sold: paymentTypes[key].sold,\n      gross: paymentTypes[key].gross,\n      color: colors[i]\n    });\n  });\n  return newData;\n};\nexport const groupByWeek = (data, showEmptyDates) => {\n  const newData = [];\n  const obj = {};\n\n  if (data.sales) {\n    data.sales.forEach(({\n      date_of_sale,\n      total,\n      buyer_shipping_cost,\n      usps_cost\n    }) => {\n      const {\n        week,\n        month\n      } = getDateInfo(date_of_sale);\n      const currentWeek = `${month} - Wk${week}`;\n      if (!obj[currentWeek]) obj[currentWeek] = {\n        Gross: 0,\n        Net: 0\n      };\n      const gross = currency(total).value;\n      const net = gross - currency(buyer_shipping_cost).value - currency(usps_cost).value;\n      obj[currentWeek].Gross += gross;\n      obj[currentWeek].Net += net;\n    });\n    Object.keys(obj).forEach(key => {\n      newData.push(_objectSpread({\n        week: key\n      }, obj[key]));\n    });\n  }\n\n  return newData;\n};\n\nfunction getDateInfo(date) {\n  const month = moment(date).format('MMM YYYY');\n  var nthOfMonth = Math.ceil(moment(date).date() / 7);\n  if (nthOfMonth >= 5) return {\n    week: 4,\n    month\n  };else return {\n    week: nthOfMonth,\n    month\n  };\n}\n\nfunction capitalize(str) {\n  str = str.split(' ');\n\n  for (let i = 0; i < str.length; i++) {\n    str[i] = str[i][0].toUpperCase() + str[i].substr(1);\n  }\n\n  return str.join(' ');\n}","map":null,"metadata":{},"sourceType":"module"}