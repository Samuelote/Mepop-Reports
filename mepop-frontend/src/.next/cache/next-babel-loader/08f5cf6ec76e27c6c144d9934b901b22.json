{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport FirebaseContext, { withFirebase } from './context';\nimport { getFileMethod, deleteFileMethod, uploadFilesMethod } from './methods/files';\nvar firebaseConfig = {\n  apiKey: 'AIzaSyB04NiM6bapVV6Jd2ZRw5vUVLy3Cu7o0x0',\n  authDomain: 'mepop-app.firebaseapp.com',\n  databaseURL: 'https://mepop-app.firebaseio.com',\n  projectId: 'mepop-app',\n  storageBucket: 'mepop-app.appspot.com',\n  messagingSenderId: '619885550344',\n  appId: '1:619885550344:web:28a8d730b1ca91a5f6aabd',\n  measurementId: 'G-WM4LPLQMKX'\n};\n\nvar Firebase = /*#__PURE__*/function () {\n  function Firebase() {\n    _classCallCheck(this, Firebase);\n\n    try {\n      firebase.initializeApp(firebaseConfig);\n      firebase.analytics(); // uncomment this if running functions in emulator\n      // if (window.location.href.includes('localhost')) {\n      //   console.log('Dev env')\n      //   firebase.functions().useFunctionsEmulator('http://localhost:4001')\n      // }\n    } catch (err) {\n      if (!/already exists/.test(err.message)) {\n        console.error('Firebase initialization error', err.message);\n      }\n    }\n\n    this.auth = firebase.auth();\n    this.storage = firebase.storage();\n    this.db = firebase.firestore();\n    this.functions = firebase.functions();\n  } // Get api Keys from firestore\n\n\n  _createClass(Firebase, [{\n    key: \"retreiveGoogleMapsKey\",\n    value: function retreiveGoogleMapsKey() {\n      // getGoogleMapsKey(this.db)\n      var docRef = this.db.collection('keys').doc('googleMaps');\n      return docRef.get().then(function (doc) {\n        if (doc.exists) {\n          return {\n            error: null,\n            data: doc.data()\n          };\n        } else {\n          window.alert('Unknown Error Occurred');\n        }\n      })[\"catch\"](function (error) {\n        return {\n          error: error,\n          data: null\n        };\n      });\n    } // Stripe\n\n  }, {\n    key: \"handleStripeClients\",\n    value: function handleStripeClients() {\n      var _this = this;\n\n      // creates stripe client if doesn't exist (This handles people moving over from legacy app but who already have accounts)\n      return this.db.collection('stripeClients').doc(this.auth.currentUser.uid).get().then(function (doc) {\n        if (!doc.exists) {\n          return _this.createStripeClient();\n        }\n      });\n    }\n  }, {\n    key: \"createStripeClient\",\n    value: function createStripeClient() {\n      var createStripeClientFunction = firebase.functions().httpsCallable('createStripeClient');\n      var _this$auth$currentUse = this.auth.currentUser,\n          email = _this$auth$currentUse.email,\n          uid = _this$auth$currentUse.uid;\n      createStripeClientFunction({\n        email: email,\n        uid: uid\n      }).then(function () {\n        console.log('Create Stripe Client');\n      });\n    } // profiles\n\n  }, {\n    key: \"handleProfile\",\n    value: function handleProfile(userAndMembership) {\n      var _this2 = this;\n\n      return this.db.collection('profiles').doc(this.auth.currentUser.uid).get().then(function (doc) {\n        _this2.handleStripeClients();\n\n        if (!doc.exists) {\n          _this2.setProfile().then(function (newDoc) {\n            // creates new profile if it doesn't exist (only on first login/signup ever)\n            return _objectSpread(_objectSpread({}, userAndMembership), {}, {\n              profile: newDoc\n            });\n          });\n        } else {\n          return _objectSpread(_objectSpread({}, userAndMembership), {}, {\n            profile: doc.data()\n          });\n        }\n      });\n    }\n  }, {\n    key: \"setProfile\",\n    value: function setProfile(incomingDoc, uid) {\n      var initialDoc = {\n        firstName: '',\n        lastName: '',\n        depopShopName: '',\n        hasSignedIn: false,\n        email: this.auth.currentUser ? this.auth.currentUser.email : ''\n      };\n      return this.db.collection('profiles').doc(uid || this.auth.currentUser.uid).set(incomingDoc || initialDoc).then(function () {\n        return incomingDoc || initialDoc;\n      })[\"catch\"](function () {\n        return alert('Error Occurred Creating Profile');\n      });\n    } // memberships\n\n  }, {\n    key: \"handleMembership\",\n    value: function handleMembership(user) {\n      var _this3 = this;\n\n      return this.db.collection('memberships').doc(this.auth.currentUser.uid).get().then(function (doc) {\n        if (!doc.exists) {\n          _this3.setMembership().then(function (newDoc) {\n            // creates new membership if it doesn't exist (only on first login/signup ever)\n            return _this3.handleProfile({\n              user: user,\n              membership: newDoc\n            }).then(function (newUserObject) {\n              return newUserObject;\n            });\n          });\n        } else {\n          return _this3.handleProfile({\n            user: user,\n            membership: doc.data()\n          }).then(function (newUserObject) {\n            return newUserObject;\n          });\n        }\n      });\n    }\n  }, {\n    key: \"setMembership\",\n    value: function setMembership(incomingDoc) {\n      var newDoc = {\n        type: 'basic',\n        paymentInfo: {}\n      };\n      return this.db.collection('memberships').doc(this.auth.currentUser.uid).set(incomingDoc || newDoc).then(function () {\n        return incomingDoc || newDoc;\n      })[\"catch\"](function () {\n        return window.alert('Error Occurred Creating Membership');\n      });\n    } // auth\n\n  }, {\n    key: \"doCreateUser\",\n    value: function doCreateUser(_ref) {\n      var _this4 = this;\n\n      var password = _ref.password,\n          form = _objectWithoutProperties(_ref, [\"password\"]);\n\n      return this.auth.createUserWithEmailAndPassword(form.email, password).then(function (_ref2) {\n        var user = _ref2.user;\n        return _this4.setProfile(form, user.uid);\n      });\n    }\n  }, {\n    key: \"doGetCurrentUser\",\n    value: function doGetCurrentUser() {\n      return this.auth;\n    }\n  }, {\n    key: \"doSignIn\",\n    value: function doSignIn(email, password) {\n      var _this5 = this;\n\n      return this.auth.signInWithEmailAndPassword(email, password).then(function (_ref3) {\n        var user = _ref3.user;\n        return _this5.handleMembership(user);\n      });\n    }\n  }, {\n    key: \"doSignOut\",\n    value: function doSignOut() {\n      this.auth.signOut();\n    }\n  }, {\n    key: \"doPasswordReset\",\n    value: function doPasswordReset(email) {\n      return this.auth.sendPasswordResetEmail(email);\n    }\n  }, {\n    key: \"doPasswordUpdate\",\n    value: function doPasswordUpdate(passwords) {\n      var _this6 = this;\n\n      return this.auth.signInWithEmailAndPassword(this.auth.currentUser.email, passwords.oldPassword).then(function (_ref4) {\n        var user = _ref4.user;\n        return _this6.auth.currentUser.updatePassword(passwords.newPassword);\n      });\n    } // files\n\n  }, {\n    key: \"getUserFiles\",\n    value: function getUserFiles(resolve) {\n      getFileMethod(this.auth, this.storage, resolve);\n    }\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(filename, fetchFiles) {\n      deleteFileMethod(this.auth, this.storage, filename, fetchFiles);\n    }\n  }, {\n    key: \"uploadFiles\",\n    value: function uploadFiles(files, fetchFiles, err) {\n      uploadFilesMethod(this.auth, this.storage, files, fetchFiles, err);\n    }\n  }]);\n\n  return Firebase;\n}();\n\nexport default Firebase;\nexport { FirebaseContext, withFirebase };","map":null,"metadata":{},"sourceType":"module"}