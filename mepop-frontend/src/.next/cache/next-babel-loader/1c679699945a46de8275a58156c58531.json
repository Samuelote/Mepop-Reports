{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/dashboard/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n// styles\nimport Flex from '../../styles/layout/Flex';\nimport ValueBox from '../../styles/reporting/ValueBox';\nimport TotalEarnings from '../../styles/reporting/TotalEarnings'; // components\n\nimport ProfitsByMonth from './ProfitsByMonth';\nimport SaleTable from './SaleTable'; // custom containers\n\nimport { ValueContainer, GraphContainer } from './styles';\nimport { useSelector } from 'react-redux'; // utils\n\nimport { getAvgProfits, bestTimeToList, avgItemsPerDay } from './util';\n\nvar Dashboard = function Dashboard(props) {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.generalReducer;\n  }),\n      allData = _useSelector.allData;\n\n  var data = allData;\n  if (!data) return null;\n  var avgNetProfit = getAvgProfits(data);\n  var whenToList = bestTimeToList(data);\n  var itemsSoldPerDay = avgItemsPerDay(data);\n  return __jsx(Flex, {\n    justifyContent: \"space-between\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    bg: \"mainBg\",\n    width: [1],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    width: [1],\n    flexDirection: \"column\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, __jsx(ValueContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, __jsx(ValueBox, {\n    minWidth: \"167px\" // for mobile. Should change\n    ,\n    title: \"Average Net Profit\",\n    value: avgNetProfit.weekly,\n    value2: avgNetProfit.monthly,\n    \"float\": true,\n    hideCompare: true,\n    currencyType: \"$\",\n    label1: \"Weekly\",\n    label2: \"Monthly\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }), __jsx(ValueBox, {\n    title: \"Hottest Days\",\n    value: whenToList.list.join(', '),\n    value2: whenToList.sell.join(', '),\n    string: true,\n    hideCompare: true,\n    label1: \"To List\",\n    label2: \"To Sell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), __jsx(ValueBox, {\n    title: \"Avg. Items Sold Per Day\",\n    value: itemsSoldPerDay,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  })), __jsx(GraphContainer, {\n    m: \"0px\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    borderRadius: \"0px\",\n    flexWrap: \"wrap\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(TotalEarnings, {\n    boxShadow: \"none\",\n    borderRadius: \"0px\",\n    \"float\": true,\n    currencyType: \"$\",\n    title: \"Total Earnings\",\n    value: data.total_earnings,\n    netValue: (data.total_earnings - data.total_shipping_cost - data.depop_fees).toFixed(2),\n    data: [{\n      name: 'Net Earnings',\n      value: parseFloat(data.total_earnings - data.total_shipping_cost - data.depop_fees)\n    }, {\n      name: 'Depop Fees',\n      value: parseFloat(data.depop_fees)\n    }, {\n      name: 'Paypal Fees',\n      value: parseFloat(data.paypal_fees)\n    }, {\n      name: 'Total Shipping',\n      value: parseFloat(data.total_shipping_cost)\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }), __jsx(ProfitsByMonth, {\n    data: data,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  })), __jsx(SaleTable, {\n    data: data,\n    getUrl: data.getUrl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(Dashboard, \"D7qUFSTQuDg81+Oa6zkAr2hP8l4=\", false, function () {\n  return [useSelector];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/dashboard/index.js"],"names":["Flex","ValueBox","TotalEarnings","ProfitsByMonth","SaleTable","ValueContainer","GraphContainer","useSelector","getAvgProfits","bestTimeToList","avgItemsPerDay","Dashboard","props","state","generalReducer","allData","data","avgNetProfit","whenToList","itemsSoldPerDay","weekly","monthly","list","join","sell","total_earnings","total_shipping_cost","depop_fees","toFixed","name","value","parseFloat","paypal_fees","getUrl"],"mappings":"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","sourcesContent":["\n// styles\nimport Flex from '../../styles/layout/Flex'\nimport ValueBox from '../../styles/reporting/ValueBox'\nimport TotalEarnings from '../../styles/reporting/TotalEarnings'\n\n// components\nimport ProfitsByMonth from './ProfitsByMonth'\nimport SaleTable from './SaleTable'\n// custom containers\nimport { ValueContainer, GraphContainer } from './styles'\nimport { useSelector } from 'react-redux'\n\n// utils\nimport { getAvgProfits, bestTimeToList, avgItemsPerDay } from './util'\n\nconst Dashboard = (props) => {\n  const { allData } = useSelector(state => state.generalReducer)\n  const data = allData\n\n  if (!data) return null\n\n  const avgNetProfit = getAvgProfits(data)\n  const whenToList = bestTimeToList(data)\n  const itemsSoldPerDay = avgItemsPerDay(data)\n\n  return (\n    <Flex justifyContent='space-between' flexWrap='wrap' alignItems='center' bg='mainBg' width={[1]}>\n      <Flex width={[1]} flexDirection='column'>\n        <ValueContainer>\n\n          <ValueBox\n            minWidth='167px' // for mobile. Should change\n            title='Average Net Profit'\n            value={avgNetProfit.weekly}\n            value2={avgNetProfit.monthly}\n            float\n            hideCompare\n            currencyType='$'\n            label1='Weekly'\n            label2='Monthly'\n          />\n          <ValueBox\n            title='Hottest Days'\n            value={whenToList.list.join(', ')}\n            value2={whenToList.sell.join(', ')}\n            string\n            hideCompare\n            label1='To List'\n            label2='To Sell'\n          />\n          <ValueBox\n            title='Avg. Items Sold Per Day'\n            value={itemsSoldPerDay}\n          />\n        </ValueContainer>\n        <GraphContainer\n          m='0px'\n          justifyContent='space-around'\n          alignItems='center'\n          flexDirection='row'\n          borderRadius='0px'\n          flexWrap='wrap'\n        >\n          <TotalEarnings\n            boxShadow='none'\n            borderRadius='0px'\n            float\n            currencyType='$'\n            title='Total Earnings'\n            value={data.total_earnings}\n            netValue={\n              (data.total_earnings - data.total_shipping_cost - data.depop_fees).toFixed(2)\n            }\n            data={[\n              {\n                name: 'Net Earnings',\n                value: parseFloat(data.total_earnings - data.total_shipping_cost - data.depop_fees)\n              },\n              { name: 'Depop Fees', value: parseFloat(data.depop_fees) },\n              { name: 'Paypal Fees', value: parseFloat(data.paypal_fees) },\n              { name: 'Total Shipping', value: parseFloat(data.total_shipping_cost) }\n            ]}\n          />\n          <ProfitsByMonth data={data} />\n        </GraphContainer>\n        <SaleTable data={data} getUrl={data.getUrl} />\n      </Flex>\n\n    </Flex>\n  )\n}\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}