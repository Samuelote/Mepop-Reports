{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { PieChart, Pie, Cell, ResponsiveContainer } from 'recharts';\nimport Card from '../../elements/Card';\nimport Flex from '../../layout/Flex';\nimport styled from 'styled-components';\n\nconst Piechart = (_ref) => {\n  let {\n    data,\n    dataKey,\n    disableAnimation\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"data\", \"dataKey\", \"disableAnimation\"]);\n\n  return __jsx(Card, _extends({}, props, {\n    width: [1]\n  }), __jsx(ChartContainer, null, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\"\n  }, __jsx(PieChart, null, __jsx(Pie, {\n    data: data,\n    labelLine: false,\n    label: renderCustomizedLabel,\n    outerRadius: 120,\n    innerRadius: 10,\n    dataKey: dataKey,\n    isAnimationActive: typeof disableAnimation !== 'boolean'\n  }, data.map((entry, index) => __jsx(Cell, {\n    key: `cell-${index}`,\n    fill: entry.color\n  })))))));\n};\n\nexport default Piechart;\nconst RADIAN = Math.PI / 180;\n\nconst renderCustomizedLabel = ({\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n  return __jsx(\"text\", {\n    x: x,\n    y: y,\n    fill: \"white\",\n    textAnchor: x > cx ? 'start' : 'end',\n    dominantBaseline: \"central\"\n  }, `${(percent * 100).toFixed(0)}%`);\n};\n\nconst ChartContainer = styled(Flex).withConfig({\n  displayName: \"PieChart__ChartContainer\",\n  componentId: \"ighccz-0\"\n})([\"display:flex;height:260px;width:100%;\"]);","map":null,"metadata":{},"sourceType":"module"}