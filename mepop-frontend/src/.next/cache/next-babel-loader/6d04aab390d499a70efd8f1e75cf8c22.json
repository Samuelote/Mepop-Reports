{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Flex } from 'rebass';\nimport SelectInput from 'react-dropdown-select';\nimport { Select as RebassSelect } from '@rebass/forms';\nimport Box from '../../layout/Box';\nimport Label from '../Form/Label';\nimport styled from 'styled-components';\n\nconst Select = (_ref) => {\n  let {\n    options,\n    labelField = 'label',\n    valueField = 'value',\n    onChange,\n    rebass,\n    label,\n    selectProps = {\n      style: {}\n    }\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"options\", \"labelField\", \"valueField\", \"onChange\", \"rebass\", \"label\", \"selectProps\"]);\n\n  return __jsx(React.Fragment, null, rebass ? __jsx(Box, null, label ? __jsx(Label, {\n    label: label,\n    fontWeight: 500 // color={!labelIsShown ? 'transparent' : null}\n\n  }) : null, __jsx(StyledSelect, _extends({}, props, {\n    onChange: onChange\n  }), options.map((opt, key) => __jsx(\"option\", {\n    key: key,\n    value: JSON.stringify({\n      value: opt[valueField],\n      label: opt[labelField]\n    })\n  }, opt[labelField])))) : __jsx(Flex, props, __jsx(SelectInput, _extends({\n    options: options,\n    onChange: onChange\n  }, selectProps, {\n    style: _objectSpread(_objectSpread({}, selectProps.style), {}, {\n      fontWeight: 500,\n      fontSize: '15px',\n      minWidth: '50px'\n    })\n  }))));\n};\n\nexport default Select;\nconst StyledSelect = styled(RebassSelect).withConfig({\n  displayName: \"Select__StyledSelect\",\n  componentId: \"at60a0-0\"\n})([\"border-radius:\", \";border-color:\", \" !important;color:\", \" !important;\"], ({\n  theme\n}) => theme.borderRadius.normal, ({\n  theme\n}) => theme.colors.greyDisabled, ({\n  theme\n}) => theme.colors.primary);","map":null,"metadata":{},"sourceType":"module"}