{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport Link from 'next/link';\nimport Flex from '../styles/layout/Flex';\nimport DateRangePicker from '../styles/elements/DateRangePicker';\nimport Select from '../styles/elements/Select';\nimport { getRangedData } from '../dataProcessing/utils';\nimport { UPDATE_RANGED_DATA, UPDATE_COMPARE_DATA } from '../store/generalReducer';\nimport Text from '../styles/elements/Text';\nimport Spinner from '../styles/elements/Loading/Spinner';\nimport Tooltip from '../styles/elements/Tooltip';\n\nvar DateContainer = function DateContainer(_ref) {\n  var page = _ref.page;\n\n  var _useSelector = useSelector(function (state) {\n    return state.generalReducer;\n  }),\n      allData = _useSelector.allData,\n      loading = _useSelector.loading,\n      user = _useSelector.user;\n\n  var fixedFullRange = page === 'Dashboard';\n  var dispatch = useDispatch();\n  var min = useMemo(function () {\n    return allData.sales ? allData.sales[0].date_of_sale : null;\n  }, [allData]);\n  var max = useMemo(function () {\n    return allData.sales ? allData.sales[allData.sales.length - 1].date_of_sale : null;\n  }, [allData]);\n\n  var _useState = useState({\n    startDate: min,\n    endDate: max\n  }),\n      dateRange = _useState[0],\n      setDates = _useState[1]; // stored in MM-DD-YYYY format\n\n\n  var _useState2 = useState({\n    startDate: min,\n    endDate: max\n  }),\n      compareDateRange = _useState2[0],\n      setCompareDates = _useState2[1]; // stored in MM-DD-YYYY format\n\n\n  var _useState3 = useState({\n    label: 'Full Range',\n    value: 'full'\n  }),\n      preset = _useState3[0],\n      setPreset = _useState3[1];\n\n  var _useState4 = useState({\n    label: 'Full Range',\n    value: 'full'\n  }),\n      comparePreset = _useState4[0],\n      setComparePreset = _useState4[1];\n\n  var _useState5 = useState(false),\n      showCompareDate = _useState5[0],\n      toggleCompare = _useState5[1];\n\n  var _useState6 = useState(false),\n      isLoading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var isBasic = user.membership.type === 'basic';\n  useEffect(function () {\n    if (dateRange.startDate === null || dateRange.endDate === null) {\n      setPreset({\n        label: 'Full Range',\n        value: 'full'\n      });\n      setDates({\n        startDate: min,\n        endDate: max\n      });\n    } else if (dateRange.startDate && dateRange.endDate) {\n      if (!moment(dateRange.startDate).isSame(min) && !moment(dateRange.endDate).isSame(max)) {\n        setPreset({\n          label: 'Full Range',\n          value: 'full'\n        });\n        setDates({\n          startDate: min,\n          endDate: max\n        });\n      }\n    }\n  }, [min, max]);\n  useEffect(function () {\n    setTimeout(function () {\n      if (allData.sales && dateRange.startDate && dateRange.endDate) {\n        var rangedData = getRangedData(allData, {\n          startDate: dateRange.startDate,\n          endDate: dateRange.endDate\n        });\n        dispatch({\n          type: UPDATE_RANGED_DATA,\n          payload: rangedData\n        });\n      }\n    });\n  }, [allData, dateRange]);\n  useEffect(function () {\n    setLoading(true);\n    setTimeout(function () {\n      if (allData.sales && compareDateRange.startDate && compareDateRange.endDate) {\n        var rangedData = getRangedData(allData, {\n          startDate: compareDateRange.startDate,\n          endDate: compareDateRange.endDate\n        }); // console.log(rangedData)\n\n        dispatch({\n          type: UPDATE_COMPARE_DATA,\n          payload: rangedData\n        });\n      }\n\n      if (!showCompareDate) {\n        dispatch({\n          type: UPDATE_COMPARE_DATA,\n          payload: {}\n        });\n      }\n\n      setLoading(false);\n    });\n  }, [allData, compareDateRange, showCompareDate]);\n  useEffect(function () {\n    var _getDatePreset = getDatePreset(preset, min, max),\n        startDate = _getDatePreset.startDate,\n        endDate = _getDatePreset.endDate;\n\n    if (startDate && endDate) {\n      setDates({\n        startDate: startDate,\n        endDate: endDate\n      });\n    }\n  }, [preset]);\n  useEffect(function () {\n    var _getDatePreset2 = getDatePreset(comparePreset, min, max),\n        startDate = _getDatePreset2.startDate,\n        endDate = _getDatePreset2.endDate;\n\n    if (startDate && endDate) {\n      setCompareDates({\n        startDate: startDate,\n        endDate: endDate\n      });\n    }\n  }, [comparePreset]);\n  if (!allData.sales) return null;\n  var btnDisabled = loading || fixedFullRange || isLoading || isBasic;\n  return __jsx(Flex, {\n    alignItems: \"center\"\n  }, __jsx(Flex, {\n    flexDirection: \"column\",\n    justifyContent: \"space-between\",\n    height: showCompareDate && !fixedFullRange ? 96 : 'auto'\n  }, __jsx(Select, {\n    opacity: fixedFullRange ? 0 : 1,\n    options: options,\n    onChange: function onChange(arr) {\n      return setPreset(arr[0]);\n    },\n    selectProps: {\n      values: preset ? [preset] : [],\n      disabled: fixedFullRange,\n      searchable: false,\n      style: {\n        width: '140px',\n        fontSize: '15px'\n      },\n      separator: true\n    }\n  }), showCompareDate ? __jsx(Select, {\n    opacity: fixedFullRange ? 0 : 1,\n    options: options,\n    onChange: function onChange(arr) {\n      return setComparePreset(arr[0]);\n    },\n    selectProps: {\n      values: comparePreset ? [comparePreset] : [],\n      disabled: fixedFullRange,\n      searchable: false,\n      style: {\n        width: '140px',\n        fontSize: '15px'\n      },\n      separator: true\n    }\n  }) : null), __jsx(Flex, {\n    flexDirection: \"column\"\n  }, __jsx(DateRangePicker, {\n    startDate: dateRange.startDate ? moment(fixedFullRange ? min : dateRange.startDate) : null,\n    endDate: dateRange.endDate ? moment(fixedFullRange ? max : dateRange.endDate) : null,\n    disabled: fixedFullRange,\n    isOutsideRange: function isOutsideRange(day) {\n      console.log(day, moment(max));\n      return day.isBefore(moment(min)) || day.isAfter(moment(max));\n    },\n    enableOutsideDays: false,\n    onDatesChange: function onDatesChange(_ref2) {\n      var startDate = _ref2.startDate,\n          endDate = _ref2.endDate;\n      setPreset({\n        label: 'Custom',\n        value: null\n      });\n      setDates({\n        startDate: startDate ? startDate.format('MM-DD-YYYY') : null,\n        endDate: endDate ? endDate.format('MM-DD-YYYY') : null\n      });\n    }\n  }), showCompareDate && !fixedFullRange ? __jsx(React.Fragment, null, __jsx(Text, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    color: \"primary\",\n    fontWeight: \"100\",\n    fontSize: \"15px\"\n  }, \"vs.\"), __jsx(DateRangePicker, {\n    startDate: compareDateRange.startDate ? moment(fixedFullRange ? min : compareDateRange.startDate) : null,\n    endDate: compareDateRange.endDate ? moment(fixedFullRange ? max : compareDateRange.endDate) : null,\n    disabled: fixedFullRange,\n    isOutsideRange: function isOutsideRange(day) {\n      return day.isBefore(min) || day.isAfter(max);\n    },\n    onDatesChange: function onDatesChange(_ref3) {\n      var startDate = _ref3.startDate,\n          endDate = _ref3.endDate;\n      setComparePreset({\n        label: 'Custom',\n        value: null\n      });\n      setCompareDates({\n        startDate: startDate ? startDate.format('MM-DD-YYYY') : null,\n        endDate: endDate ? endDate.format('MM-DD-YYYY') : null\n      });\n    }\n  })) : null), __jsx(Tooltip, {\n    disabled: !isBasic,\n    html: __jsx(TooltipContent, null),\n    interactive: true,\n    interactiveBorder: 100\n  }, __jsx(AddBtn, {\n    isFixedFullRange: fixedFullRange,\n    onClick: function onClick() {\n      if (btnDisabled) return;\n      toggleCompare(!showCompareDate);\n    },\n    disabled: btnDisabled\n  }, fixedFullRange ? null : loading || isLoading ? __jsx(Spinner, {\n    width: \"2em\",\n    size: 3\n  }) : __jsx(\"i\", {\n    className: showCompareDate ? 'fa fa-minus-circle' : 'fa fa-plus-circle'\n  }))));\n};\n\nexport default DateContainer;\n\nvar TooltipContent = function TooltipContent() {\n  return __jsx(\"div\", null, \"You must \", __jsx(Link, {\n    href: \"/settings/membership\"\n  }, __jsx(Span, {\n    title: \"/membership\"\n  }, \"upgrade\")), \" to compare date ranges\");\n};\n\nvar Span = styled.span.withConfig({\n  displayName: \"DateContainer__Span\",\n  componentId: \"sc-3ofmch-0\"\n})([\"color:white;cursor:pointer;border-bottom:1px solid white;&:hover{opacity:.7;}\"]);\nvar AddBtn = styled.span.withConfig({\n  displayName: \"DateContainer__AddBtn\",\n  componentId: \"sc-3ofmch-1\"\n})([\"color:\", \";background:none;border:none;cursor:\", \";font-size:20px;margin-top:3px;transition:\", \";height:50px;width:60px;display:flex;align-items:center;border-left:1px solid \", \";justify-content:center;&:hover{color:\", \";}\"], function (_ref4) {\n  var theme = _ref4.theme;\n  return theme.colors.greyLight;\n}, function (_ref5) {\n  var disabled = _ref5.disabled;\n  return disabled ? 'not-allowed' : 'pointer';\n}, function (_ref6) {\n  var theme = _ref6.theme;\n  return theme.transitionDurations[1];\n}, function (_ref7) {\n  var theme = _ref7.theme,\n      isFixedFullRange = _ref7.isFixedFullRange;\n  return isFixedFullRange ? 'transparent' : theme.colors.mainBg;\n}, function (_ref8) {\n  var theme = _ref8.theme,\n      disabled = _ref8.disabled;\n  return !disabled ? theme.colors.primary : null;\n});\nvar options = [{\n  label: 'Full Range',\n  value: 'full'\n}, {\n  label: 'This Month',\n  value: 'this_month'\n}, {\n  label: 'Last Month',\n  value: 'last_month'\n}, {\n  label: 'Past 3 Months',\n  value: 'past_three_months'\n}];\n\nvar getDatePreset = function getDatePreset(preset, min, max) {\n  switch (preset.value) {\n    case 'full':\n      {\n        return {\n          startDate: min,\n          endDate: max\n        };\n      }\n\n    case 'this_month':\n      {\n        var newStart = moment(moment().startOf('month')).format('MM-DD-YYYY');\n        var newEnd = moment(moment().endOf('month')).format('MM-DD-YYYY');\n        return {\n          startDate: newStart,\n          endDate: new Date(newEnd) <= new Date(max) ? newEnd : max\n        };\n      }\n\n    case 'last_month':\n      {\n        var _newStart = moment(moment().subtract(1, 'months').startOf('month')).format('MM-DD-YYYY');\n\n        var _newEnd = moment(moment().subtract(1, 'months').endOf('month')).format('MM-DD-YYYY');\n\n        return {\n          startDate: _newStart,\n          endDate: new Date(_newEnd) <= new Date(max) ? _newEnd : max\n        };\n      }\n\n    case 'past_three_months':\n      {\n        var _newStart2 = moment(moment().subtract(3, 'months')).format('MM-DD-YYYY');\n\n        return {\n          startDate: _newStart2,\n          endDate: max\n        };\n      }\n\n    default:\n      {\n        return {};\n      }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}