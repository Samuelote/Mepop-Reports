{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport moment from 'moment';\nimport currency from 'currency.js';\nexport var formatSalesTable = function formatSalesTable(_ref, currencyType) {\n  var sales = _ref.sales,\n      currency_type = _ref.currency_type;\n  var newSales = [];\n  sales.forEach(function (sale) {\n    var ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime();\n    var days = ms / (1000 * 3600 * 24);\n    newSales.push(_objectSpread(_objectSpread({}, sale), {}, {\n      'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n      buyer: \"\".concat(sale.name),\n      username: \"\".concat(sale.buyer),\n      'item price': sale.item_price,\n      'buyer-paid shipping': sale.buyer_shipping_cost,\n      'seller-paid shipping': sale.usps_cost,\n      'depop fees': \"\".concat(currency_type || currencyType).concat(currency(sale.depop_fee).value + currency(sale.depop_payments_fee).value),\n      'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n      'days listed': days,\n      // converts from ms to days\n      'item description': formatDescription(sale.description),\n      address: \"\".concat(sale.address_line_1, \" \").concat(sale.city, \", \").concat(sale.state ? sale.state : '', \" \").concat(sale.post_code)\n    }));\n  });\n  return sort(newSales);\n};\nexport var getRecentSales = function getRecentSales(_ref2, currencyType) {\n  var sales = _ref2.sales,\n      currency_type = _ref2.currency_type;\n  var sortedSales = sort(sales, 'date_of_sale');\n  var newSales = [];\n  var mostRecentDate = sortedSales[0].date_of_sale;\n  var scndMostRecentDate = moment(mostRecentDate).subtract(1, 'days').format('MM-DD-YYYY');\n  sortedSales.forEach(function (sale) {\n    if (sale.date_of_sale === mostRecentDate || sale.date_of_sale === scndMostRecentDate || newSales.length < 15) {\n      var ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime();\n      var days = ms / (1000 * 3600 * 24);\n      newSales.push(_objectSpread(_objectSpread({}, sale), {}, {\n        'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n        buyer: \"\".concat(sale.name),\n        username: \"\".concat(sale.buyer),\n        'item price': sale.item_price,\n        'buyer-paid shipping': sale.buyer_shipping_cost,\n        'seller-paid shipping': sale.usps_cost,\n        'depop fees': \"\".concat(currency_type || currencyType).concat(currency(sale.depop_fee).value + currency(sale.depop_payments_fee).value),\n        'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n        'days listed': days,\n        // converts from ms to days\n        'item description': formatDescription(sale.description),\n        address: \"\".concat(sale.address_line_1, \" \").concat(sale.city, \", \").concat(sale.state ? sale.state : '', \" \").concat(sale.post_code)\n      }));\n    }\n  });\n  return newSales;\n}; // utils\n\nvar sort = function sort(sales, term) {\n  return _toConsumableArray(sales).sort(function (a, b) {\n    var date1 = new Date(a[term || 'date sold']);\n    var date2 = new Date(b[term || 'date sold']);\n    return date2 - date1;\n  });\n};\n\nvar formatDescription = function formatDescription(text) {\n  var tagStart = text.lastIndexOf('{');\n  var withoutTags = tagStart !== -1 ? text.substring(0, tagStart) : text;\n  return withoutTags;\n};","map":null,"metadata":{},"sourceType":"module"}