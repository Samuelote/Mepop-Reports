{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport CountUp from 'react-countup';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Sector } from 'recharts';\nimport Switch from '../../elements/Switch';\nimport theme from '../../../theme';\nimport { Container, ChartContainer, TitleContainer, BoxTitle, SwitchContainer, BoxValue } from './styles';\nconst COLORS = [theme.colors.pastelOrange, theme.colors.pastelRose, theme.colors.greenSoft, theme.colors.pastelBlueLight];\n\nconst RadialGraph = (_ref) => {\n  let {\n    title,\n    value = 0,\n    currencyType,\n    float,\n    data,\n    disableAnimation,\n    netValue\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"title\", \"value\", \"currencyType\", \"float\", \"data\", \"disableAnimation\", \"netValue\"]);\n\n  const {\n    0: index,\n    1: setIndex\n  } = useState(0);\n  const {\n    0: net,\n    1: setNet\n  } = useState(false);\n  const {\n    0: activeVal,\n    1: setActiveVal\n  } = useState(value);\n  useEffect(() => {\n    setActiveVal(value);\n  }, [value]);\n  return __jsx(Container, _extends({\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\"\n  }, rest), title ? __jsx(TitleContainer, null, __jsx(BoxTitle, null, title.toUpperCase()), __jsx(SwitchContainer, null, __jsx(Switch, {\n    label: \"Show Net Profit\",\n    checked: net,\n    onChange: () => {\n      setNet(!net);\n      setActiveVal(value === activeVal ? netValue : value);\n    }\n  })), __jsx(BoxValue, null, currencyType, __jsx(CountUp, {\n    formattingFn: num => num.toLocaleString(undefined, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }),\n    decimals: float ? 2 : 0,\n    start: activeVal === value ? parseFloat(netValue) : parseFloat(value),\n    end: float ? parseFloat(activeVal) : typeof activeVal === 'number' ? activeVal : 0\n  }))) : null, __jsx(ChartContainer, null, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\"\n  }, __jsx(PieChart, null, __jsx(Pie, {\n    activeIndex: index,\n    activeShape: props => __jsx(ActiveShape, _extends({}, props, {\n      currency: currencyType\n    })),\n    data: data,\n    innerRadius: 60,\n    outerRadius: 80,\n    paddingAngle: 5,\n    dataKey: \"value\",\n    isAnimationActive: typeof disableAnimation !== 'boolean',\n    onMouseEnter: (_, i) => setIndex(i)\n  }, data.map((_, index) => __jsx(Cell, {\n    key: `cell-${index}`,\n    fill: COLORS[index % COLORS.length]\n  })))))));\n};\n\nexport default RadialGraph;\n\nconst ActiveShape = props => {\n  const {\n    cx,\n    cy,\n    innerRadius,\n    outerRadius,\n    startAngle,\n    endAngle,\n    fill,\n    payload,\n    currency\n  } = props;\n  const value = payload.value.toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n  return __jsx(\"g\", null, __jsx(\"text\", {\n    x: cx,\n    y: cy - 10,\n    dy: 8,\n    textAnchor: \"middle\",\n    fill: fill\n  }, payload.name), __jsx(\"text\", {\n    x: cx,\n    y: cy + 10,\n    dy: 8,\n    textAnchor: \"middle\",\n    fill: fill\n  }, currency, value), __jsx(Sector, {\n    cx: cx,\n    cy: cy,\n    innerRadius: innerRadius + 5,\n    outerRadius: outerRadius + 5,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    fill: fill\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}