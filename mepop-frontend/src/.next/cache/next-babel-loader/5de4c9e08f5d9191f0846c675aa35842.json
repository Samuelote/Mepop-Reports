{"ast":null,"code":"import geocodes from '../../../assets/geocodes.json';\nexport const getGeopoints = (allSales, resolve) => {\n  if (!allSales) return;\n  const geocodeRequests = []; // holds addresses that need to be updated\n\n  const newDocObjs = {}; // holds all updated data which will be sent to state\n\n  allSales.sales.forEach((doc, i) => {\n    const sale = allSales.sales[i];\n    const zip = sale.post_code.trim();\n    geocodeRequests.push(zip);\n    newDocObjs[zip] = {\n      sales: newDocObjs[zip] ? [...newDocObjs[zip].sales, allSales.sales[i]] : [allSales.sales[i]],\n      geopoint: {\n        lat: 0,\n        lng: 0\n      },\n      location: {}\n    };\n  });\n\n  if (geocodeRequests.length) {\n    // finds geocode in JSON obj\n    for (let i = 0; i < geocodeRequests.length; i++) {\n      const zip = geocodeRequests[i];\n\n      for (let j = 0; j < geocodes.length; j++) {\n        if (zip === geocodes[j].fields.zip) {\n          newDocObjs[zip].geopoint = {\n            lat: geocodes[j].fields.latitude,\n            lng: geocodes[j].fields.longitude\n          };\n          newDocObjs[zip].location = {\n            city: geocodes[j].fields.city,\n            state: geocodes[j].fields.state,\n            zip: geocodes[j].fields.zip,\n            timezone: geocodes[j].fields.timezone\n          };\n          continue;\n        }\n      }\n    }\n  }\n\n  resolve(newDocObjs);\n};","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/util/geopoints.js"],"names":["geocodes","getGeopoints","allSales","resolve","geocodeRequests","newDocObjs","sales","forEach","doc","i","sale","zip","post_code","trim","push","geopoint","lat","lng","location","length","j","fields","latitude","longitude","city","state","timezone"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,+BAArB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjD,MAAI,CAACD,QAAL,EAAe;AACf,QAAME,eAAe,GAAG,EAAxB,CAFiD,CAEtB;;AAC3B,QAAMC,UAAU,GAAG,EAAnB,CAHiD,CAG3B;;AAEtBH,EAAAA,QAAQ,CAACI,KAAT,CAAeC,OAAf,CAAuB,CAACC,GAAD,EAAMC,CAAN,KAAY;AACjC,UAAMC,IAAI,GAAGR,QAAQ,CAACI,KAAT,CAAeG,CAAf,CAAb;AACA,UAAME,GAAG,GAAGD,IAAI,CAACE,SAAL,CAAeC,IAAf,EAAZ;AAEAT,IAAAA,eAAe,CAACU,IAAhB,CAAqBH,GAArB;AAEAN,IAAAA,UAAU,CAACM,GAAD,CAAV,GAAkB;AAChBL,MAAAA,KAAK,EAAED,UAAU,CAACM,GAAD,CAAV,GAAkB,CAAC,GAAGN,UAAU,CAACM,GAAD,CAAV,CAAgBL,KAApB,EAA2BJ,QAAQ,CAACI,KAAT,CAAeG,CAAf,CAA3B,CAAlB,GAAkE,CAACP,QAAQ,CAACI,KAAT,CAAeG,CAAf,CAAD,CADzD;AAEhBM,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAE,CAAP;AAAUC,QAAAA,GAAG,EAAE;AAAf,OAFM;AAGhBC,MAAAA,QAAQ,EAAE;AAHM,KAAlB;AAKD,GAXD;;AAYA,MAAId,eAAe,CAACe,MAApB,EAA4B;AAC1B;AACA,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,eAAe,CAACe,MAApC,EAA4CV,CAAC,EAA7C,EAAiD;AAC/C,YAAME,GAAG,GAAGP,eAAe,CAACK,CAAD,CAA3B;;AACA,WAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,QAAQ,CAACmB,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;AACxC,YAAIT,GAAG,KAAKX,QAAQ,CAACoB,CAAD,CAAR,CAAYC,MAAZ,CAAmBV,GAA/B,EAAoC;AAClCN,UAAAA,UAAU,CAACM,GAAD,CAAV,CAAgBI,QAAhB,GAA2B;AACzBC,YAAAA,GAAG,EAAEhB,QAAQ,CAACoB,CAAD,CAAR,CAAYC,MAAZ,CAAmBC,QADC;AAEzBL,YAAAA,GAAG,EAAEjB,QAAQ,CAACoB,CAAD,CAAR,CAAYC,MAAZ,CAAmBE;AAFC,WAA3B;AAKAlB,UAAAA,UAAU,CAACM,GAAD,CAAV,CAAgBO,QAAhB,GAA2B;AACzBM,YAAAA,IAAI,EAAExB,QAAQ,CAACoB,CAAD,CAAR,CAAYC,MAAZ,CAAmBG,IADA;AAEzBC,YAAAA,KAAK,EAAEzB,QAAQ,CAACoB,CAAD,CAAR,CAAYC,MAAZ,CAAmBI,KAFD;AAGzBd,YAAAA,GAAG,EAAEX,QAAQ,CAACoB,CAAD,CAAR,CAAYC,MAAZ,CAAmBV,GAHC;AAIzBe,YAAAA,QAAQ,EAAE1B,QAAQ,CAACoB,CAAD,CAAR,CAAYC,MAAZ,CAAmBK;AAJJ,WAA3B;AAMA;AACD;AACF;AACF;AACF;;AACDvB,EAAAA,OAAO,CAACE,UAAD,CAAP;AACD,CAxCM","sourcesContent":["import geocodes from '../../../assets/geocodes.json'\n\nexport const getGeopoints = (allSales, resolve) => {\n  if (!allSales) return\n  const geocodeRequests = [] // holds addresses that need to be updated\n  const newDocObjs = {} // holds all updated data which will be sent to state\n\n  allSales.sales.forEach((doc, i) => {\n    const sale = allSales.sales[i]\n    const zip = sale.post_code.trim()\n\n    geocodeRequests.push(zip)\n\n    newDocObjs[zip] = {\n      sales: newDocObjs[zip] ? [...newDocObjs[zip].sales, allSales.sales[i]] : [allSales.sales[i]],\n      geopoint: { lat: 0, lng: 0 },\n      location: {}\n    }\n  })\n  if (geocodeRequests.length) {\n    // finds geocode in JSON obj\n    for (let i = 0; i < geocodeRequests.length; i++) {\n      const zip = geocodeRequests[i]\n      for (let j = 0; j < geocodes.length; j++) {\n        if (zip === geocodes[j].fields.zip) {\n          newDocObjs[zip].geopoint = {\n            lat: geocodes[j].fields.latitude,\n            lng: geocodes[j].fields.longitude\n          }\n\n          newDocObjs[zip].location = {\n            city: geocodes[j].fields.city,\n            state: geocodes[j].fields.state,\n            zip: geocodes[j].fields.zip,\n            timezone: geocodes[j].fields.timezone\n          }\n          continue\n        }\n      }\n    }\n  }\n  resolve(newDocObjs)\n}\n"]},"metadata":{},"sourceType":"module"}