{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useState, useEffect } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport Button from '../../../styles/elements/Button';\nimport Flex from '../../../styles/layout/Flex';\nimport Input from '../../../styles/elements/Input';\nexport const InputField = (_ref) => {\n  let {\n    onClick,\n    user,\n    defaultValue,\n    label,\n    btnText\n  } = _ref,\n      inputProps = _objectWithoutProperties(_ref, [\"onClick\", \"user\", \"defaultValue\", \"label\", \"btnText\"]);\n\n  const {\n    0: btnIsOpen,\n    1: openBtn\n  } = useState(false);\n  const {\n    0: value,\n    1: setValue\n  } = useState(defaultValue);\n  return __jsx(Flex, {\n    alignItems: \"flex-end\",\n    width: [1]\n  }, __jsx(Button, {\n    bg: \"greyLightest\",\n    color: \"primary\",\n    p: \"10px\",\n    pr: \"8px\",\n    mr: \"10px\",\n    mb: \"10px\",\n    width: !btnIsOpen ? '50px' : '100px',\n    onClick: () => {\n      if (btnIsOpen && value !== defaultValue) {\n        onClick(value);\n      }\n\n      openBtn(!btnIsOpen);\n    }\n  }, !btnIsOpen ? __jsx(\"i\", {\n    className: \"fa fa-edit\"\n  }) : __jsx(FadeIn, null, btnText)), __jsx(Input, _extends({\n    width: [1],\n    mb: \"4px\",\n    pl: !inputProps.disabled ? '0px' : null,\n    label: label,\n    value: value,\n    onKeyPress: ({\n      key\n    }) => {\n      if (key === 'Enter') {\n        if (value !== defaultValue) {\n          onClick(value);\n          openBtn(!btnIsOpen);\n        }\n      }\n    },\n    defaultValue: defaultValue,\n    onChange: e => {\n      setValue(e.target.value);\n      if (!btnIsOpen) openBtn(true);\n\n      if (e.target.value === defaultValue) {\n        openBtn(false);\n      }\n    }\n  }, inputProps)));\n};\nexport const PasswordFields = (_ref2) => {\n  let {\n    onClick,\n    user,\n    btnText,\n    passwordSuccess,\n    isLoading\n  } = _ref2,\n      inputProps = _objectWithoutProperties(_ref2, [\"onClick\", \"user\", \"btnText\", \"passwordSuccess\", \"isLoading\"]);\n\n  const {\n    0: btnIsOpen,\n    1: openBtn\n  } = useState(false);\n  const {\n    0: passwords,\n    1: setPasswords\n  } = useState({\n    newPassword: '',\n    oldPassword: ''\n  });\n  useEffect(() => {\n    if (passwordSuccess && btnIsOpen) {\n      openBtn(false);\n    }\n  });\n\n  const onKeyPress = ({\n    key\n  }) => {\n    if (key === 'Enter') {\n      if (passwords.newPassword && passwords.oldPassword) {\n        onClick(passwords);\n      }\n    }\n  };\n\n  return __jsx(Flex, {\n    alignItems: \"flex-end\",\n    flexDirection: btnIsOpen ? 'column' : 'row',\n    width: [1],\n    mt: \"10px\"\n  }, !btnIsOpen ? __jsx(Button, {\n    bg: \"greyLightest\",\n    color: \"primary\",\n    p: \"10px\",\n    pr: \"8px\",\n    mr: \"10px\",\n    mb: \"10px\",\n    width: \"50px\",\n    onClick: () => {\n      openBtn(true);\n    }\n  }, __jsx(\"i\", {\n    className: \"fa fa-edit\"\n  })) : null, __jsx(Input, _extends({\n    width: [1],\n    mb: \"4px\",\n    pl: btnIsOpen ? '0px' : null,\n    value: !btnIsOpen ? 'fakepassword' : passwords.oldPassword,\n    onKeyPress: onKeyPress,\n    disabled: !btnIsOpen,\n    hideEye: !btnIsOpen,\n    onChange: e => {\n      setPasswords(_objectSpread(_objectSpread({}, passwords), {}, {\n        oldPassword: e.target.value\n      }));\n    },\n    label: btnIsOpen ? 'Old Password' : 'Password',\n    type: \"password\"\n  }, inputProps)), btnIsOpen ? __jsx(React.Fragment, null, __jsx(Input, _extends({\n    width: [1],\n    mb: \"4px\",\n    pl: !inputProps.disabled ? '0px' : null,\n    value: passwords.newPassword,\n    onKeyPress: onKeyPress,\n    onChange: e => {\n      setPasswords(_objectSpread(_objectSpread({}, passwords), {}, {\n        newPassword: e.target.value\n      }));\n    },\n    label: \"New Password\",\n    type: \"password\"\n  }, inputProps)), __jsx(Button, {\n    bg: \"greyLightest\",\n    color: \"primary\",\n    p: \"10px\",\n    pr: \"8px\",\n    mr: \"10px\",\n    isLoading: isLoading,\n    mb: \"4px\",\n    width: \"100%\",\n    onClick: () => {\n      if (passwords.newPassword && passwords.oldPassword) {\n        onClick(passwords);\n      } else {\n        openBtn(false);\n      }\n    }\n  }, __jsx(FadeIn, null, !passwords.newPassword || !passwords.oldPassword ? 'Close' : btnText))) : null);\n};\nconst fadeIn = keyframes([\"from{opacity:0;}to{opacity:1;}\"]);\nconst FadeIn = styled.span.withConfig({\n  displayName: \"inputs__FadeIn\",\n  componentId: \"sc-1rledl8-0\"\n})([\"opacity:0;animation:.2s \", \" linear 1;animation-fill-mode:forwards;\"], fadeIn);","map":null,"metadata":{},"sourceType":"module"}