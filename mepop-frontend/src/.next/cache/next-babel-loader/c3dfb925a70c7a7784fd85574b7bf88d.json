{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { withFirebase } from '../../firebase';\nimport Link from 'next/link';\nimport Flex from '../../styles/layout/Flex';\nimport Card from '../../styles/elements/Card';\nimport Input from '../../styles/elements/Input';\nimport Form from '../../styles/elements/Form';\nimport Button from '../../styles/elements/Button';\nimport Text from '../../styles/elements/Text';\nimport HorzDivider from '../../styles/elements/HorzDivider';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { useToasts } from 'react-toast-notifications';\nconst initVals = {\n  email: '',\n  firstName: '',\n  lastName: '',\n  depopShopName: '',\n  password: ''\n};\nconst SignUp = withFirebase(({\n  firebase\n}) => {\n  const {\n    user\n  } = useSelector(state => state.generalReducer);\n  const {\n    addToast\n  } = useToasts();\n  const router = useRouter();\n  const {\n    0: form,\n    1: updateForm\n  } = useState(initVals);\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const noUser = JSON.stringify(user) === '{}';\n  useEffect(() => {\n    if (!noUser) {\n      router.push('/dashboard');\n    }\n  }, []);\n\n  const signUp = () => {\n    setError('');\n    setLoading(true);\n    firebase.doCreateUser(form).then(user => {\n      addToast(__jsx(\"div\", null, \"Successfully signed up as \", form.email, \".\"), {\n        appearance: 'success',\n        autoDismiss: true\n      });\n      router.push('/sign-in');\n    }).catch(err => {\n      setError(err.message);\n      setLoading(false);\n    });\n  };\n\n  const allFieldsVerified = () => {\n    for (const field of fields) {\n      if (!field.validate(form[field.ref])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const btnDisabled = !allFieldsVerified();\n  return __jsx(Flex, {\n    alignItems: \"center\",\n    width: [1],\n    maxWidth: \"500px\",\n    mt: \"50px\"\n  }, __jsx(Card, {\n    p: 30,\n    justifyContent: \"flex-start\",\n    width: [1]\n  }, __jsx(Text, {\n    fontSize: 30,\n    fontWeight: 600,\n    color: \"primary\",\n    width: [1],\n    mb: 2\n  }, __jsx(\"i\", null, \"Mepop Reports\")), __jsx(Text, {\n    fontSize: 18,\n    fontWeight: 500,\n    color: \"greyDark\",\n    width: [1]\n  }, \"The most popular reporting tool for Depop sellers.\"), __jsx(HorzDivider, {\n    my: \"10px\"\n  }), __jsx(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    width: [1],\n    mb: \"10px\"\n  }, __jsx(Text, {\n    fontSize: 15,\n    fontWeight: 500,\n    color: \"greyDark\",\n    mr: \"5px\"\n  }, \"Already a user?\"), __jsx(Link, {\n    href: \"sign-in\"\n  }, __jsx(Button, {\n    fontSize: \"13px\",\n    fontWeight: \"600\",\n    sx: {\n      textDecoration: 'underline'\n    },\n    justifyContent: \"flex-start\",\n    textAlign: \"left\",\n    bg: \"transparent\",\n    color: \"primary\",\n    p: \"0px\",\n    height: \"25px\",\n    type: \"button\"\n  }, \"Sign In\"))), __jsx(Flex, {\n    width: [1]\n  }, __jsx(Flex, {\n    flexDirection: \"column\",\n    width: [1]\n  }, __jsx(Form, null, __jsx(Text, {\n    fontSize: \"14px\",\n    color: \"depopRed\"\n  }, error), fields.map(({\n    label,\n    validate,\n    type,\n    ref\n  }, i) => {\n    return __jsx(Flex, {\n      mb: \"5px\",\n      key: i\n    }, __jsx(InputField, {\n      placeholder: label,\n      label: label,\n      bg: \"greyDisabled\",\n      validate: validate,\n      type: type,\n      borderRadius: \"4px\",\n      value: form[ref] // onKeyPress={e => e.key === 'Enter' ? login() : null}\n      ,\n      onChange: e => {\n        updateForm(_objectSpread(_objectSpread({}, form), {}, {\n          [ref]: e.target.value\n        }));\n      }\n    }));\n  }), __jsx(Button, {\n    m: \"2px\",\n    isLoading: isLoading,\n    type: \"button\",\n    width: [1],\n    mt: \"30px\",\n    height: \"40px\",\n    disabled: btnDisabled,\n    bg: btnDisabled ? 'greyDisabled' : null,\n    color: btnDisabled ? 'greyLight' : null,\n    onClick: signUp\n  }, \"Sign Up\"))))));\n});\nexport default SignUp; // util component and functions\n\nconst InputField = (_ref) => {\n  let {\n    validate\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"validate\"]);\n\n  const color = validate(props.value) ? 'success' : 'greyDisabled';\n  return __jsx(Flex, {\n    alignItems: \"center\",\n    width: [1]\n  }, __jsx(Input, props), __jsx(Flex, {\n    alignItems: \"flex-end\",\n    mb: \"13px\",\n    ml: \"10px\",\n    fontSize: \"25px\",\n    height: \"100%\",\n    color: color,\n    sx: {\n      transition: 'color .2s'\n    }\n  }, __jsx(\"i\", {\n    className: \"fa fa-check-circle\"\n  })));\n};\n\nconst validateEmail = email => {\n  const expression = /(?!.*\\.{2})^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i;\n  return expression.test(String(email).toLowerCase());\n};\n\nconst fields = [{\n  label: 'First Name',\n  type: 'text',\n  validate: val => val.length,\n  ref: 'firstName'\n}, {\n  label: 'Last Name',\n  type: 'text',\n  validate: val => val.length,\n  ref: 'lastName'\n}, {\n  label: 'Depop Shop Name',\n  type: 'text',\n  validate: val => val.length,\n  ref: 'depopShopName'\n}, {\n  label: 'Email',\n  type: 'text',\n  validate: validateEmail,\n  ref: 'email'\n}, {\n  label: 'Password',\n  type: 'password',\n  validate: val => val.length >= 6,\n  ref: 'password'\n}];","map":null,"metadata":{},"sourceType":"module"}