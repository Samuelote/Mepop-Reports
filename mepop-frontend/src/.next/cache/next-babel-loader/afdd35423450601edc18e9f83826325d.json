{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport currency from 'currency.js';\nexport const formatSalesTable = ({\n  sales,\n  currency_type\n}, currencyType) => {\n  const newSales = [];\n  sales.forEach(sale => {\n    const ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime();\n    const days = ms / (1000 * 3600 * 24);\n    newSales.push(_objectSpread(_objectSpread({}, sale), {}, {\n      'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n      buyer: `${sale.name}`,\n      username: `${sale.buyer}`,\n      'item price': sale.item_price,\n      'buyer-paid shipping': sale.buyer_shipping_cost,\n      'seller-paid shipping': sale.usps_cost,\n      'depop fees': `${currency_type || currencyType}${currency(sale.depop_fee).value + currency(sale.depop_payments_fee).value}`,\n      'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n      'days listed': days,\n      // converts from ms to days\n      'item description': formatDescription(sale.description),\n      address: `${sale.address_line_1} ${sale.city}, ${sale.state ? sale.state : ''} ${sale.post_code}`\n    }));\n  });\n  return sort(newSales);\n};\nexport const getRecentSales = ({\n  sales,\n  currency_type\n}, currencyType) => {\n  const sortedSales = sort(sales, 'date_of_sale');\n  const newSales = [];\n  const mostRecentDate = sortedSales[0].date_of_sale;\n  const scndMostRecentDate = moment(mostRecentDate).subtract(1, 'days').format('MM-DD-YYYY');\n  sortedSales.forEach(sale => {\n    if (sale.date_of_sale === mostRecentDate || sale.date_of_sale === scndMostRecentDate || newSales.length < 15) {\n      const ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime();\n      const days = ms / (1000 * 3600 * 24);\n      newSales.push(_objectSpread(_objectSpread({}, sale), {}, {\n        'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n        buyer: `${sale.name}`,\n        username: `${sale.buyer}`,\n        'item price': sale.item_price,\n        'buyer-paid shipping': sale.buyer_shipping_cost,\n        'seller-paid shipping': sale.usps_cost,\n        'depop fees': `${currency_type || currencyType}${currency(sale.depop_fee).value + currency(sale.depop_payments_fee).value}`,\n        'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n        'days listed': days,\n        // converts from ms to days\n        'item description': formatDescription(sale.description),\n        address: `${sale.address_line_1} ${sale.city}, ${sale.state ? sale.state : ''} ${sale.post_code}`\n      }));\n    }\n  });\n  return newSales;\n}; // utils\n\nconst sort = (sales, term) => {\n  return [...sales].sort((a, b) => {\n    const date1 = new Date(a[term || 'date sold']);\n    const date2 = new Date(b[term || 'date sold']);\n    return date2 - date1;\n  });\n};\n\nconst formatDescription = text => {\n  const tagStart = text.lastIndexOf('{');\n  const withoutTags = tagStart !== -1 ? text.substring(0, tagStart) : text;\n  return withoutTags;\n};","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/util/tables.js"],"names":["moment","currency","formatSalesTable","sales","currency_type","currencyType","newSales","forEach","sale","ms","Date","date_of_sale","getTime","date_of_listing","days","push","format","buyer","name","username","item_price","buyer_shipping_cost","usps_cost","depop_fee","value","depop_payments_fee","formatDescription","description","address","address_line_1","city","state","post_code","sort","getRecentSales","sortedSales","mostRecentDate","scndMostRecentDate","subtract","length","term","a","b","date1","date2","text","tagStart","lastIndexOf","withoutTags","substring"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport currency from 'currency.js'\n\nexport const formatSalesTable = ({ sales, currency_type }, currencyType) => {\n  const newSales = []\n  sales.forEach((sale) => {\n    const ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime()\n    const days = ms / (1000 * 3600 * 24)\n    newSales.push({\n      ...sale,\n      'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n      buyer: `${sale.name}`,\n      username: `${sale.buyer}`,\n      'item price': sale.item_price,\n      'buyer-paid shipping': sale.buyer_shipping_cost,\n      'seller-paid shipping': sale.usps_cost,\n      'depop fees': `${currency_type || currencyType}${currency(sale.depop_fee).value + currency(sale.depop_payments_fee).value}`,\n      'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n      'days listed': days, // converts from ms to days\n      'item description': formatDescription(sale.description),\n      address: `${sale.address_line_1} ${sale.city}, ${sale.state ? sale.state : ''} ${sale.post_code}`\n\n    })\n  })\n  return sort(newSales)\n}\n\nexport const getRecentSales = ({ sales, currency_type }, currencyType) => {\n  const sortedSales = sort(sales, 'date_of_sale')\n  const newSales = []\n  const mostRecentDate = sortedSales[0].date_of_sale\n  const scndMostRecentDate = moment(mostRecentDate).subtract(1, 'days').format('MM-DD-YYYY')\n  sortedSales.forEach((sale) => {\n    if (sale.date_of_sale === mostRecentDate || sale.date_of_sale === scndMostRecentDate || newSales.length < 15) {\n      const ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime()\n      const days = ms / (1000 * 3600 * 24)\n      newSales.push({\n        ...sale,\n        'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n        buyer: `${sale.name}`,\n        username: `${sale.buyer}`,\n        'item price': sale.item_price,\n        'buyer-paid shipping': sale.buyer_shipping_cost,\n        'seller-paid shipping': sale.usps_cost,\n        'depop fees': `${currency_type || currencyType}${currency(sale.depop_fee).value + currency(sale.depop_payments_fee).value}`,\n        'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n        'days listed': days, // converts from ms to days\n        'item description': formatDescription(sale.description),\n        address: `${sale.address_line_1} ${sale.city}, ${sale.state ? sale.state : ''} ${sale.post_code}`\n\n      })\n    }\n  })\n  return newSales\n}\n\n// utils\nconst sort = (sales, term) => {\n  return [...sales].sort((a, b) => {\n    const date1 = new Date(a[term || 'date sold'])\n    const date2 = new Date(b[term || 'date sold'])\n    return date2 - date1\n  })\n}\nconst formatDescription = (text) => {\n  const tagStart = text.lastIndexOf('{')\n\n  const withoutTags = tagStart !== -1 ? text.substring(0, tagStart) : text\n  return withoutTags\n}\n"]},"metadata":{},"sourceType":"module"}