{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, BarChart, Cell } from 'recharts';\nimport Card from '../../elements/Card';\nimport { ChartWrap } from '../styleUtil';\nimport theme from '../../../theme';\n\nconst VertBarChart = (_ref) => {\n  let {\n    data,\n    ydataKey,\n    xdataKey,\n    height,\n    formatTooltip,\n    disableAnimation\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"data\", \"ydataKey\", \"xdataKey\", \"height\", \"formatTooltip\", \"disableAnimation\"]);\n\n  return __jsx(Card, props, __jsx(ChartWrap, {\n    height: height\n  }, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\"\n  }, __jsx(BarChart, {\n    layout: \"vertical\",\n    data: data,\n    margin: {\n      top: 10,\n      right: 20,\n      bottom: 0,\n      left: 50\n    }\n  }, __jsx(XAxis, {\n    type: \"number\"\n  }), __jsx(YAxis, {\n    dataKey: ydataKey,\n    type: \"category\"\n  }), __jsx(Tooltip, {\n    formatter: formatTooltip\n  }), __jsx(Bar, {\n    dataKey: xdataKey,\n    isAnimationActive: typeof disableAnimation !== 'boolean'\n  }, data.map((entry, index) => {\n    const currentColor = getColor(entry, index);\n    return __jsx(Cell, {\n      key: index,\n      fill: currentColor\n    });\n  }))))));\n};\n\nexport default VertBarChart;\n\nconst getColor = (entry, index) => {\n  const i = theme.colors.pastelArray[index] ? index : index - theme.colors.pastelArray.length;\n  return theme.colors.pastelArray[i];\n};","map":null,"metadata":{},"sourceType":"module"}