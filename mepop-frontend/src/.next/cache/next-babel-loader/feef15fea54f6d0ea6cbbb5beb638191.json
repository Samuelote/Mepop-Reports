{"ast":null,"code":"import { readString } from 'react-papaparse';\nimport currency from 'currency.js';\nimport moment from 'moment';\nimport { headers } from '../assets/exampleBuyers'; // Reads CSV Content\n\nexport const processFiles = (files, setState, err) => {\n  if (!files.length) return;\n  let results = []; // Parses CSV content into arrays using readCSVString\n\n  files.forEach(file => {\n    readCSVString(file.content, res => {\n      results = [...results, ...res];\n    }, err);\n  }); // initState takes array of CSV data and formats everything for the app\n\n  return initState(results, err);\n};\n\nconst readCSVString = (CSVcontent, results, err) => {\n  if (readString(CSVcontent).errors.length) {\n    err();\n  } else {\n    results(readString(CSVcontent).data);\n  }\n}; // Initialized data format that we'll throw into our app's state\n\n\nexport const initState = (originalFiles, err) => {\n  const cleanedFiles = [...originalFiles];\n\n  for (let i = 0; i < cleanedFiles.length; i++) {\n    const row = cleanedFiles[i];\n\n    if (row.length !== 22) {\n      cleanedFiles.splice(i, 1);\n      i--;\n    }\n  }\n\n  const files = cleanAndSort(cleanedFiles);\n  const sorted = sort(files);\n  return setUpState(sorted);\n};\nexport const setUpState = (files, currencyType) => {\n  const data = {};\n  data.sales = files;\n  data.total_earnings = 0;\n  data.total_shipping_cost = 0;\n  data.depop_fees = 0;\n  data.paypal_fees = 0;\n  data.avg_price = 0;\n  data.avg_shipping = 0;\n  data.avg_total = 0;\n  data.avg_time_listed = 0;\n  data.free_shipping = 0;\n  data.currency_type = currencyType || files[0].item_price[0];\n  files.forEach(file => {\n    const miliSeconds = new Date(moment(file.date_of_sale, 'MM-DD-YYYY').format()).getTime() - new Date(moment(file.date_of_listing, 'MM-DD-YYYY').format()).getTime();\n    data.avg_price += currency(file.item_price).value;\n    data.avg_shipping += currency(file.buyer_shipping_cost).value;\n    data.avg_total += currency(file.total).value;\n    data.total_earnings += currency(file.total).value;\n    data.total_shipping_cost += currency(file.buyer_shipping_cost).value + currency(file.usps_cost).value;\n    data.depop_fees += parseFloat(currency(file.depop_fee).value) + parseFloat(currency(file.depop_payments_fee).value);\n    data.avg_time_listed += miliSeconds / (1000 * 3600 * 24);\n\n    if (currency(file.buyer_shipping_cost).value === 0) {\n      data.free_shipping++;\n    }\n\n    if (file.payment_type === 'PAYPAL') {\n      // paypal fees are 2.9% + $0.30\n      data.paypal_fees += 0.029 * currency(file.item_price).value + 0.30;\n    }\n  });\n  data.avg_time_listed = parseInt(data.avg_time_listed / files.length);\n  data.avg_price = parseFloat(data.avg_price / files.length).toFixed(2);\n  data.avg_shipping = parseFloat(data.avg_shipping / files.length).toFixed(2);\n  data.avg_total = parseFloat(data.avg_total / files.length).toFixed(2);\n  data.total_earnings = parseFloat(data.total_earnings).toFixed(2);\n  data.total_shipping_cost = parseFloat(data.total_shipping_cost).toFixed(2);\n  data.depop_fees = parseFloat(data.depop_fees).toFixed(2);\n  data.paypal_fees = parseFloat(data.paypal_fees).toFixed(2);\n\n  data.getUrl = slug => `https://www.depop.com/${slug}/`;\n\n  return data;\n}; // Util function that cleans up format and sorts our files\n\nconst cleanAndSort = originalFiles => {\n  // gets rid of header row\n  const filesToMap = originalFiles.slice().filter(row => row[0] !== headers[0]);\n  const newFiles = []; // get's rid of duplicates and converts arrays to objects\n\n  filesToMap.forEach((row, i) => {\n    const item = {}; // this loops through the first file to get headers\n\n    originalFiles[0].forEach((key, i) => {\n      const keyStr = key.toLowerCase().replace(/ /g, '_');\n\n      const val = () => {\n        if (keyStr === 'date_of_sale' || keyStr === 'date_of_listing') {\n          // converts UTC to local time\n          const utc = moment.utc(`${row[i]} ${row[1]}`, 'DD-MM-YYYY h:mm A').format();\n          return moment.utc(utc).local().format('MM-DD-YYYY');\n        } else if (keyStr === 'time_of_sale') {\n          const utc = moment.utc(`${row[0]} ${row[i]}`, 'DD-MM-YYYY h:mm A').format();\n          return moment.utc(utc).local().format('hh:mm A');\n        }\n\n        return row[i];\n      };\n\n      item[keyStr] = val();\n    });\n    const existsAlready = newFiles.find(e => JSON.stringify(e) === JSON.stringify(item));\n\n    if (!existsAlready) {\n      newFiles.push(item);\n    }\n  });\n  return newFiles;\n};\n\nconst sort = sales => {\n  // Sorts by date\n  const sorted = sales.sort((a, b) => {\n    const fullDateA = new Date(moment(`${a.date_of_sale} ${a.time_of_sale}`, 'MM-DD-YYYY hh:mm A').format());\n    const fullDateB = new Date(moment(`${b.date_of_sale} ${b.time_of_sale}`, 'MM-DD-YYYY hh:mm A').format());\n    return fullDateA - fullDateB;\n  });\n  return sorted;\n};","map":{"version":3,"sources":["/Users/samuelwood/development/test/mepop-next/src/dataProcessing/index.js"],"names":["readString","currency","moment","headers","processFiles","files","setState","err","length","results","forEach","file","readCSVString","content","res","initState","CSVcontent","errors","data","originalFiles","cleanedFiles","i","row","splice","cleanAndSort","sorted","sort","setUpState","currencyType","sales","total_earnings","total_shipping_cost","depop_fees","paypal_fees","avg_price","avg_shipping","avg_total","avg_time_listed","free_shipping","currency_type","item_price","miliSeconds","Date","date_of_sale","format","getTime","date_of_listing","value","buyer_shipping_cost","total","usps_cost","parseFloat","depop_fee","depop_payments_fee","payment_type","parseInt","toFixed","getUrl","slug","filesToMap","slice","filter","newFiles","item","key","keyStr","toLowerCase","replace","val","utc","local","existsAlready","find","e","JSON","stringify","push","a","b","fullDateA","time_of_sale","fullDateB"],"mappings":"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","sourcesContent":["\nimport { readString } from 'react-papaparse'\nimport currency from 'currency.js'\nimport moment from 'moment'\nimport { headers } from '../assets/exampleBuyers'\n\n// Reads CSV Content\nexport const processFiles = (files, setState, err) => {\n  if (!files.length) return\n  let results = []\n\n  // Parses CSV content into arrays using readCSVString\n  files.forEach((file) => {\n    readCSVString(\n      file.content,\n      (res) => { results = [...results, ...res] },\n      err\n    )\n  })\n\n  // initState takes array of CSV data and formats everything for the app\n  return initState(results, err)\n}\n\nconst readCSVString = (CSVcontent, results, err) => {\n  if (readString(CSVcontent).errors.length) {\n    err()\n  } else {\n    results(readString(CSVcontent).data)\n  }\n}\n\n// Initialized data format that we'll throw into our app's state\nexport const initState = (originalFiles, err) => {\n  const cleanedFiles = [...originalFiles]\n  for (let i = 0; i < cleanedFiles.length; i++) {\n    const row = cleanedFiles[i]\n    if (row.length !== 22) {\n      cleanedFiles.splice(i, 1)\n      i--\n    }\n  }\n\n  const files = cleanAndSort(cleanedFiles)\n  const sorted = sort(files)\n  return setUpState(sorted)\n}\nexport const setUpState = (files, currencyType) => {\n  const data = {}\n  data.sales = files\n  data.total_earnings = 0\n  data.total_shipping_cost = 0\n  data.depop_fees = 0\n  data.paypal_fees = 0\n  data.avg_price = 0\n  data.avg_shipping = 0\n  data.avg_total = 0\n  data.avg_time_listed = 0\n  data.free_shipping = 0\n  data.currency_type = currencyType || files[0].item_price[0]\n  files.forEach((file) => {\n    const miliSeconds = new Date(moment(file.date_of_sale, 'MM-DD-YYYY').format()).getTime() -\n      new Date(moment(file.date_of_listing, 'MM-DD-YYYY').format()).getTime()\n    data.avg_price += currency(file.item_price).value\n    data.avg_shipping += currency(file.buyer_shipping_cost).value\n    data.avg_total += currency(file.total).value\n    data.total_earnings += currency(file.total).value\n    data.total_shipping_cost += currency(file.buyer_shipping_cost).value + currency(file.usps_cost).value\n    data.depop_fees +=\n      parseFloat(currency(file.depop_fee).value) +\n      parseFloat(currency(file.depop_payments_fee).value)\n    data.avg_time_listed += miliSeconds / (1000 * 3600 * 24)\n    if (currency(file.buyer_shipping_cost).value === 0) {\n      data.free_shipping++\n    }\n    if (file.payment_type === 'PAYPAL') {\n      // paypal fees are 2.9% + $0.30\n      data.paypal_fees += (0.029 * currency(file.item_price).value) + 0.30\n    }\n  })\n  data.avg_time_listed = parseInt(data.avg_time_listed / files.length)\n  data.avg_price = parseFloat(data.avg_price / files.length).toFixed(2)\n  data.avg_shipping = parseFloat(data.avg_shipping / files.length).toFixed(2)\n  data.avg_total = parseFloat(data.avg_total / files.length).toFixed(2)\n  data.total_earnings = parseFloat(data.total_earnings).toFixed(2)\n  data.total_shipping_cost = parseFloat(data.total_shipping_cost).toFixed(2)\n  data.depop_fees = parseFloat(data.depop_fees).toFixed(2)\n  data.paypal_fees = parseFloat(data.paypal_fees).toFixed(2)\n  data.getUrl = slug => `https://www.depop.com/${slug}/`\n\n  return data\n}\n// Util function that cleans up format and sorts our files\nconst cleanAndSort = (originalFiles) => {\n  // gets rid of header row\n  const filesToMap = originalFiles.slice().filter(row => row[0] !== headers[0])\n  const newFiles = []\n  // get's rid of duplicates and converts arrays to objects\n  filesToMap.forEach((row, i) => {\n    const item = {}\n    // this loops through the first file to get headers\n    originalFiles[0].forEach((key, i) => {\n      const keyStr = key.toLowerCase().replace(/ /g, '_')\n      const val = () => {\n        if (keyStr === 'date_of_sale' || keyStr === 'date_of_listing') {\n          // converts UTC to local time\n          const utc = moment.utc(`${row[i]} ${row[1]}`, 'DD-MM-YYYY h:mm A').format()\n          return moment.utc(utc).local().format('MM-DD-YYYY')\n        } else if (keyStr === 'time_of_sale') {\n          const utc = moment.utc(`${row[0]} ${row[i]}`, 'DD-MM-YYYY h:mm A').format()\n          return moment.utc(utc).local().format('hh:mm A')\n        }\n        return row[i]\n      }\n\n      item[keyStr] = val()\n    })\n    const existsAlready = newFiles.find(e => JSON.stringify(e) === JSON.stringify(item))\n    if (!existsAlready) {\n      newFiles.push(item)\n    }\n  })\n  return newFiles\n}\n\nconst sort = (sales) => {\n  // Sorts by date\n  const sorted = sales.sort((a, b) => {\n    const fullDateA = new Date(\n      moment(`${a.date_of_sale} ${a.time_of_sale}`, 'MM-DD-YYYY hh:mm A').format()\n    )\n    const fullDateB = new Date(\n      moment(`${b.date_of_sale} ${b.time_of_sale}`, 'MM-DD-YYYY hh:mm A').format()\n    )\n    return fullDateA - fullDateB\n  })\n  return sorted\n}\n"]},"metadata":{},"sourceType":"module"}