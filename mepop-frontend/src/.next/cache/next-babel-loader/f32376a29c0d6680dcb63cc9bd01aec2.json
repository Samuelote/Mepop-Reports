{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport moment from 'moment';\nimport currency from 'currency.js';\nexport var getProfitsByMonth = function getProfitsByMonth(data) {\n  var months = {};\n  var monthArray = [];\n  data.sales.forEach(function (_ref) {\n    var date_of_sale = _ref.date_of_sale,\n        item_price = _ref.item_price,\n        depop_fee = _ref.depop_fee,\n        depop_payments_fee = _ref.depop_payments_fee,\n        usps_cost = _ref.usps_cost;\n    var month = moment(date_of_sale).format('MMM');\n    var date = moment(date_of_sale).format('MM/DD/yyyy');\n    var fees = cleanNumber(depop_fee) + cleanNumber(depop_payments_fee);\n    var sellerPaidShipping = cleanNumber(usps_cost);\n    var netProfit = currency(cleanNumber(item_price) - fees - sellerPaidShipping).value;\n\n    if (months[month]) {\n      months[month] = _objectSpread(_objectSpread({}, months[month]), {}, {\n        net: currency(netProfit + months[month].net).value,\n        depop_fees: currency(fees + months[month].depop_fees).value,\n        sellerPaidShipping: currency(sellerPaidShipping + months[month].sellerPaidShipping).value\n      });\n    } else {\n      months[month] = {\n        net: netProfit || 0,\n        depop_fees: fees || 0,\n        sellerPaidShipping: sellerPaidShipping || 0\n      };\n    } // sets start dates\n\n\n    if (months[month].start) {\n      var start = new Date(months[month].start);\n      var current = date;\n      if (current < start) months[month].start = date;\n    } else months[month].start = date;\n\n    if (months[month].end) {\n      var end = new Date(months[month].end);\n      var _current = date;\n      if (_current > end) months[month].end = date;\n    } else months[month].end = date;\n\n    months[month].end = date;\n  });\n  Object.keys(months).forEach(function (key) {\n    monthArray.push({\n      month: key,\n      'Net Profit': months[key].net,\n      'Depop Fees': months[key].depop_fees,\n      'Seller-Paid-Shipping': months[key].sellerPaidShipping\n    });\n  });\n  return monthArray;\n}; // Value Box 1\n\nexport var getAvgProfits = function getAvgProfits(data) {\n  var monthlyProfit = getProfitsByMonth(data);\n  var avg = 0;\n  monthlyProfit.forEach(function (data) {\n    avg += data['Net Profit'];\n  });\n  avg = avg / monthlyProfit.length;\n  return {\n    monthly: currency(avg).value,\n    weekly: currency(avg / 4).value\n  };\n}; // Value Box 2\n\nexport var bestTimeToList = function bestTimeToList(data) {\n  var obj = {\n    sell: {},\n    list: {}\n  };\n  data.sales.forEach(function (_ref2) {\n    var date_of_listing = _ref2.date_of_listing,\n        date_of_sale = _ref2.date_of_sale;\n    var listDay = moment(date_of_listing).format('dddd');\n    if (obj.list[listDay]) obj.list[listDay] += 1;else obj.list[listDay] = 1;\n    var saleDay = moment(date_of_sale).format('dddd');\n    if (obj.sell[saleDay]) obj.sell[saleDay] += 1;else obj.sell[saleDay] = 1;\n  });\n  var _final = {\n    sell: [],\n    list: []\n  };\n  var topSellCount = 0;\n  var topListCount = 0;\n  Object.keys(obj.sell).forEach(function (key) {\n    if (obj.sell[key] === topSellCount) {\n      _final.sell.push(key);\n    } else if (obj.sell[key] > topSellCount) {\n      _final.sell = [key];\n      topSellCount = obj.sell[key];\n    }\n  });\n  Object.keys(obj.list).forEach(function (key) {\n    if (obj.list[key] === topListCount) {\n      _final.list.push(key);\n    } else if (obj.list[key] > topListCount) {\n      _final.list = [key];\n      topListCount = obj.list[key];\n    }\n  });\n  return _final;\n}; // Value Box 3\n\nexport var avgItemsPerDay = function avgItemsPerDay(data) {\n  var obj = {};\n  data.sales.forEach(function (_ref3) {\n    var date_of_sale = _ref3.date_of_sale;\n\n    if (obj[date_of_sale]) {\n      obj[date_of_sale] += 1;\n    } else obj[date_of_sale] = 1;\n  });\n  var sales = data.sales.length;\n  var days = Object.keys(obj).length;\n  return sales / days;\n}; // Tables\n// export const formatSalesTable = (sales) => {\n//   const newSales = []\n//   sales.forEach((sale) => {\n//     const ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime()\n//     const days = ms / (1000 * 3600 * 24)\n//     newSales.push({\n//       ...sale,\n//       'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n//       buyer: `${sale.name}`,\n//       username: `${sale.buyer}`,\n//       'item price': sale.item_price,\n//       'buyer-paid-shipping': sale.buyer_shipping_cost,\n//       fees: sale.depop_fee,\n//       'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n//       'days listed': days, // converts from ms to days\n//       'item description': formatDescription(sale.description),\n//       address: `${sale.address_line_1} ${sale.city}, ${sale.state ? sale.state : ''} ${sale.post_code}`\n//     })\n//   })\n//   return sort(newSales)\n// }\n// utils\n// const sort = (sales) => {\n//   return sales.sort((a, b) => {\n//     const date1 = new Date(a['date sold'])\n//     const date2 = new Date(b['date listing'])\n//     return date1 - date2\n//   })\n// }\n// const formatDescription = (text) => {\n//   const tagStart = text.lastIndexOf('{')\n//   const withoutTags = tagStart !== -1 ? text.substring(0, tagStart) : text\n//   return withoutTags\n// }\n\nvar cleanNumber = function cleanNumber(num) {\n  if (!num || num === '-') return 0;\n  var withoutCurrency = num.substring(1, num.length);\n  return parseFloat(withoutCurrency);\n};","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/dashboard/util.js"],"names":["moment","currency","getProfitsByMonth","data","months","monthArray","sales","forEach","date_of_sale","item_price","depop_fee","depop_payments_fee","usps_cost","month","format","date","fees","cleanNumber","sellerPaidShipping","netProfit","value","net","depop_fees","start","Date","current","end","Object","keys","key","push","getAvgProfits","monthlyProfit","avg","length","monthly","weekly","bestTimeToList","obj","sell","list","date_of_listing","listDay","saleDay","final","topSellCount","topListCount","avgItemsPerDay","days","num","withoutCurrency","substring","parseFloat"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport currency from 'currency.js'\n\nexport const getProfitsByMonth = (data) => {\n  const months = {}\n  const monthArray = []\n  data.sales.forEach(({ date_of_sale, item_price, depop_fee, depop_payments_fee, usps_cost }) => {\n    const month = moment(date_of_sale).format('MMM')\n    const date = moment(date_of_sale).format('MM/DD/yyyy')\n\n    const fees = cleanNumber(depop_fee) + cleanNumber(depop_payments_fee)\n    const sellerPaidShipping = cleanNumber(usps_cost)\n    const netProfit = currency(cleanNumber(item_price) - fees - sellerPaidShipping).value\n\n    if (months[month]) {\n      months[month] = {\n        ...months[month],\n        net: currency(netProfit + months[month].net).value,\n        depop_fees: currency(fees + months[month].depop_fees).value,\n        sellerPaidShipping: currency(sellerPaidShipping + months[month].sellerPaidShipping).value\n      }\n    } else {\n      months[month] = {\n        net: netProfit || 0,\n        depop_fees: fees || 0,\n        sellerPaidShipping: sellerPaidShipping || 0\n      }\n    }\n\n    // sets start dates\n    if (months[month].start) {\n      const start = new Date(months[month].start)\n      const current = date\n      if (current < start) months[month].start = date\n    } else months[month].start = date\n    if (months[month].end) {\n      const end = new Date(months[month].end)\n      const current = date\n      if (current > end) months[month].end = date\n    } else months[month].end = date\n\n    months[month].end = date\n  })\n  Object.keys(months).forEach((key) => {\n    monthArray.push({\n      month: key,\n      'Net Profit': months[key].net,\n      'Depop Fees': months[key].depop_fees,\n      'Seller-Paid-Shipping': months[key].sellerPaidShipping\n    })\n  })\n  return monthArray\n}\n\n// Value Box 1\nexport const getAvgProfits = (data) => {\n  const monthlyProfit = getProfitsByMonth(data)\n  let avg = 0\n  monthlyProfit.forEach((data) => {\n    avg += data['Net Profit']\n  })\n  avg = avg / monthlyProfit.length\n  return { monthly: currency(avg).value, weekly: currency(avg / 4).value }\n}\n\n// Value Box 2\nexport const bestTimeToList = (data) => {\n  const obj = {\n    sell: {},\n    list: {}\n  }\n  data.sales.forEach(({ date_of_listing, date_of_sale }) => {\n    const listDay = moment(date_of_listing).format('dddd')\n    if (obj.list[listDay]) obj.list[listDay] += 1\n    else obj.list[listDay] = 1\n\n    const saleDay = moment(date_of_sale).format('dddd')\n    if (obj.sell[saleDay]) obj.sell[saleDay] += 1\n    else obj.sell[saleDay] = 1\n  })\n\n  const final = { sell: [], list: [] }\n  let topSellCount = 0\n  let topListCount = 0\n\n  Object.keys(obj.sell).forEach((key) => {\n    if (obj.sell[key] === topSellCount) {\n      final.sell.push(key)\n    } else if (obj.sell[key] > topSellCount) {\n      final.sell = [key]\n      topSellCount = obj.sell[key]\n    }\n  })\n  Object.keys(obj.list).forEach((key) => {\n    if (obj.list[key] === topListCount) {\n      final.list.push(key)\n    } else if (obj.list[key] > topListCount) {\n      final.list = [key]\n      topListCount = obj.list[key]\n    }\n  })\n  return final\n}\n\n// Value Box 3\nexport const avgItemsPerDay = data => {\n  const obj = {}\n  data.sales.forEach(({ date_of_sale }) => {\n    if (obj[date_of_sale]) {\n      obj[date_of_sale] += 1\n    } else obj[date_of_sale] = 1\n  })\n  const sales = data.sales.length\n  const days = Object.keys(obj).length\n\n  return sales / days\n}\n\n// Tables\n// export const formatSalesTable = (sales) => {\n//   const newSales = []\n\n//   sales.forEach((sale) => {\n//     const ms = new Date(sale.date_of_sale).getTime() - new Date(sale.date_of_listing).getTime()\n//     const days = ms / (1000 * 3600 * 24)\n//     newSales.push({\n//       ...sale,\n//       'date sold': moment(sale.date_of_sale).format('MM/DD/YYYY'),\n//       buyer: `${sale.name}`,\n//       username: `${sale.buyer}`,\n//       'item price': sale.item_price,\n//       'buyer-paid-shipping': sale.buyer_shipping_cost,\n//       fees: sale.depop_fee,\n//       'date listed': moment(sale.date_of_listing).format('MM/DD/YYYY'),\n//       'days listed': days, // converts from ms to days\n//       'item description': formatDescription(sale.description),\n//       address: `${sale.address_line_1} ${sale.city}, ${sale.state ? sale.state : ''} ${sale.post_code}`\n\n//     })\n//   })\n\n//   return sort(newSales)\n// }\n\n// utils\n// const sort = (sales) => {\n//   return sales.sort((a, b) => {\n//     const date1 = new Date(a['date sold'])\n//     const date2 = new Date(b['date listing'])\n//     return date1 - date2\n//   })\n// }\n\n// const formatDescription = (text) => {\n//   const tagStart = text.lastIndexOf('{')\n\n//   const withoutTags = tagStart !== -1 ? text.substring(0, tagStart) : text\n//   return withoutTags\n// }\n\nconst cleanNumber = (num) => {\n  if (!num || num === '-') return 0\n  const withoutCurrency = num.substring(1, num.length)\n  return parseFloat(withoutCurrency)\n}\n"]},"metadata":{},"sourceType":"module"}