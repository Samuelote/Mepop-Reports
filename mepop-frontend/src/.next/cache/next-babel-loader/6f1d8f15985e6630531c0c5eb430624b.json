{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Text as TextComponent } from 'rebass';\nimport styled from 'styled-components';\nimport theme from '../../../theme';\n\nconst Text = (_ref) => {\n  let {\n    notFound\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"notFound\"]);\n\n  const preset = notFound ? {\n    color: theme.colors.textSubtle,\n    fontSize: '25px'\n  } : {};\n  return __jsx(StyledText, _extends({}, preset, props));\n};\n\nexport default Text;\nconst StyledText = styled(TextComponent).withConfig({\n  displayName: \"Text__StyledText\",\n  componentId: \"sc-178qlvd-0\"\n})([\"color:\", \";\"], ({\n  theme,\n  color\n}) => theme.colors[color]);","map":null,"metadata":{},"sourceType":"module"}