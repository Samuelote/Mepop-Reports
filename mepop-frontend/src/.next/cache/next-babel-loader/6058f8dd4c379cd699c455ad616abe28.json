{"ast":null,"code":"var _jsxFileName = \"/Users/samuelwood/development/mepop-reports/mepop-frontend/src/styles/reporting/BarChart/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { BarChart, Bar, XAxis, Tooltip, ResponsiveContainer, Cell, Legend } from 'recharts';\nimport Card from '../../elements/Card';\nimport theme from '../../../theme';\nimport { ChartWrap } from '../styleUtil';\n\nconst Barchart = (_ref) => {\n  let {\n    data,\n    xdataKey,\n    tickFormatter,\n    labelFormatter,\n    formatTooltip,\n    disableAnimation,\n    bars = [],\n    hideLegend\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"data\", \"xdataKey\", \"tickFormatter\", \"labelFormatter\", \"formatTooltip\", \"disableAnimation\", \"bars\", \"hideLegend\"]);\n\n  return __jsx(Card, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }), __jsx(ChartWrap, {\n    height: 400,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, __jsx(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(BarChart, {\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, __jsx(XAxis, {\n    dataKey: xdataKey,\n    tickFormatter: tickFormatter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }), __jsx(Tooltip, {\n    labelFormatter: labelFormatter,\n    formatter: formatTooltip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }), !hideLegend ? __jsx(Legend, {\n    verticalAlign: \"top\",\n    iconType: \"circle\",\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 15\n    }\n  }) : null, bars.map(({\n    size,\n    dataKey,\n    color\n  }, i) => {\n    return __jsx(Bar, {\n      isAnimationActive: typeof disableAnimation !== 'boolean',\n      key: i,\n      barSize: size,\n      dataKey: dataKey,\n      type: \"monotone\",\n      fill: theme.colors[color] || theme.colors.primary,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 19\n      }\n    });\n  })))));\n};\n\nexport default Barchart;","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/styles/reporting/BarChart/index.js"],"names":["React","BarChart","Bar","XAxis","Tooltip","ResponsiveContainer","Cell","Legend","Card","theme","ChartWrap","Barchart","data","xdataKey","tickFormatter","labelFormatter","formatTooltip","disableAnimation","bars","hideLegend","props","map","size","dataKey","color","i","colors","primary"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EACYC,GADZ,EACiBC,KADjB,EACwBC,OADxB,EACiCC,mBADjC,EACsDC,IADtD,EAC4DC,MAD5D,QAEO,UAFP;AAIA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,SAAT,QAA0B,cAA1B;;AAEA,MAAMC,QAAQ,GAAG,UAUX;AAAA,MAVY;AAChBC,IAAAA,IADgB;AAEhBC,IAAAA,QAFgB;AAGhBC,IAAAA,aAHgB;AAIhBC,IAAAA,cAJgB;AAKhBC,IAAAA,aALgB;AAMhBC,IAAAA,gBANgB;AAOhBC,IAAAA,IAAI,GAAG,EAPS;AAQhBC,IAAAA;AARgB,GAUZ;AAAA,MADDC,KACC;;AACJ,SACE,MAAC,IAAD,eAAUA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,SAAD;AAAW,IAAA,MAAM,EAAE,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD;AAAqB,IAAA,KAAK,EAAC,MAA3B;AAAkC,IAAA,MAAM,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAU,IAAA,IAAI,EAAER,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEC,QAAhB;AAA0B,IAAA,aAAa,EAAEC,aAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,OAAD;AAAS,IAAA,cAAc,EAAEC,cAAzB;AAAyC,IAAA,SAAS,EAAEC,aAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGG,CAACG,UAAD,GACC,MAAC,MAAD;AACE,IAAA,aAAa,EAAC,KADhB;AAEE,IAAA,QAAQ,EAAC,QAFX;AAGE,IAAA,KAAK,EAAC,MAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAMG,IATN,EAWID,IAAI,CAACG,GAAL,CAAS,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD,EAA2BC,CAA3B,KAAiC;AACxC,WACE,MAAC,GAAD;AACE,MAAA,iBAAiB,EAAE,OAAOR,gBAAP,KAA4B,SADjD;AAEE,MAAA,GAAG,EAAEQ,CAFP;AAGE,MAAA,OAAO,EAAEH,IAHX;AAIE,MAAA,OAAO,EAAEC,OAJX;AAKE,MAAA,IAAI,EAAC,UALP;AAME,MAAA,IAAI,EAAEd,KAAK,CAACiB,MAAN,CAAaF,KAAb,KAAuBf,KAAK,CAACiB,MAAN,CAAaC,OAN5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAVD,CAXJ,CADF,CADF,CADF,CADF;AAkCD,CA7CD;;AA+CA,eAAehB,QAAf","sourcesContent":["import React from 'react'\nimport {\n  BarChart, Bar, XAxis, Tooltip, ResponsiveContainer, Cell, Legend\n} from 'recharts'\n\nimport Card from '../../elements/Card'\nimport theme from '../../../theme'\nimport { ChartWrap } from '../styleUtil'\n\nconst Barchart = ({\n  data,\n  xdataKey,\n  tickFormatter,\n  labelFormatter,\n  formatTooltip,\n  disableAnimation,\n  bars = [],\n  hideLegend,\n  ...props\n}) => {\n  return (\n    <Card {...props}>\n      <ChartWrap height={400}>\n        <ResponsiveContainer width='100%' height='100%'>\n          <BarChart data={data}>\n            <XAxis dataKey={xdataKey} tickFormatter={tickFormatter} />\n            <Tooltip labelFormatter={labelFormatter} formatter={formatTooltip} />\n            {!hideLegend ? (\n              <Legend\n                verticalAlign='top'\n                iconType='circle'\n                align='left'\n              />\n            ) : null}\n            {\n              bars.map(({ size, dataKey, color }, i) => {\n                return (\n                  <Bar\n                    isAnimationActive={typeof disableAnimation !== 'boolean'}\n                    key={i}\n                    barSize={size}\n                    dataKey={dataKey}\n                    type='monotone'\n                    fill={theme.colors[color] || theme.colors.primary}\n                  />)\n              })\n            }\n\n          </BarChart>\n        </ResponsiveContainer>\n      </ChartWrap>\n\n    </Card>\n  )\n}\n\nexport default Barchart\n"]},"metadata":{},"sourceType":"module"}