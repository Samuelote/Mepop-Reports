{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nimport currency from 'currency.js';\nimport theme from '../../../theme';\nexport const groupByDay = data => {\n  const groupedData = {\n    Sun: {\n      sales: 0,\n      listings: 0\n    },\n    Mon: {\n      sales: 0,\n      listings: 0\n    },\n    Tue: {\n      sales: 0,\n      listings: 0\n    },\n    Wed: {\n      sales: 0,\n      listings: 0\n    },\n    Thu: {\n      sales: 0,\n      listings: 0\n    },\n    Fri: {\n      sales: 0,\n      listings: 0\n    },\n    Sat: {\n      sales: 0,\n      listings: 0\n    }\n  };\n  const newData = [];\n\n  if (data.sales) {\n    // groups data\n    data.sales.forEach(file => {\n      const saleDay = moment(file.date_of_sale, 'MM/DD/YYYY').format('ddd');\n      const listingDay = moment(file.date_of_listing, 'MM/DD/YYYY').format('ddd');\n      groupedData[listingDay].listings++;\n      groupedData[saleDay].sales++;\n    }); // sets up data in recharts format\n\n    Object.keys(groupedData).forEach(key => {\n      newData.push({\n        Day: key,\n        'Items Sold': groupedData[key].sales,\n        'Items Listed': groupedData[key].listings\n      });\n    });\n  }\n\n  return newData;\n};\nexport const groupByDate = (data, showEmptyDates) => {\n  const newData = [];\n\n  if (data.sales) {\n    data.sales.forEach(({\n      date_of_sale,\n      total,\n      buyer_shipping_cost,\n      usps_cost\n    }) => {\n      const gross = currency(total).value;\n      const net = gross - currency(buyer_shipping_cost).value - currency(usps_cost).value;\n      const latest = newData[newData.length - 1];\n\n      if (!newData.length || latest['Date Sold'] !== date_of_sale) {\n        if (latest && showEmptyDates) {\n          const milisecs = new Date(moment(date_of_sale, 'MM-DD-YYYY').format()).getTime() - new Date(moment(latest['Date Sold'], 'MM-DD-YYYY').format()).getTime();\n          const diff = milisecs / (1000 * 3600 * 24);\n\n          if (diff !== 1) {\n            for (let i = 1; i < diff; i++) {\n              const day = new Date(moment(latest['Date Sold'], 'MM-DD-YYYY').format()).getDate() + i;\n              const date = new Date(moment(latest['Date Sold'], 'MM-DD-YYYY').format());\n              const formatted = moment(date.setDate(day)).format('MM-DD-YYYY');\n              newData.push({\n                'Date Sold': formatted,\n                'Items Sold': 0,\n                Gross: 0,\n                Net: 0\n              });\n            }\n          }\n        }\n\n        newData.push({\n          'Date Sold': date_of_sale,\n          'Items Sold': 1,\n          Gross: gross,\n          Net: net\n        });\n      } else {\n        latest['Items Sold'] += 1;\n        latest.Net += net;\n        latest.Gross += gross;\n      }\n    });\n  }\n\n  return newData;\n};\nexport const groupByTime = data => {\n  // const groupedData = {}\n  const newData = [[], [], [], [], [], [], []].fill(0).map(() => new Array(24).fill(0));\n  const obj = {\n    sun: [],\n    mon: [],\n    tue: [],\n    wed: [],\n    thu: [],\n    fri: [],\n    sat: []\n  };\n\n  if (data.sales) {\n    // groups data\n    data.sales.forEach(sale => {\n      const hourIndex = moment(sale.time_of_sale, 'hh:mm A').format('H');\n      const day = moment(sale.date_of_sale).format('ddd').toLowerCase();\n\n      if (obj[day][hourIndex]) {\n        obj[day][hourIndex].push(sale);\n      } else obj[day][hourIndex] = [sale]; // obj[day].push(sale)\n\n\n      switch (day) {\n        case 'sun':\n          {\n            newData[0][hourIndex] += 1;\n            break;\n          }\n\n        case 'mon':\n          {\n            newData[1][hourIndex] += 1;\n            break;\n          }\n\n        case 'tue':\n          {\n            newData[2][hourIndex] += 1;\n            break;\n          }\n\n        case 'wed':\n          {\n            newData[3][hourIndex] += 1;\n            break;\n          }\n\n        case 'thu':\n          {\n            newData[4][hourIndex] += 1;\n            break;\n          }\n\n        case 'fri':\n          {\n            newData[5][hourIndex] += 1;\n            break;\n          }\n\n        case 'sat':\n          {\n            newData[6][hourIndex] += 1;\n            break;\n          }\n      }\n    });\n  }\n\n  return {\n    arr: newData,\n    obj\n  };\n};\nexport const groupByCategory = (data, gross) => {\n  const newData = [];\n  const allCategories = {};\n\n  if (data.sales) {\n    data.sales.forEach(({\n      category,\n      total\n    }) => {\n      const totalNum = currency(total).value;\n\n      if (allCategories[category]) {\n        allCategories[category].sold += 1;\n        allCategories[category].gross += totalNum;\n      } else allCategories[category] = {\n        sold: 1,\n        gross: totalNum\n      };\n    });\n  }\n\n  Object.keys(allCategories).forEach(key => {\n    newData.push({\n      Category: capitalize(key),\n      'Items Sold': allCategories[key].sold,\n      'Gross Earnings': allCategories[key].gross\n    });\n  });\n  newData.sort((a, b) => {\n    return b['Items Sold'] - a['Items Sold'];\n  });\n  return newData.slice(0, 15);\n};\nexport const groupByPaymentType = data => {\n  const newData = [];\n  const paymentTypes = {};\n\n  if (data.sales) {\n    data.sales.forEach(({\n      payment_type,\n      total\n    }) => {\n      const totalNum = currency(total).value;\n\n      if (paymentTypes[payment_type]) {\n        paymentTypes[payment_type].sold += 1;\n        paymentTypes[payment_type].gross += totalNum;\n      } else paymentTypes[payment_type] = {\n        sold: 1,\n        gross: totalNum\n      };\n    });\n  }\n\n  const colors = [theme.colors.pastelOrange, theme.colors.pastelRose, theme.colors.primary, theme.colors.pastelBlueLight];\n  Object.keys(paymentTypes).forEach((key, i) => {\n    newData.push({\n      name: key === 'STRIPE' ? 'BANK ACCOUNT' : key,\n      sold: paymentTypes[key].sold,\n      gross: paymentTypes[key].gross,\n      color: colors[i]\n    });\n  });\n  return newData;\n};\nexport const groupByWeek = (data, showEmptyDates) => {\n  const newData = [];\n  const obj = {};\n\n  if (data.sales) {\n    data.sales.forEach(({\n      date_of_sale,\n      total,\n      buyer_shipping_cost,\n      usps_cost\n    }) => {\n      const {\n        week,\n        month\n      } = getDateInfo(date_of_sale);\n      const currentWeek = `${month} - Wk${week}`;\n      if (!obj[currentWeek]) obj[currentWeek] = {\n        Gross: 0,\n        Net: 0\n      };\n      const gross = currency(total).value;\n      const net = gross - currency(buyer_shipping_cost).value - currency(usps_cost).value;\n      obj[currentWeek].Gross += gross;\n      obj[currentWeek].Net += net;\n    });\n    Object.keys(obj).forEach(key => {\n      newData.push(_objectSpread({\n        week: key\n      }, obj[key]));\n    });\n  }\n\n  return newData;\n};\n\nfunction getDateInfo(date) {\n  const month = moment(date).format('MMM YYYY');\n  var nthOfMonth = Math.ceil(moment(date).date() / 7);\n  if (nthOfMonth >= 5) return {\n    week: 4,\n    month\n  };else return {\n    week: nthOfMonth,\n    month\n  };\n}\n\nfunction capitalize(str) {\n  str = str.split(' ');\n\n  for (let i = 0; i < str.length; i++) {\n    str[i] = str[i][0].toUpperCase() + str[i].substr(1);\n  }\n\n  return str.join(' ');\n}","map":{"version":3,"sources":["/Users/samuelwood/development/mepop-reports/mepop-frontend/src/components/reports/util/grouping.js"],"names":["moment","currency","theme","groupByDay","data","groupedData","Sun","sales","listings","Mon","Tue","Wed","Thu","Fri","Sat","newData","forEach","file","saleDay","date_of_sale","format","listingDay","date_of_listing","Object","keys","key","push","Day","groupByDate","showEmptyDates","total","buyer_shipping_cost","usps_cost","gross","value","net","latest","length","milisecs","Date","getTime","diff","i","day","getDate","date","formatted","setDate","Gross","Net","groupByTime","fill","map","Array","obj","sun","mon","tue","wed","thu","fri","sat","sale","hourIndex","time_of_sale","toLowerCase","arr","groupByCategory","allCategories","category","totalNum","sold","Category","capitalize","sort","a","b","slice","groupByPaymentType","paymentTypes","payment_type","colors","pastelOrange","pastelRose","primary","pastelBlueLight","name","color","groupByWeek","week","month","getDateInfo","currentWeek","nthOfMonth","Math","ceil","str","split","toUpperCase","substr","join"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAClC,QAAMC,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAE;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,QAAQ,EAAE;AAAtB,KADa;AAElBC,IAAAA,GAAG,EAAE;AAAEF,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,QAAQ,EAAE;AAAtB,KAFa;AAGlBE,IAAAA,GAAG,EAAE;AAAEH,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,QAAQ,EAAE;AAAtB,KAHa;AAIlBG,IAAAA,GAAG,EAAE;AAAEJ,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,QAAQ,EAAE;AAAtB,KAJa;AAKlBI,IAAAA,GAAG,EAAE;AAAEL,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,QAAQ,EAAE;AAAtB,KALa;AAMlBK,IAAAA,GAAG,EAAE;AAAEN,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,QAAQ,EAAE;AAAtB,KANa;AAOlBM,IAAAA,GAAG,EAAE;AAAEP,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,QAAQ,EAAE;AAAtB;AAPa,GAApB;AASA,QAAMO,OAAO,GAAG,EAAhB;;AACA,MAAIX,IAAI,CAACG,KAAT,EAAgB;AACd;AACAH,IAAAA,IAAI,CAACG,KAAL,CAAWS,OAAX,CAAoBC,IAAD,IAAU;AAC3B,YAAMC,OAAO,GAAGlB,MAAM,CAACiB,IAAI,CAACE,YAAN,EAAoB,YAApB,CAAN,CAAwCC,MAAxC,CAA+C,KAA/C,CAAhB;AACA,YAAMC,UAAU,GAAGrB,MAAM,CAACiB,IAAI,CAACK,eAAN,EAAuB,YAAvB,CAAN,CAA2CF,MAA3C,CAAkD,KAAlD,CAAnB;AACAf,MAAAA,WAAW,CAACgB,UAAD,CAAX,CAAwBb,QAAxB;AACAH,MAAAA,WAAW,CAACa,OAAD,CAAX,CAAqBX,KAArB;AACD,KALD,EAFc,CAQd;;AACAgB,IAAAA,MAAM,CAACC,IAAP,CAAYnB,WAAZ,EAAyBW,OAAzB,CAAkCS,GAAD,IAAS;AACxCV,MAAAA,OAAO,CAACW,IAAR,CAAa;AAAEC,QAAAA,GAAG,EAAEF,GAAP;AAAY,sBAAcpB,WAAW,CAACoB,GAAD,CAAX,CAAiBlB,KAA3C;AAAkD,wBAAgBF,WAAW,CAACoB,GAAD,CAAX,CAAiBjB;AAAnF,OAAb;AACD,KAFD;AAGD;;AACD,SAAOO,OAAP;AACD,CAzBM;AA2BP,OAAO,MAAMa,WAAW,GAAG,CAACxB,IAAD,EAAOyB,cAAP,KAA0B;AACnD,QAAMd,OAAO,GAAG,EAAhB;;AACA,MAAIX,IAAI,CAACG,KAAT,EAAgB;AACdH,IAAAA,IAAI,CAACG,KAAL,CAAWS,OAAX,CAAmB,CAAC;AAAEG,MAAAA,YAAF;AAAgBW,MAAAA,KAAhB;AAAuBC,MAAAA,mBAAvB;AAA4CC,MAAAA;AAA5C,KAAD,KAA6D;AAC9E,YAAMC,KAAK,GAAGhC,QAAQ,CAAC6B,KAAD,CAAR,CAAgBI,KAA9B;AACA,YAAMC,GAAG,GAAGF,KAAK,GAAGhC,QAAQ,CAAC8B,mBAAD,CAAR,CAA8BG,KAAtC,GAA8CjC,QAAQ,CAAC+B,SAAD,CAAR,CAAoBE,KAA9E;AACA,YAAME,MAAM,GAAGrB,OAAO,CAACA,OAAO,CAACsB,MAAR,GAAiB,CAAlB,CAAtB;;AACA,UAAI,CAACtB,OAAO,CAACsB,MAAT,IAAmBD,MAAM,CAAC,WAAD,CAAN,KAAwBjB,YAA/C,EAA6D;AAC3D,YAAIiB,MAAM,IAAIP,cAAd,EAA8B;AAC5B,gBAAMS,QAAQ,GACV,IAAIC,IAAJ,CAASvC,MAAM,CAACmB,YAAD,EAAe,YAAf,CAAN,CAAmCC,MAAnC,EAAT,EAAsDoB,OAAtD,KACA,IAAID,IAAJ,CAASvC,MAAM,CAACoC,MAAM,CAAC,WAAD,CAAP,EAAsB,YAAtB,CAAN,CAA0ChB,MAA1C,EAAT,EAA6DoB,OAA7D,EAFJ;AAGA,gBAAMC,IAAI,GAAGH,QAAQ,IAAI,OAAO,IAAP,GAAc,EAAlB,CAArB;;AACA,cAAIG,IAAI,KAAK,CAAb,EAAgB;AACd,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAApB,EAA0BC,CAAC,EAA3B,EAA+B;AAC7B,oBAAMC,GAAG,GAAG,IAAIJ,IAAJ,CAASvC,MAAM,CAACoC,MAAM,CAAC,WAAD,CAAP,EAAsB,YAAtB,CAAN,CAA0ChB,MAA1C,EAAT,EAA6DwB,OAA7D,KAAyEF,CAArF;AACA,oBAAMG,IAAI,GAAG,IAAIN,IAAJ,CAASvC,MAAM,CAACoC,MAAM,CAAC,WAAD,CAAP,EAAsB,YAAtB,CAAN,CAA0ChB,MAA1C,EAAT,CAAb;AACA,oBAAM0B,SAAS,GAAG9C,MAAM,CAAC6C,IAAI,CAACE,OAAL,CAAaJ,GAAb,CAAD,CAAN,CAA0BvB,MAA1B,CAAiC,YAAjC,CAAlB;AAEAL,cAAAA,OAAO,CAACW,IAAR,CAAa;AAAE,6BAAaoB,SAAf;AAA0B,8BAAc,CAAxC;AAA2CE,gBAAAA,KAAK,EAAE,CAAlD;AAAqDC,gBAAAA,GAAG,EAAE;AAA1D,eAAb;AACD;AACF;AACF;;AAEDlC,QAAAA,OAAO,CAACW,IAAR,CAAa;AAAE,uBAAaP,YAAf;AAA6B,wBAAc,CAA3C;AAA8C6B,UAAAA,KAAK,EAAEf,KAArD;AAA4DgB,UAAAA,GAAG,EAAEd;AAAjE,SAAb;AACD,OAlBD,MAkBO;AACLC,QAAAA,MAAM,CAAC,YAAD,CAAN,IAAwB,CAAxB;AACAA,QAAAA,MAAM,CAACa,GAAP,IAAcd,GAAd;AACAC,QAAAA,MAAM,CAACY,KAAP,IAAgBf,KAAhB;AACD;AACF,KA3BD;AA4BD;;AACD,SAAOlB,OAAP;AACD,CAjCM;AAmCP,OAAO,MAAMmC,WAAW,GAAI9C,IAAD,IAAU;AACnC;AACA,QAAMW,OAAO,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6BoC,IAA7B,CAAkC,CAAlC,EACbC,GADa,CACT,MAAM,IAAIC,KAAJ,CAAU,EAAV,EAAcF,IAAd,CAAmB,CAAnB,CADG,CAAhB;AAEA,QAAMG,GAAG,GAAG;AACVC,IAAAA,GAAG,EAAE,EADK;AAEVC,IAAAA,GAAG,EAAE,EAFK;AAGVC,IAAAA,GAAG,EAAE,EAHK;AAIVC,IAAAA,GAAG,EAAE,EAJK;AAKVC,IAAAA,GAAG,EAAE,EALK;AAMVC,IAAAA,GAAG,EAAE,EANK;AAOVC,IAAAA,GAAG,EAAE;AAPK,GAAZ;;AASA,MAAIzD,IAAI,CAACG,KAAT,EAAgB;AACd;AACAH,IAAAA,IAAI,CAACG,KAAL,CAAWS,OAAX,CAAoB8C,IAAD,IAAU;AAC3B,YAAMC,SAAS,GAAG/D,MAAM,CAAC8D,IAAI,CAACE,YAAN,EAAoB,SAApB,CAAN,CAAqC5C,MAArC,CAA4C,GAA5C,CAAlB;AACA,YAAMuB,GAAG,GAAG3C,MAAM,CAAC8D,IAAI,CAAC3C,YAAN,CAAN,CAA0BC,MAA1B,CAAiC,KAAjC,EAAwC6C,WAAxC,EAAZ;;AACA,UAAIX,GAAG,CAACX,GAAD,CAAH,CAASoB,SAAT,CAAJ,EAAyB;AACvBT,QAAAA,GAAG,CAACX,GAAD,CAAH,CAASoB,SAAT,EAAoBrC,IAApB,CAAyBoC,IAAzB;AACD,OAFD,MAEOR,GAAG,CAACX,GAAD,CAAH,CAASoB,SAAT,IAAsB,CAACD,IAAD,CAAtB,CALoB,CAM3B;;;AACA,cAAQnB,GAAR;AACE,aAAK,KAAL;AAAY;AACV5B,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWgD,SAAX,KAAyB,CAAzB;AACA;AACD;;AACD,aAAK,KAAL;AAAY;AACVhD,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWgD,SAAX,KAAyB,CAAzB;AACA;AACD;;AACD,aAAK,KAAL;AAAY;AACVhD,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWgD,SAAX,KAAyB,CAAzB;AACA;AACD;;AACD,aAAK,KAAL;AAAY;AACVhD,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWgD,SAAX,KAAyB,CAAzB;AACA;AACD;;AACD,aAAK,KAAL;AAAY;AACVhD,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWgD,SAAX,KAAyB,CAAzB;AACA;AACD;;AACD,aAAK,KAAL;AAAY;AACVhD,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWgD,SAAX,KAAyB,CAAzB;AACA;AACD;;AACD,aAAK,KAAL;AAAY;AACVhD,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWgD,SAAX,KAAyB,CAAzB;AACA;AACD;AA5BH;AA8BD,KArCD;AAsCD;;AACD,SAAO;AAAEG,IAAAA,GAAG,EAAEnD,OAAP;AAAgBuC,IAAAA;AAAhB,GAAP;AACD,CAvDM;AAyDP,OAAO,MAAMa,eAAe,GAAG,CAAC/D,IAAD,EAAO6B,KAAP,KAAiB;AAC9C,QAAMlB,OAAO,GAAG,EAAhB;AACA,QAAMqD,aAAa,GAAG,EAAtB;;AACA,MAAIhE,IAAI,CAACG,KAAT,EAAgB;AACdH,IAAAA,IAAI,CAACG,KAAL,CAAWS,OAAX,CAAmB,CAAC;AAAEqD,MAAAA,QAAF;AAAYvC,MAAAA;AAAZ,KAAD,KAAyB;AAC1C,YAAMwC,QAAQ,GAAGrE,QAAQ,CAAC6B,KAAD,CAAR,CAAgBI,KAAjC;;AACA,UAAIkC,aAAa,CAACC,QAAD,CAAjB,EAA6B;AAC3BD,QAAAA,aAAa,CAACC,QAAD,CAAb,CAAwBE,IAAxB,IAAgC,CAAhC;AACAH,QAAAA,aAAa,CAACC,QAAD,CAAb,CAAwBpC,KAAxB,IAAiCqC,QAAjC;AACD,OAHD,MAGOF,aAAa,CAACC,QAAD,CAAb,GAA0B;AAAEE,QAAAA,IAAI,EAAE,CAAR;AAAWtC,QAAAA,KAAK,EAAEqC;AAAlB,OAA1B;AACR,KAND;AAOD;;AAED/C,EAAAA,MAAM,CAACC,IAAP,CAAY4C,aAAZ,EAA2BpD,OAA3B,CAAoCS,GAAD,IAAS;AAC1CV,IAAAA,OAAO,CAACW,IAAR,CAAa;AACX8C,MAAAA,QAAQ,EAAEC,UAAU,CAAChD,GAAD,CADT;AAEX,oBAAc2C,aAAa,CAAC3C,GAAD,CAAb,CAAmB8C,IAFtB;AAGX,wBAAkBH,aAAa,CAAC3C,GAAD,CAAb,CAAmBQ;AAH1B,KAAb;AAKD,GAND;AAOAlB,EAAAA,OAAO,CAAC2D,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,WAAOA,CAAC,CAAC,YAAD,CAAD,GAAkBD,CAAC,CAAC,YAAD,CAA1B;AACD,GAFD;AAGA,SAAO5D,OAAO,CAAC8D,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAP;AACD,CAxBM;AA0BP,OAAO,MAAMC,kBAAkB,GAAI1E,IAAD,IAAU;AAC1C,QAAMW,OAAO,GAAG,EAAhB;AACA,QAAMgE,YAAY,GAAG,EAArB;;AACA,MAAI3E,IAAI,CAACG,KAAT,EAAgB;AACdH,IAAAA,IAAI,CAACG,KAAL,CAAWS,OAAX,CAAmB,CAAC;AAAEgE,MAAAA,YAAF;AAAgBlD,MAAAA;AAAhB,KAAD,KAA6B;AAC9C,YAAMwC,QAAQ,GAAGrE,QAAQ,CAAC6B,KAAD,CAAR,CAAgBI,KAAjC;;AACA,UAAI6C,YAAY,CAACC,YAAD,CAAhB,EAAgC;AAC9BD,QAAAA,YAAY,CAACC,YAAD,CAAZ,CAA2BT,IAA3B,IAAmC,CAAnC;AACAQ,QAAAA,YAAY,CAACC,YAAD,CAAZ,CAA2B/C,KAA3B,IAAoCqC,QAApC;AACD,OAHD,MAGOS,YAAY,CAACC,YAAD,CAAZ,GAA6B;AAAET,QAAAA,IAAI,EAAE,CAAR;AAAWtC,QAAAA,KAAK,EAAEqC;AAAlB,OAA7B;AACR,KAND;AAOD;;AACD,QAAMW,MAAM,GAAG,CAAC/E,KAAK,CAAC+E,MAAN,CAAaC,YAAd,EAA4BhF,KAAK,CAAC+E,MAAN,CAAaE,UAAzC,EAAqDjF,KAAK,CAAC+E,MAAN,CAAaG,OAAlE,EAA2ElF,KAAK,CAAC+E,MAAN,CAAaI,eAAxF,CAAf;AAEA9D,EAAAA,MAAM,CAACC,IAAP,CAAYuD,YAAZ,EAA0B/D,OAA1B,CAAkC,CAACS,GAAD,EAAMiB,CAAN,KAAY;AAC5C3B,IAAAA,OAAO,CAACW,IAAR,CAAa;AACX4D,MAAAA,IAAI,EAAE7D,GAAG,KAAK,QAAR,GAAmB,cAAnB,GAAoCA,GAD/B;AAEX8C,MAAAA,IAAI,EAAEQ,YAAY,CAACtD,GAAD,CAAZ,CAAkB8C,IAFb;AAGXtC,MAAAA,KAAK,EAAE8C,YAAY,CAACtD,GAAD,CAAZ,CAAkBQ,KAHd;AAIXsD,MAAAA,KAAK,EAAEN,MAAM,CAACvC,CAAD;AAJF,KAAb;AAMD,GAPD;AASA,SAAO3B,OAAP;AACD,CAxBM;AA0BP,OAAO,MAAMyE,WAAW,GAAG,CAACpF,IAAD,EAAOyB,cAAP,KAA0B;AACnD,QAAMd,OAAO,GAAG,EAAhB;AACA,QAAMuC,GAAG,GAAG,EAAZ;;AACA,MAAIlD,IAAI,CAACG,KAAT,EAAgB;AACdH,IAAAA,IAAI,CAACG,KAAL,CAAWS,OAAX,CAAmB,CAAC;AAAEG,MAAAA,YAAF;AAAgBW,MAAAA,KAAhB;AAAuBC,MAAAA,mBAAvB;AAA4CC,MAAAA;AAA5C,KAAD,KAA6D;AAC9E,YAAM;AAAEyD,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBC,WAAW,CAACxE,YAAD,CAAnC;AACA,YAAMyE,WAAW,GAAI,GAAEF,KAAM,QAAOD,IAAK,EAAzC;AAEA,UAAI,CAACnC,GAAG,CAACsC,WAAD,CAAR,EAAuBtC,GAAG,CAACsC,WAAD,CAAH,GAAmB;AAAE5C,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,GAAG,EAAE;AAAjB,OAAnB;AAEvB,YAAMhB,KAAK,GAAGhC,QAAQ,CAAC6B,KAAD,CAAR,CAAgBI,KAA9B;AACA,YAAMC,GAAG,GAAGF,KAAK,GAAGhC,QAAQ,CAAC8B,mBAAD,CAAR,CAA8BG,KAAtC,GAA8CjC,QAAQ,CAAC+B,SAAD,CAAR,CAAoBE,KAA9E;AACAoB,MAAAA,GAAG,CAACsC,WAAD,CAAH,CAAiB5C,KAAjB,IAA0Bf,KAA1B;AACAqB,MAAAA,GAAG,CAACsC,WAAD,CAAH,CAAiB3C,GAAjB,IAAwBd,GAAxB;AACD,KAVD;AAWAZ,IAAAA,MAAM,CAACC,IAAP,CAAY8B,GAAZ,EAAiBtC,OAAjB,CAAyBS,GAAG,IAAI;AAC9BV,MAAAA,OAAO,CAACW,IAAR;AAAe+D,QAAAA,IAAI,EAAEhE;AAArB,SAA6B6B,GAAG,CAAC7B,GAAD,CAAhC;AACD,KAFD;AAGD;;AACD,SAAOV,OAAP;AACD,CApBM;;AAsBP,SAAS4E,WAAT,CAAsB9C,IAAtB,EAA4B;AAC1B,QAAM6C,KAAK,GAAG1F,MAAM,CAAC6C,IAAD,CAAN,CAAazB,MAAb,CAAoB,UAApB,CAAd;AACA,MAAIyE,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAU/F,MAAM,CAAC6C,IAAD,CAAN,CAAaA,IAAb,KAAsB,CAAhC,CAAjB;AACA,MAAIgD,UAAU,IAAI,CAAlB,EAAqB,OAAO;AAAEJ,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA;AAAX,GAAP,CAArB,KACK,OAAO;AAAED,IAAAA,IAAI,EAAEI,UAAR;AAAoBH,IAAAA;AAApB,GAAP;AACN;;AAED,SAASjB,UAAT,CAAqBuB,GAArB,EAA0B;AACxBA,EAAAA,GAAG,GAAGA,GAAG,CAACC,KAAJ,CAAU,GAAV,CAAN;;AACA,OAAK,IAAIvD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsD,GAAG,CAAC3D,MAAxB,EAAgCK,CAAC,EAAjC,EAAqC;AACnCsD,IAAAA,GAAG,CAACtD,CAAD,CAAH,GAASsD,GAAG,CAACtD,CAAD,CAAH,CAAO,CAAP,EAAUwD,WAAV,KAA0BF,GAAG,CAACtD,CAAD,CAAH,CAAOyD,MAAP,CAAc,CAAd,CAAnC;AACD;;AAED,SAAOH,GAAG,CAACI,IAAJ,CAAS,GAAT,CAAP;AACD","sourcesContent":["import moment from 'moment'\nimport currency from 'currency.js'\nimport theme from '../../../theme'\n\nexport const groupByDay = (data) => {\n  const groupedData = {\n    Sun: { sales: 0, listings: 0 },\n    Mon: { sales: 0, listings: 0 },\n    Tue: { sales: 0, listings: 0 },\n    Wed: { sales: 0, listings: 0 },\n    Thu: { sales: 0, listings: 0 },\n    Fri: { sales: 0, listings: 0 },\n    Sat: { sales: 0, listings: 0 }\n  }\n  const newData = []\n  if (data.sales) {\n    // groups data\n    data.sales.forEach((file) => {\n      const saleDay = moment(file.date_of_sale, 'MM/DD/YYYY').format('ddd')\n      const listingDay = moment(file.date_of_listing, 'MM/DD/YYYY').format('ddd')\n      groupedData[listingDay].listings++\n      groupedData[saleDay].sales++\n    })\n    // sets up data in recharts format\n    Object.keys(groupedData).forEach((key) => {\n      newData.push({ Day: key, 'Items Sold': groupedData[key].sales, 'Items Listed': groupedData[key].listings })\n    })\n  }\n  return newData\n}\n\nexport const groupByDate = (data, showEmptyDates) => {\n  const newData = []\n  if (data.sales) {\n    data.sales.forEach(({ date_of_sale, total, buyer_shipping_cost, usps_cost }) => {\n      const gross = currency(total).value\n      const net = gross - currency(buyer_shipping_cost).value - currency(usps_cost).value\n      const latest = newData[newData.length - 1]\n      if (!newData.length || latest['Date Sold'] !== date_of_sale) {\n        if (latest && showEmptyDates) {\n          const milisecs =\n              new Date(moment(date_of_sale, 'MM-DD-YYYY').format()).getTime() -\n              new Date(moment(latest['Date Sold'], 'MM-DD-YYYY').format()).getTime()\n          const diff = milisecs / (1000 * 3600 * 24)\n          if (diff !== 1) {\n            for (let i = 1; i < diff; i++) {\n              const day = new Date(moment(latest['Date Sold'], 'MM-DD-YYYY').format()).getDate() + i\n              const date = new Date(moment(latest['Date Sold'], 'MM-DD-YYYY').format())\n              const formatted = moment(date.setDate(day)).format('MM-DD-YYYY')\n\n              newData.push({ 'Date Sold': formatted, 'Items Sold': 0, Gross: 0, Net: 0 })\n            }\n          }\n        }\n\n        newData.push({ 'Date Sold': date_of_sale, 'Items Sold': 1, Gross: gross, Net: net })\n      } else {\n        latest['Items Sold'] += 1\n        latest.Net += net\n        latest.Gross += gross\n      }\n    })\n  }\n  return newData\n}\n\nexport const groupByTime = (data) => {\n  // const groupedData = {}\n  const newData = [[], [], [], [], [], [], []].fill(0)\n    .map(() => new Array(24).fill(0))\n  const obj = {\n    sun: [],\n    mon: [],\n    tue: [],\n    wed: [],\n    thu: [],\n    fri: [],\n    sat: []\n  }\n  if (data.sales) {\n    // groups data\n    data.sales.forEach((sale) => {\n      const hourIndex = moment(sale.time_of_sale, 'hh:mm A').format('H')\n      const day = moment(sale.date_of_sale).format('ddd').toLowerCase()\n      if (obj[day][hourIndex]) {\n        obj[day][hourIndex].push(sale)\n      } else obj[day][hourIndex] = [sale]\n      // obj[day].push(sale)\n      switch (day) {\n        case 'sun': {\n          newData[0][hourIndex] += 1\n          break\n        }\n        case 'mon': {\n          newData[1][hourIndex] += 1\n          break\n        }\n        case 'tue': {\n          newData[2][hourIndex] += 1\n          break\n        }\n        case 'wed': {\n          newData[3][hourIndex] += 1\n          break\n        }\n        case 'thu': {\n          newData[4][hourIndex] += 1\n          break\n        }\n        case 'fri': {\n          newData[5][hourIndex] += 1\n          break\n        }\n        case 'sat': {\n          newData[6][hourIndex] += 1\n          break\n        }\n      }\n    })\n  }\n  return { arr: newData, obj }\n}\n\nexport const groupByCategory = (data, gross) => {\n  const newData = []\n  const allCategories = {}\n  if (data.sales) {\n    data.sales.forEach(({ category, total }) => {\n      const totalNum = currency(total).value\n      if (allCategories[category]) {\n        allCategories[category].sold += 1\n        allCategories[category].gross += totalNum\n      } else allCategories[category] = { sold: 1, gross: totalNum }\n    })\n  }\n\n  Object.keys(allCategories).forEach((key) => {\n    newData.push({\n      Category: capitalize(key),\n      'Items Sold': allCategories[key].sold,\n      'Gross Earnings': allCategories[key].gross\n    })\n  })\n  newData.sort((a, b) => {\n    return b['Items Sold'] - a['Items Sold']\n  })\n  return newData.slice(0, 15)\n}\n\nexport const groupByPaymentType = (data) => {\n  const newData = []\n  const paymentTypes = {}\n  if (data.sales) {\n    data.sales.forEach(({ payment_type, total }) => {\n      const totalNum = currency(total).value\n      if (paymentTypes[payment_type]) {\n        paymentTypes[payment_type].sold += 1\n        paymentTypes[payment_type].gross += totalNum\n      } else paymentTypes[payment_type] = { sold: 1, gross: totalNum }\n    })\n  }\n  const colors = [theme.colors.pastelOrange, theme.colors.pastelRose, theme.colors.primary, theme.colors.pastelBlueLight]\n\n  Object.keys(paymentTypes).forEach((key, i) => {\n    newData.push({\n      name: key === 'STRIPE' ? 'BANK ACCOUNT' : key,\n      sold: paymentTypes[key].sold,\n      gross: paymentTypes[key].gross,\n      color: colors[i]\n    })\n  })\n\n  return newData\n}\n\nexport const groupByWeek = (data, showEmptyDates) => {\n  const newData = []\n  const obj = {}\n  if (data.sales) {\n    data.sales.forEach(({ date_of_sale, total, buyer_shipping_cost, usps_cost }) => {\n      const { week, month } = getDateInfo(date_of_sale)\n      const currentWeek = `${month} - Wk${week}`\n\n      if (!obj[currentWeek]) obj[currentWeek] = { Gross: 0, Net: 0 }\n\n      const gross = currency(total).value\n      const net = gross - currency(buyer_shipping_cost).value - currency(usps_cost).value\n      obj[currentWeek].Gross += gross\n      obj[currentWeek].Net += net\n    })\n    Object.keys(obj).forEach(key => {\n      newData.push({ week: key, ...obj[key] })\n    })\n  }\n  return newData\n}\n\nfunction getDateInfo (date) {\n  const month = moment(date).format('MMM YYYY')\n  var nthOfMonth = Math.ceil(moment(date).date() / 7)\n  if (nthOfMonth >= 5) return { week: 4, month }\n  else return { week: nthOfMonth, month }\n}\n\nfunction capitalize (str) {\n  str = str.split(' ')\n  for (let i = 0; i < str.length; i++) {\n    str[i] = str[i][0].toUpperCase() + str[i].substr(1)\n  }\n\n  return str.join(' ')\n}\n"]},"metadata":{},"sourceType":"module"}