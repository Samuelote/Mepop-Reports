{"version":3,"file":"static/webpack/static/development/pages/_app.js.fb793082fd7a247af944.hot-update.js","sources":["webpack:///./components/DateContainer.js"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport Link from 'next/link'\nimport { useToasts } from 'react-toast-notifications'\n\nimport Flex from '../styles/layout/Flex'\nimport DateRangePicker from '../styles/elements/DateRangePicker'\nimport Select from '../styles/elements/Select'\n\nimport { getRangedData } from '../dataProcessing/utils'\nimport { UPDATE_RANGED_DATA, UPDATE_COMPARE_DATA } from '../store/generalReducer'\nimport Text from '../styles/elements/Text'\nimport Spinner from '../styles/elements/Loading/Spinner'\nimport Tooltip from '../styles/elements/Tooltip'\n\nconst DateContainer = ({ page }) => {\n  const { allData, loading, user } = useSelector(state => state.generalReducer)\n  const fixedFullRange = page === 'Dashboard'\n  const dispatch = useDispatch()\n  const { addToast } = useToasts()\n\n  const min = useMemo(() => allData.sales ? allData.sales[0].date_of_sale : null, [allData])\n  const max = useMemo(() => allData.sales ? allData.sales[allData.sales.length - 1].date_of_sale : null, [allData])\n  const [dateRange, setDates] = useState({ startDate: min, endDate: max }) // stored in MM-DD-YYYY format\n  const [compareDateRange, setCompareDates] = useState({ startDate: min, endDate: max }) // stored in MM-DD-YYYY format\n  const [preset, setPreset] = useState({ label: 'Full Range', value: 'full' })\n  const [comparePreset, setComparePreset] = useState({ label: 'Full Range', value: 'full' })\n  const [showCompareDate, toggleCompare] = useState(false)\n  const [isLoading, setLoading] = useState(false)\n  const isBasic = !user.membership ? 'basic' : user.membership.type === 'basic'\n\n  useEffect(() => {\n    if (dateRange.startDate === null || dateRange.endDate === null) {\n      setPreset({ label: 'Full Range', value: 'full' })\n      setDates({ startDate: min, endDate: max })\n    } else if (dateRange.startDate && dateRange.endDate) {\n      if (!moment(dateRange.startDate).isSame(min) && !moment(dateRange.endDate).isSame(max)) {\n        setPreset({ label: 'Full Range', value: 'full' })\n        setDates({ startDate: min, endDate: max })\n      }\n    }\n  }, [min, max])\n  useEffect(() => {\n    console.log(dateRange.startDate, min)\n    if (moment(dateRange.startDate).isBefore(min) || moment(dateRange.endDate).isAfter(max)) {\n      addToast(\n        <div>\n        This date range exceeds the files you've uploaded.\n          <Link href='/files'><CustomLink>Click here to upload more files.</CustomLink></Link>\n        </div>, {\n          appearance: 'warning'\n          // autoDismiss: true\n        })\n    }\n    setTimeout(() => {\n      if (allData.sales && dateRange.startDate && dateRange.endDate) {\n        const rangedData = getRangedData(allData, {\n          startDate: dateRange.startDate,\n          endDate: dateRange.endDate\n        })\n        dispatch({\n          type: UPDATE_RANGED_DATA,\n          payload: rangedData\n        })\n      }\n    })\n  }, [allData, dateRange])\n\n  useEffect(() => {\n    setLoading(true)\n    setTimeout(() => {\n      if (allData.sales && compareDateRange.startDate && compareDateRange.endDate) {\n        const rangedData = getRangedData(allData, {\n          startDate: compareDateRange.startDate,\n          endDate: compareDateRange.endDate\n        })\n        // console.log(rangedData)\n        dispatch({\n          type: UPDATE_COMPARE_DATA,\n          payload: rangedData\n        })\n      }\n      if (!showCompareDate) {\n        dispatch({\n          type: UPDATE_COMPARE_DATA,\n          payload: {}\n        })\n      }\n      setLoading(false)\n    })\n  }, [allData, compareDateRange, showCompareDate])\n\n  useEffect(() => {\n    const { startDate, endDate } = getDatePreset(preset, min, max)\n    if (startDate && endDate) {\n      setDates({ startDate, endDate })\n    }\n  }, [preset])\n\n  useEffect(() => {\n    const { startDate, endDate } = getDatePreset(comparePreset, min, max)\n    if (startDate && endDate) {\n      setCompareDates({ startDate, endDate })\n    }\n  }, [comparePreset])\n\n  if (!allData.sales) return null\n  const btnDisabled = loading || fixedFullRange || isLoading || isBasic\n  return (\n    <Flex alignItems='center'>\n      <Flex flexDirection='column' justifyContent='space-between' height={showCompareDate && !fixedFullRange ? 96 : 'auto'}>\n\n        <Select\n          opacity={fixedFullRange ? 0 : 1}\n          options={options}\n          onChange={(arr) => setPreset(arr[0])}\n          selectProps={{\n            values: preset ? [preset] : [],\n            disabled: fixedFullRange,\n            searchable: false,\n            style: { width: '140px', fontSize: '15px' },\n            separator: true\n          }}\n        />\n        {\n          showCompareDate ? (\n            <Select\n              opacity={fixedFullRange ? 0 : 1}\n              options={options}\n              onChange={(arr) => setComparePreset(arr[0])}\n              selectProps={{\n                values: comparePreset ? [comparePreset] : [],\n                disabled: fixedFullRange,\n                searchable: false,\n                style: { width: '140px', fontSize: '15px' },\n                separator: true\n              }}\n            />\n          ) : null\n        }\n      </Flex>\n      <Flex flexDirection='column'>\n\n        <DateRangePicker\n          startDate={dateRange.startDate ? moment(fixedFullRange ? min : dateRange.startDate) : null}\n          endDate={dateRange.endDate ? moment(fixedFullRange ? max : dateRange.endDate) : null}\n          disabled={fixedFullRange}\n          isOutsideRange={() => false}\n          enableOutsideDays\n          // isOutsideRange={(day) => {\n          //   return (day.isBefore(moment(min)) || day.isAfter(moment(max)))\n          // }}\n          // enableOutsideDays={false}\n          onDatesChange={({ startDate, endDate }) => {\n            setPreset({ label: 'Custom', value: null })\n            setDates({\n              startDate: startDate ? startDate.format('MM-DD-YYYY') : null,\n              endDate: endDate ? endDate.format('MM-DD-YYYY') : null\n            })\n          }}\n        />\n        {\n          showCompareDate && !fixedFullRange ? (\n            <>\n              <Text\n                display='flex'\n                alignItems='center'\n                justifyContent='center'\n                color='primary'\n                fontWeight='100'\n                fontSize='15px'\n              >\n              vs.\n              </Text>\n              <DateRangePicker\n                startDate={compareDateRange.startDate ? moment(fixedFullRange ? min : compareDateRange.startDate) : null}\n                endDate={compareDateRange.endDate ? moment(fixedFullRange ? max : compareDateRange.endDate) : null}\n                disabled={fixedFullRange}\n                isOutsideRange={(day) => {\n                  return (day.isBefore(min) || day.isAfter(max))\n                }}\n                onDatesChange={({ startDate, endDate }) => {\n                  setComparePreset({ label: 'Custom', value: null })\n                  setCompareDates({\n                    startDate: startDate ? startDate.format('MM-DD-YYYY') : null,\n                    endDate: endDate ? endDate.format('MM-DD-YYYY') : null\n                  })\n                }}\n              />\n            </>\n          ) : null\n        }\n      </Flex>\n      <Tooltip\n        disabled={!isBasic}\n        html={<TooltipContent />}\n        interactive\n        interactiveBorder={100}\n      >\n\n        <AddBtn\n          isFixedFullRange={fixedFullRange}\n          onClick={() => {\n            if (btnDisabled) return\n            toggleCompare(!showCompareDate)\n          }}\n          disabled={btnDisabled}\n        >\n          {\n            fixedFullRange ? null\n              : loading || isLoading ? (\n                <Spinner width='2em' size={3} />\n              ) : (\n                <i className={showCompareDate ? 'fa fa-minus-circle' : 'fa fa-plus-circle'} />\n              )\n          }\n        </AddBtn>\n      </Tooltip>\n    </Flex>\n\n  )\n}\n\nexport default DateContainer\n\nconst TooltipContent = () => {\n  return (\n    <div>\n      You must <Link href='/settings/membership'><Span title='/membership'>upgrade</Span></Link> to compare date ranges\n    </div>\n  )\n}\n\nconst Span = styled.span`\n  color: white;\n  cursor: pointer;\n  border-bottom: 1px solid white;\n  &:hover {\n    opacity: .7;\n  }\n`\nconst AddBtn = styled.span`\n  color: ${({ theme }) => theme.colors.greyLight};\n  background: none;\n  border: none;\n  cursor: ${({ disabled }) => disabled ? 'not-allowed' : 'pointer'};\n  font-size: 20px;\n  margin-top: 3px;\n  transition: ${({ theme }) => theme.transitionDurations[1]};\n  height: 50px;\n  width: 60px;\n  display: flex;\n  align-items: center;\n  border-left: 1px solid ${({ theme, isFixedFullRange }) => isFixedFullRange ? 'transparent' : theme.colors.mainBg};\n  justify-content: center;\n  &:hover {\n    color: ${({ theme, disabled }) => !disabled ? theme.colors.primary : null};\n  }\n  `\nconst CustomLink = styled.div`\n  \n  color: black;\n    margin-left: 5px;\n    text-decoration: none;\n    border-bottom: 1px solid black;\n \n`\nconst options = [\n  { label: 'Full Range', value: 'full' },\n  { label: 'This Month', value: 'this_month' },\n  { label: 'Last Month', value: 'last_month' },\n  { label: 'Past 3 Months', value: 'past_three_months' }\n]\n\nconst getDatePreset = (preset, min, max) => {\n  switch (preset.value) {\n    case 'full': {\n      return { startDate: min, endDate: max }\n    }\n    case 'this_month': {\n      const newStart = moment(moment().startOf('month')).format('MM-DD-YYYY')\n      const newEnd = moment(moment().endOf('month')).format('MM-DD-YYYY')\n      return {\n        startDate: newStart,\n        endDate: newEnd\n      }\n    }\n    case 'last_month': {\n      const newStart = moment(moment().subtract(1, 'months').startOf('month')).format('MM-DD-YYYY')\n      const newEnd = moment(moment().subtract(1, 'months').endOf('month')).format('MM-DD-YYYY')\n\n      return {\n        startDate: newStart,\n        endDate: newEnd\n      }\n    }\n    case 'past_three_months': {\n      const newStart = moment(moment().subtract(3, 'months')).format('MM-DD-YYYY')\n      return { startDate: newStart, endDate: max }\n    }\n    default: {\n      return {}\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AARA;AAQA;AAAA;AAAA;AARA;AAAA;AACA;AACA;AAFA;AASA;AAAA;AAAA;AATA;AAAA;AACA;AACA;AAFA;AAUA;AAAA;AAAA;AAVA;AAAA;AACA;AADA;AAWA;AAAA;AAAA;AAXA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAaeA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AATA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AA/MA;AACA;;;AADA;AAgNA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAPA;AAQA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAfA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA3BA;AA6BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}